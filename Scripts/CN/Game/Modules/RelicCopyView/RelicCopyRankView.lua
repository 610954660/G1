--Name : RelicCopyRankView.lua
--Author : generated by FairyGUI
--Date : 2020-5-26
--Desc : 排行榜
local RankView = require "Game.Modules.Rank.RankView"
local RelicCopyRankView, Super = class("RelicCopyRankView", RankView)
local RankConfiger = require "Game.ConfigReaders.RankConfiger"
local ItemCell = require "Game.UI.Global.ItemCell"
function RelicCopyRankView:ctor()
    --LuaLog("RelicCopyRankView ctor")
    self._packName = "Rank"
    self._compName = "RelicCopyRankView"
    --self._rootDepth = LayerDepth.Window
    self.list_rank = false
end

-- function RelicCopyRankView:_initVM( )
-- 	local vmRoot = self
-- 	local viewNode = self.view
-- 	---Do not modify following code--------
-- 	--{vmFields}:WorldChallenge.RelicCopyRankView
-- 		--{vmFieldsEnd}:WorldChallenge.RelicCopyRankView
-- 	--Do not modify above code-------------
-- end

function RelicCopyRankView:_initUI(...)
    --self:_initVM()
    Super._initUI(self, ...)
    self.list_rank = self.view:getChildAutoType("list_rank")
    self.myRankItem = self.view:getChildAutoType("myRankItem")
end

function RelicCopyRankView:updateRankEnd(rankType)
    printTable(155, "PAHANGB", self._rankData)
    self.list_rank:setVirtual()
    self.list_rank:setItemRenderer(
        function(index, obj)
            local serverInfo = self._rankData[index + 1]
            local c1 = obj:getController("c1")
            local c3 = obj:getController("c3")
            local rankIcon = obj:getChild("rankIcon")
            if index <= 2 then
                if rankIcon then
                    rankIcon:setURL(string.format("%s%s.png", "UI/Rank/Rank_img_", index + 1))
                end
                c1:setSelectedIndex(index + 1)
            else
                c1:setSelectedIndex(4)
            end
            local configItem = DynamicConfigData.t_HallowRankReward
            if not configItem then
                return
            end
            local curReward = {}
            if index <= 2 then
                curReward = configItem[index + 1].reward
            elseif index + 1 >= configItem[4].rankMin and index + 1 <= configItem[4].rankMax then
                curReward = configItem[4].reward
            elseif index + 1 >= configItem[5].rankMin and index + 1 <= configItem[5].rankMax then
                curReward = configItem[5].reward
            elseif index + 1 >= configItem[6].rankMin and index + 1 <= configItem[6].rankMax then
                curReward = configItem[6].reward
            end
            local listreward = obj:getChild("list_reward")
            listreward:setItemRenderer(
                function(rewardindex, rewardobj)
                    local itemcell = BindManager.bindItemCell(rewardobj)
                    local award = curReward[rewardindex + 1]
                    itemcell:setData(award.code, award.amount, award.type)
                end
            )
            listreward:setNumItems(#curReward)
            local txt_rank = obj:getChild("txt_rank")
            txt_rank:setText((index + 1) .. "")
            if serverInfo then
                c3:setSelectedIndex(0)
                local txt_name = obj:getChildAutoType("txt_name")
                txt_name:setText(serverInfo.name)
                local combat = serverInfo.combat or 0
                local txt_fight = obj:getChildAutoType("txt_fight")
                txt_fight:setText(StringUtil.transValue(combat))
                local txt_guanka = obj:getChildAutoType("txt_guanka")
                local txt_time = obj:getChildAutoType("txt_time")
                txt_guanka:setText(serverInfo.value .. DescAuto[223]) -- [223]="关"
                if serverInfo.exParam then
                    txt_time:setText(string.format("%s", TimeLib.msToString(serverInfo.exParam.param1)))
                else
                    txt_time:setText("")
                end
                local playerHead = obj:getChildAutoType("headItem")
                local heroItem = BindManager.bindPlayerCell(playerHead)
                heroItem:setHead(serverInfo.head, serverInfo.level)
                playerHead:removeClickListener(100)
                playerHead:addClickListener(
                    function(...)
                        ViewManager.open("ViewPlayerView", {playerId = serverInfo.id, serverId = serverInfo.serverId})
                    end,
                    100
                )
            else
                c3:setSelectedIndex(1)
            end
        end
    )
    local count = 50
    self.list_rank:setNumItems(count)
end

--
function RelicCopyRankView:updateMyRankItem(myRank, myInfo, isCamp) --我自己的item
    printTable(155, ">>>>>>>>sdfwe", myRank, myInfo)
    local obj = self.myRankItem
    local c1 = obj:getController("c1")
    local rankIcon = obj:getChild("rankIcon")
    if rankIcon then
        rankIcon:setURL(string.format("%s%s.png", "UI/Rank/Rank_img_", myRank))
    end
    if myRank == 0 then
        c1:setSelectedIndex(myRank)
    elseif myRank > 0 and myRank <= 3 then
        c1:setSelectedIndex(myRank)
    else
        c1:setSelectedIndex(4)
    end
    if myRank ~= 0 then
        local configItem = DynamicConfigData.t_HallowRankReward
        if not configItem then
            return
        end
        local curReward = {}
        if myRank <= 3 then
            curReward = configItem[myRank].reward
        elseif myRank >= configItem[4].rankMin and myRank <= configItem[4].rankMax then
            curReward = configItem[4].reward
        elseif myRank >= configItem[5].rankMin and myRank <= configItem[5].rankMax then
            curReward = configItem[5].reward
        elseif myRank >= configItem[6].rankMin and myRank <= configItem[6].rankMax then
            curReward = configItem[6].reward
        end
        local listreward = obj:getChild("list_reward")
        listreward:setItemRenderer(
            function(rewardindex, rewardobj)
                local itemcell = BindManager.bindItemCell(rewardobj)
                local award = curReward[rewardindex + 1]
                itemcell:setData(award.code, award.amount, award.type)
            end
        )
        listreward:setNumItems(#curReward)
    end
    local txt_rank = obj:getChild("txt_rank")
    txt_rank:setText((myRank) .. "")
    if myInfo then
        local txt_name = obj:getChildAutoType("txt_name")
        txt_name:setText(myInfo.name)
        local combat = myInfo.combat or  ModelManager.CardLibModel:getFightVal() 
        local txt_fight = obj:getChildAutoType("txt_fight")
        txt_fight:setText(StringUtil.transValue(combat))
        local txt_guanka = obj:getChildAutoType("txt_guanka")
        local txt_time = obj:getChildAutoType("txt_time")
        txt_guanka:setText(myInfo.value .. DescAuto[223]) -- [223]="关"
        if myInfo.exParam then
            if myInfo.exParam.param1 == 0 then
                txt_time:setText("")
            else
                txt_time:setText(string.format("%s", TimeLib.msToString(myInfo.exParam.param1)))
            end
        else
            txt_time:setText("")
        end
        local playerHead = obj:getChildAutoType("headItem")
        local heroItem = BindManager.bindPlayerCell(playerHead)
        heroItem:setHead(myInfo.head, myInfo.level)
        playerHead:setVisible(true)
        playerHead:removeClickListener(100)
        playerHead:addClickListener(
            function(...)
                ViewManager.open("ViewPlayerView", {playerId = myInfo.id, serverId = myInfo.serverId})
            end,
            100
        )
    end
end

--这个方法给特殊排行榜继承后加需要特殊处理的内容
function RelicCopyRankView:updateItemSpec(obj, rank, info, isMine)
end

function RelicCopyRankView:updateItemBaseInfo(obj, rank, info, isMine)
    printTable(16, ">>>>>>>>sdfwe", rank)
end

function RelicCopyRankView:updateItemPlayerHead(obj, rank, info, isMine)
end

function RelicCopyRankView:updateItemHeroHead(obj, rank, info, isMine)
end

function RelicCopyRankView:updateItemAttr(obj, rank, info, isMine)
end

function RelicCopyRankView:_initEvent()
end

return RelicCopyRankView
