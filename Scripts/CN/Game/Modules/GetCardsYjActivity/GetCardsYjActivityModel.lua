--Name : GetCardsYjActivityModel.lua
--Author : generated by FairyGUI
--Date : 2020-9-3
--Desc : 异界招募model


local GetCardsYjActivityModel = class("GetCardsYjActivityModel", BaseModel)

function GetCardsYjActivityModel:ctor()
	self.data = {}
	self.lastHeroCode = 0
end

function GetCardsYjActivityModel:init()

end

function GetCardsYjActivityModel:getAllYJZMAllConfig(moduleId)
	return DynamicConfigData.t_WorldSummonShow[moduleId]
end

function GetCardsYjActivityModel:initData( params )
	-- if self.lastHeroCode == 0 then
	-- 	self.lastHeroCode = params.farplane.data.heroCode
	-- end
	self.data = params
	Dispatcher.dispatchEvent("update_upgetCard")
	self:checkRedDot()
end

function GetCardsYjActivityModel:getLastHeroCode(  )
	return self.lastHeroCode
end

function GetCardsYjActivityModel:setLastHeroCode( heroCode )
	self.lastHeroCode = heroCode
end
function GetCardsYjActivityModel:checkRedDot( ... )
	RedManager.addMap("V_ACTIVITY_"..GameDef.ActivityType.Farplane,{"V_SUBACTIVITY_YJ"})
    RedManager.updateValue("V_SUBACTIVITY_YJ",false)
	local viewData = ActivityModel:getActityByType( GameDef.ActivityType.Farplane )
	if (not self.data.farplane) or (not self.data.farplane.data) then
		return
	end
    if viewData then
    	local config = self:getAllConfig( viewData.showContent.countReward)
    	for k,v in pairs(config) do
    		if  self.data.farplane.data.count>= v.num then
    			local flag = self:checkHadGetAward(v.id)
			    if not flag then
			    	RedManager.updateValue("V_SUBACTIVITY_YJ",true)
                   return
			    end
    		end
    	end
    end
    if self.data.farplane.data.freeTimes>0 then
		RedManager.updateValue("V_ACTIVITY_"..GameDef.ActivityType.Farplane,true)
	else
		RedManager.updateValue("V_ACTIVITY_"..GameDef.ActivityType.Farplane,false)
	end
	Dispatcher.dispatchEvent("update_cardListTime")
end

function GetCardsYjActivityModel:getData( ... )
	return self.data.farplane
end

function GetCardsYjActivityModel:getYJHeroConfig( moduleId )
	local config = DynamicConfigData.t_WorldSummon[moduleId]
	local configArr = {}
	for k,v in pairs(config) do
		table.insert(configArr,v)
	end
	return  configArr
end

function GetCardsYjActivityModel:getAllConfig( id )
	-- local type= DynamicConfigData.t_heroLottery[id].type
	return DynamicConfigData.t_LotteryTimesReward[id]
end

function GetCardsYjActivityModel:getConfigByNextId( type,count)
	local config =  DynamicConfigData.t_LotteryTimesReward[type]
	local maxConfig = nil
	local maxCount = 0
	for i,v in ipairs(config) do
		if maxCount < v.num then
			maxCount = v.num
			maxConfig = v
		end
		if v.num>=count then
			return v
		end
	end
	return maxConfig
end

function GetCardsYjActivityModel:checkHadGetAward( id)
	if self.data.farplane and self.data.farplane.data and self.data.farplane.data.rewardRecordMap then
		local tempData = self.data.farplane.data.rewardRecordMap
		for k,v in pairs(tempData) do
			if v.id == id then
				return true
			end
		end
	end
	return false
end

return GetCardsYjActivityModel
