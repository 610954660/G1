--Date :2020-12-04
--Author : generated by FairyGUI
--Desc : 

local TimingPushModel = class("TimingPush", BaseModel)
--状态0不可领取 1可领取 2已经领取
function TimingPushModel:ctor()
	self.status = 0
	self.canOpen = false
	self.startTime = 0
	self.endTime = 0
end

function TimingPushModel:init()

end
function TimingPushModel:changeView()
	if self:isMainUIShow() and self.canOpen then
		local curHour = tonumber(os.date("%H",ServerTimeModel:getServerTime()))
		if curHour >= self.startTime and curHour <  self.endTime then
			local dayStr = tostring(DateUtil.getOppostieDays())
			local state = FileCacheManager.getStringForKey("TimingPush_first", "", nil, false)
			if dayStr ~= state then
				Scheduler.schedule(function()
					ViewManager.open("TimingPushView")
					self.canOpen = false
					FileCacheManager.setStringForKey("TimingPush_first", tostring(dayStr), nil, false)
				end,0.1,1)
			else
				return true
			end
		else
			Dispatcher.dispatchEvent("update_Timing_reward",{notshow = true})
		end
		
	end
end


function TimingPushModel:isMainUIShow()
    local mainUILayer = ViewManager.getParentLayer(LayerDepth.MainUI)
    if not mainUILayer then
        return false
    end
    local mainUIChildren = mainUILayer:getChildren()
    if not mainUIChildren then
        return false
    end

    if #mainUIChildren < 1 then
        return false
    end
    local views = ViewManager.getOpeningViews()
    local hasOther = false
    for k,v in pairs(views) do
        if v.window._viewName ~= "MainUIView" and v.window._viewName ~= "BroadcastView" then
            hasOther = true
            break
        end
    end
    return mainUIChildren[1]:isVisible() and not hasOther
end
function TimingPushModel:setSeverData(data)
	if not data.timePush then return end
	local curHour = tonumber(os.date("%H",ServerTimeModel:getServerTime()))
	local config = DynamicConfigData.t_TimedReward[1]
	self.status = data.timePush and data.timePush.status or 0
	if data.timePush.status == 1 then
		self.startTime = config.icon1[1].startTime
		self.endTime = config.icon1[1].endTime
		if curHour >= self.startTime and curHour <  self.endTime then
			if not GuideModel:isEndFirstGuide() then return end
			self.canOpen = true
			
			if self:changeView() then
				Dispatcher.dispatchEvent("update_Timing_reward")
			end
        else
            --self.status = 0
			Dispatcher.dispatchEvent("update_Timing_reward",{notshow = true})
		end
	end
end
function TimingPushModel:getState()
	return self.status
end
function TimingPushModel:setState(state)
	self.status = state
end
return TimingPushModel
