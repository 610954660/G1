--Name : DutyModel.lua
--Author : generated by FairyGUI
--Date : 2020-6-13
--Desc : 职级数据层 added by xhd


local DutyModel = class("DutyModel", BaseModel)
local band = bit.band
local lshift = bit.lshift
function DutyModel:ctor()
   self.dutyData = false
   self.curDutyIndex = 1
   self.__taskOdm = false
end

function DutyModel:init()

end

function DutyModel:setData( data )
	self.dutyData = data
	-- printTable(1,self.dutyData)
	self.curDutyIndex = self.dutyData.dutyId -- id 和index 已经一致
	self.__taskOdm = self.dutyData.records
	self:check_redDot()
	Dispatcher.dispatchEvent(EventType.update_dutyShow)
	Dispatcher.dispatchEvent(EventType.update_MainDutyShow) --更新主界面显示
end

function DutyModel:check_redDot( ... )
	--每日奖励红点
	-- print(1,"self.dutyData.isRecv",self.dutyData.isRecv)
	GlobalUtil.delayCallOnce("DutyModel:check_redDot",function()
		RedManager.updateValue("V_DUTYDAIRY",not self.dutyData.isRecv)
		--任务红点
		local taskConfig = self:getTaskConfig( self.curDutyIndex )
		local taskFlag = false
		for k,v in pairs(taskConfig) do
			local status = self:getRewardStatus(v.id,1)
			if status == 1 then
				taskFlag = true
				break
			end
		end
		-- print(1,"taskFlag",taskFlag)
		RedManager.updateValue("V_DUTYTASK",taskFlag)
		--晋升红点
		local count,max =  self:getCurProgressStatus( )
		local  proFlag = false
		if max>0 then
			if count>=max then
				proFlag = true
			end
		end
		RedManager.updateValue("V_DUTYUP",proFlag)
	end, self, 0.2)
end

function DutyModel:setCurDutyIndex( index )
	self.curDutyIndex = index
end

function DutyModel:getCurDutyIndex(  )
	return self.curDutyIndex
end

function DutyModel:getCurDutyConfig( ... )
	return DynamicConfigData.t_DutyRewardConfig[self.curDutyIndex]
end

function DutyModel:getCurDutyName( ... )
	return DynamicConfigData.t_DutyRewardConfig[self.curDutyIndex].dutyName
end

function DutyModel:getDutyConfig( dutyId )
	return DynamicConfigData.t_DutyRewardConfig[dutyId]
end

function DutyModel:getAllDutyConfig( ... )
	return DynamicConfigData.t_DutyRewardConfig
end

function DutyModel:getCurIsResv( ... )
    return self.dutyData.isRecv
end

--获取主界面需要显示的数据
function DutyModel:getMainUIShowNeed( ... )
	local config = self:getAllDutyConfig()
	local showItem = {}
	local des = ""
	local maxId = 0
	local minId = 0
	for i=self.curDutyIndex+1,#config do
		if #config[i].showItem>0 then --找到下一阶
           showItem = config[i].showItem
           des = config[i].desc
           maxId = i -1
           break
		end
	end
	for i=self.curDutyIndex,1,-1 do
		if #config[i].showItem>0 then --找到最顶的id
           minId = i
           break
		end
		if i==1 then
			minId = 1
		end
	end
	--print(1,"minId=",minId)
	--print(1,"maxId=",maxId)
	--print(1,"curDutyIndex",self.curDutyIndex)
	local taskCount = 0
	local doneTask = 0
	for i=minId,maxId do
		local config = self:getTaskConfig(i)
		taskCount = taskCount + #config
	end
    
    --做完的任务
	for i=minId,self.curDutyIndex-1 do
		local config = self:getTaskConfig(i)
		doneTask = doneTask + #config
	end

	local count,max = self:getCurProgressStatus( )
	-- print(1,count,max)
	doneTask = doneTask +count
    return showItem,doneTask,taskCount,des
end

function DutyModel:getLastMainUIShowNeed(  )
    local config = self:getAllDutyConfig()
    local curIndex = #config - 1
	local showItem = {}
	local des = ""
	local maxId = 0
	local minId = 0
	for i=curIndex+1,#config do
		if #config[i].showItem>0 then --找到下一阶
           showItem = config[i].showItem
           des = config[i].desc
           maxId = i -1
           break
		end
	end
	for i=curIndex,1,-1 do
		if #config[i].showItem>0 then --找到最顶的id
           minId = i
           break
		end
		if i==1 then
			minId = 1
		end
	end
	local taskCount = 0
	local doneTask = 0
	for i=minId,maxId do
		local config = self:getTaskConfig(i)
		taskCount = taskCount + #config
	end
    return showItem,taskCount,taskCount,des
end

--获取当前职级是否可以晋升
function DutyModel:getCurProgressStatus( )
	--通过获取当前任务状态获取
    local taskConfig = self:getTaskConfig( self.curDutyIndex )
    local max = #taskConfig
    local count = 0 
    for k,v in pairs(taskConfig) do
    	local status = self:getRewardStatus(v.id,1)
    	if status == 2 then
    		count = count +1
    	end
    end
	return count,max
end

function DutyModel:getTaskConfig( dutyId )
	local tempArr =  DynamicConfigData.t_DutyTaskConfig[dutyId]
	if not tempArr then
		 return {}
	end
	local config = {}
	for k,v in pairs(tempArr) do
		table.insert(config,v)
	end
	return config
end

function DutyModel:getACCValue(recordId,seq )
	local data = self.__taskOdm[recordId]
	-- printTable(1,data)
	if not data then
		return 0
	end
	return data.acc or 0
end

function DutyModel:updateProgress(updateInfo )
	-- if updateInfo.recordId == 110 then
	-- 	print(1,"DutyModel:updateProgress")
	-- 	printTable(1,updateInfo)
	-- end
	
	if updateInfo.gamePlayType ~= GameDef.GamePlayType.DutyTask then
		return
	end
	
	local data = self.__taskOdm[updateInfo.recordId]
	if not data then
		data = updateInfo
		self.__taskOdm[updateInfo.recordId] = data
	end
	local _finish = data and data.finish or {}

	local finish = updateInfo.finish
	if finish then
		for k, num in ipairs(finish) do
			local _num = _finish[k] or 0
			if num ~= _num then
				for i = 1, 32 do
					local n = lshift(1, (i - 1))
					if band(num, n) > 0 and band(_num, n) <= 0 then
						local seq = (k - 1) * 32 + i
					end
				end
			end
		end
		data.finish = finish
	end
	
	if data then
		data.acc = updateInfo.acc
	end
	--只有当前职级的才去做红点检测
	local taskConfig = self:getTaskConfig(self.curDutyIndex )
	for i,v in ipairs(taskConfig) do
		if updateInfo.recordId == v.id then
			self:check_redDot()
			break
		end
	end
	
    Dispatcher.dispatchEvent(EventType.update_dutyShow)
end


function DutyModel:updateRewardStatus(updateInfo )
	-- if updateInfo.recordId == 110 then
	-- 	print(1,"DutyModel:updateRewardStatus")
	-- 	printTable(1,updateInfo)
	-- end
	if updateInfo.gamePlayType ~= GameDef.GamePlayType.DutyTask then
		return
	end
	
	local data = self.__taskOdm[updateInfo.recordId]
	if not data then
		data = {}
		self.__taskOdm[updateInfo.recordId] = data
	end
	data.got = updateInfo.got
	data.seq = updateInfo.seq
	Dispatcher.dispatchEvent(EventType.update_dutyShow)
	--只有当前职级的才去做红点检测
	local taskConfig = self:getTaskConfig(self.curDutyIndex )
	for i,v in ipairs(taskConfig) do
		if updateInfo.recordId == v.id then
			self:check_redDot()
			break
		end
	end
end

--检测是否完成
function DutyModel:checkIsFinish(recordId, seq)
	local data = self.__taskOdm[recordId]
	if not data then
		return false
	end

	local finish = data.finish
	if not finish then
		return false
	end

	local shift = (seq - 1) % 32
	local arrayIndex = math.ceil(seq / 32)
	local num = finish[arrayIndex]
	if not num then
		return false
	end

	return band(num, lshift(1, shift)) > 0
end

function DutyModel:getRewardStatus(recordId, seq)
	if not self:checkIsFinish(recordId, seq) then
		return 0
	end
	local data = self.__taskOdm[recordId]

	local got = data.got
	if not got then
		return 1
	end

	local shift = (seq - 1) % 32
	local arrayIndex = math.ceil(seq / 32)
	local num = got[arrayIndex]
	if not num then
		return 1
	end

	if band(num, lshift(1, shift)) > 0 then
		return 2
	end
	return 1
end

return DutyModel
