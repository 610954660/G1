--Name : TwistRegimentView.lua
--Author : generated by FairyGUI
--Date : 2020-4-15
--Desc :

local TwistRegimentView,Super = class("TwistRegimentView", Window)

local TwistRegimentMapRect = require "Game.Modules.TwistRegiment.TwistRegimentMapRect"

function TwistRegimentView:ctor(args)
	--LuaLog("TwistRegimentView ctor")
	self._packName = "TwistRegiment"
	self._compName = "TwistRegimentView"
	self._rootDepth = LayerDepth.Window
	self._showParticle=true
	self.guochangyun=false
	self._updateTimeId=false
	self.args = args
	self._mapRect = false
	self.recoardBoard = false

	--self._waitBattle = true --如果有战斗未结束跳转到这里需要等待战斗结束

	self._curPosIndex = 1
	self._curMapMaxIndex = 20

	self._grid = 1
	self.reward = {}

	self._recordData = {}

	self.list_record = false
	self.nextState = false

	self.btn_treasure = false

	self.btn_rank	= false
	
    self.chorBossBtn=false
	self.txt_countTimer=false
	
	self.calltimer=false
end

function TwistRegimentView:_initEvent( )

end

function TwistRegimentView:_initVM( )

	TwistRegimentModel.moving = false
	local vmRoot = self
	local viewNode = self.view
	---Do not modify following code--------
	--{vmFields}:FairyLand.TwistRegimentView
	vmRoot.com_map = viewNode:getChildAutoType("$com_map")--
	vmRoot.btn_help = viewNode:getChildAutoType("$btn_help")--Button

	vmRoot.btn_treasure = viewNode:getChildAutoType("$btn_treasure")
	vmRoot.btn_rank 	= viewNode:getChildAutoType("$btn_rank")
	vmRoot.btn_shop  	= viewNode:getChildAutoType("$btn_shop")
   
	
	
	--{vmFieldsEnd}:FairyLand.TwistRegimentView
	--Do not modify above code-------------
	--viewNode:getChildAutoType("frame"):getController("c1"):setSelectedIndex(1)
	--self.com_map:setSize(display.width, display.height)
	--self.com_map:setPosition(-(display.width - self.view:getWidth())/2, 0)
	--vmRoot.nextMap = viewNode:getChildAutoType("nextMap")--Button

	self.txt_countTimer=self.view:getChildAutoType("txt_countTimer")
	self.btn_help:addClickListener(function( ... )
			RollTips.showHelp(Desc.help_StrTitle193, Desc.help_StrDesc193)
	end)

	self._mapRect = TwistRegimentMapRect.new(self.com_map)
	
	self._mapRect:initMap()
	self:setBg("bg_regiment.jpg")
	self:setTitle("")
	self:moveTitleToTop()
	self:updateCountTimer()
	ViewManager.open("TwistDoubleScoreView",{doubleNum=3})
	ViewManager.close("TwistDoubleScoreView")
	self._mapRect:setToPos(TwistRegimentModel.grid)
end





function TwistRegimentView:showNextMapExcessive(onComplete)

	
end

function TwistRegimentView:TwistRegimentView_refreshPanel()
	 self._mapRect:initMap()
end

function TwistRegimentView:FairyLand_UpdateFairyLandData(_,params)
	
end


function TwistRegimentView:fairyLand_end()


end




function TwistRegimentView:refreshLucky()
	local day = TimeLib.DayInWeek()
	local data = DynamicConfigData.t_lucky[day]
	local luckEventTimes = TwistRegimentModel:getLuckEventTimes()
	if not data then return end
	txt_luckyDec:setText(string.format(Desc.fairyLand_luckyDec,data.title))
	if day == 5 then
		txt_luckyTime:setText(Desc.fairyLand_luckyTime2)
	else
		txt_luckyTime:setText(string.format(Desc.fairyLand_luckyTime,luckEventTimes))
	end
end





-- 倒计时
function TwistRegimentView:updateCountTimer()
	if self.isEnd then return end
	local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.Monopoly)
	if not actData then return end
	local actId   = actData.id
	local status, addtime = ModelManager.ActivityModel:getActStatusAndLastTime(actId)
	if not addtime then return end
	TwistRegimentModel.activeEnd=false
	if status == 2 and addtime == -1 then
		self.isEnd = false
		self.txt_countTimer:setText(Desc.activity_txt5)
	else
		local lastTime = math.floor(addtime / 1000)
		if lastTime == -1 then
			self.txt_countTimer:setText(Desc.activity_txt5)
		else
			if not tolua.isnull(self.txt_countTimer) then
				self.txt_countTimer:setText(TimeLib.GetTimeFormatDay(lastTime, 2))
			end
			local function onCountDown(time)
				if not tolua.isnull(self.txt_countTimer) then
					self.isEnd = false
					self.txt_countTimer:setText(TimeLib.GetTimeFormatDay(time, 2))
				end
			end
			local function onEnd(...)
				self.isEnd = true
				if not tolua.isnull(self.txt_countTimer) then
					--  self.activityEnable = true
					self.txt_countTimer:setText(Desc.activity_txt18)
					TwistRegimentModel.activeEnd=true
				end
			end
			if self.timer then
				TimeLib.clearCountDown(self.timer)
			end
			self.timer = TimeLib.newCountDown(lastTime, onCountDown, onEnd, false, false, false)
		end
	end
end





function TwistRegimentView:refreshProgress()
	local floor 	= TwistRegimentModel.floorFlag
	local sieveTimes = TwistRegimentModel.sieveTimes
	floor = floor > 7 and 7 or floor
	local data 		=  DynamicConfigData.t_times[floor]
	local progress 	= self.btn_treasure:getChildAutoType("progress")
	local txt_times = self.btn_treasure:getChildAutoType("txt_times")

	if not data then return end

	local info = {data=data,sieveTimes = sieveTimes}
	progress:setMax(data.timeslimit)
	progress:setValue(sieveTimes)
	txt_times:setText(string.format(Desc.fairyLand_boxTimes,sieveTimes,data.timeslimit))
end


----扫荡检测
--function TwistRegimentView:showRewardView()
	----检测扫荡处理
	--local info = {}
	--info.text = ""
	--info.title = DescAuto[334] -- [334]="奖励预览"
	----info.yesText=self.btnSweep:getText()
	----info.activeType=GameDef.BattleArrayType.Monopoly
	--info.key ="AlertRewardView"
	--Alert.show(info)
--end





function TwistRegimentView:_initUI( )
	self:_initVM()

end

function TwistRegimentView:_exit()
	Scheduler.unschedule(self.timer)
end

return TwistRegimentView
