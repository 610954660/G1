--Date :2021-01-29
--Author : generated by FairyGUI
--Desc : 

local LanternRiddleView,Super = class("LanternRiddleView", Window)

function LanternRiddleView:ctor()
	--LuaLog("LanternRiddleView ctor")
	self._packName = "LanternActivity"
	self._compName = "LanternRiddleView"
	--self._rootDepth = LayerDepth.Window
	
	self.isEnd = false
end

function LanternRiddleView:_initEvent( )
	
end

function LanternRiddleView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:LanternActivity.LanternRiddleView
	self.btnCtrl = viewNode:getController('btnCtrl')--Controller
	self.btn_crossHelp = viewNode:getChildAutoType('btn_crossHelp')--GButton
	self.btn_help = viewNode:getChildAutoType('btn_help')--GButton
	self.btn_next = viewNode:getChildAutoType('btn_next')--GButton
	self.btn_ok = viewNode:getChildAutoType('btn_ok')--GButton
	self.btn_start = viewNode:getChildAutoType('btn_start')--GButton
	self.c1 = viewNode:getController('c1')--Controller
	self.img_banner = viewNode:getChildAutoType('img_banner')--GLoader
	self.img_title = viewNode:getChildAutoType('img_title')--GLoader
	self.isHaveHelpCtrl = viewNode:getController('isHaveHelpCtrl')--Controller
	self.itemCell = viewNode:getChildAutoType('itemCell')--GButton
	self.item_1 = viewNode:getChildAutoType('item_1')--optionsItem
		self.item_1.color1 = viewNode:getChildAutoType('item_1/color1')--GGraph
		self.item_1.color2 = viewNode:getChildAutoType('item_1/color2')--GGraph
		self.item_1.error = viewNode:getChildAutoType('item_1/error')--GImage
		self.item_1.ok = viewNode:getChildAutoType('item_1/ok')--GImage
		self.item_1.txt_options = viewNode:getChildAutoType('item_1/txt_options')--GTextField
	self.item_2 = viewNode:getChildAutoType('item_2')--optionsItem
		self.item_2.color1 = viewNode:getChildAutoType('item_2/color1')--GGraph
		self.item_2.color2 = viewNode:getChildAutoType('item_2/color2')--GGraph
		self.item_2.error = viewNode:getChildAutoType('item_2/error')--GImage
		self.item_2.ok = viewNode:getChildAutoType('item_2/ok')--GImage
		self.item_2.txt_options = viewNode:getChildAutoType('item_2/txt_options')--GTextField
	self.item_3 = viewNode:getChildAutoType('item_3')--optionsItem
		self.item_3.color1 = viewNode:getChildAutoType('item_3/color1')--GGraph
		self.item_3.color2 = viewNode:getChildAutoType('item_3/color2')--GGraph
		self.item_3.error = viewNode:getChildAutoType('item_3/error')--GImage
		self.item_3.ok = viewNode:getChildAutoType('item_3/ok')--GImage
		self.item_3.txt_options = viewNode:getChildAutoType('item_3/txt_options')--GTextField
	self.item_4 = viewNode:getChildAutoType('item_4')--optionsItem
		self.item_4.color1 = viewNode:getChildAutoType('item_4/color1')--GGraph
		self.item_4.color2 = viewNode:getChildAutoType('item_4/color2')--GGraph
		self.item_4.error = viewNode:getChildAutoType('item_4/error')--GImage
		self.item_4.ok = viewNode:getChildAutoType('item_4/ok')--GImage
		self.item_4.txt_options = viewNode:getChildAutoType('item_4/txt_options')--GTextField
	self.list_reward = viewNode:getChildAutoType('list_reward')--GList
	self.questionTypeCtrl = viewNode:getController('questionTypeCtrl')--Controller
	self.startCtrl = viewNode:getController('startCtrl')--Controller
	self.txt_answer1 = viewNode:getChildAutoType('txt_answer1')--GTextField
	self.txt_answer2 = viewNode:getChildAutoType('txt_answer2')--GTextField
	self.txt_countTimer = viewNode:getChildAutoType('txt_countTimer')--GTextField
	self.txt_countTitle = viewNode:getChildAutoType('txt_countTitle')--GTextField
	self.txt_edittext = viewNode:getChildAutoType('txt_edittext')--GButton
	self.txt_problem = viewNode:getChildAutoType('txt_problem')--GRichTextField
	self.txt_questionOk = viewNode:getChildAutoType('txt_questionOk')--GRichTextField
	self.txt_tips = viewNode:getChildAutoType('txt_tips')--GTextField
	self.txt_title = viewNode:getChildAutoType('txt_title')--GTextField
	--{autoFieldsEnd}:LanternActivity.LanternRiddleView
	--Do not modify above code-------------
end

function LanternRiddleView:_initListener( )
	
	self.btn_crossHelp:addClickListener(function()

	end)

	self.btn_help:addClickListener(function()

	end)

	self.btn_next:addClickListener(function()

	end)

	self.btn_ok:addClickListener(function()

	end)

	self.btn_start:addClickListener(function()

	end)

	self.itemCell:addClickListener(function()

	end)

	self.list_reward:setItemRenderer(function(index, obj)

	end)

	self.txt_edittext:addClickListener(function()

	end)

end

function LanternRiddleView:_initUI( )
	self:_initVM()
	self:_initListener()

	self:LanternRiddleView_refreshPanel()
end


function LanternRiddleView:LanternRiddleView_refreshPanel()
	self:refreshPanel()
end

function LanternRiddleView:refreshPanel()

end

-- 倒计时
function LanternRiddleView:updateCountTimer()
if self.isEnd then return end
local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.LanternGuess)
if not actData then return end
local actId   = actData.id
local status, addtime = ModelManager.ActivityModel:getActStatusAndLastTime(actId)
if not addtime then return end

if status == 2 and addtime == -1 then
	self.isEnd = false
	self.txt_countTimer:setText(Desc.activity_txt5)
else
	local lastTime = addtime / 1000
	if lastTime == -1 then
		self.txt_countTimer:setText(Desc.activity_txt5)
	else
		if not tolua.isnull(self.txt_countTimer) then
			self.txt_countTimer:setText(TimeLib.GetTimeFormatDay(lastTime, 2))
		end
		local function onCountDown(time)
			if not tolua.isnull(self.txt_countTimer) then
				self.isEnd = false
				self.txt_countTimer:setText(TimeLib.GetTimeFormatDay(time, 2))
			end
		end
		local function onEnd(...)
			self.isEnd = true
			if not tolua.isnull(self.txt_countTimer) then
			self.txt_countTimer:setText(Desc.activity_txt18)
			end
		end
		if self.timer then
			TimeLib.clearCountDown(self.timer)
		end
		self.timer = TimeLib.newCountDown(lastTime, onCountDown, onEnd, false, false, false)
	end
end
end


function LanternRiddleView:_exit()
	TimeLib.clearCountDown(self.timer)
end



return LanternRiddleView