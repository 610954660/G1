--Date :2020-12-30
--Author : generated by FairyGUI
--Desc : 

local CrossLaddersMainView,Super = class("CrossLaddersMainView", Window)

function CrossLaddersMainView:ctor()
	--LuaLog("CrossLaddersMainView ctor")
	self._packName = "CrossLadders"
	self._compName = "CrossLaddersMainView"
	--self._rootDepth = LayerDepth.Window
	self.timer 		= false
	self.showMoneyType = {
		{type = GameDef.ItemType.Money, code = GameDef.MoneyType.SkyLadder},
		{type = GameDef.ItemType.Money, code = GameDef.MoneyType.Gold},
		{type = GameDef.ItemType.Money, code = GameDef.MoneyType.Diamond},
		} --显示
end

function CrossLaddersMainView:_initEvent( )
	
end

function CrossLaddersMainView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:CrossLadders.CrossLaddersMainView
	self.btn_add = viewNode:getChildAutoType('btn_add')--GButton
	self.btn_def = viewNode:getChildAutoType('btn_def')--GButton
	self.btn_heroHouse = viewNode:getChildAutoType('btn_heroHouse')--btn_heroHouse
		self.btn_heroHouse.img_red = viewNode:getChildAutoType('btn_heroHouse/img_red')--GImage
	self.btn_quickFight = viewNode:getChildAutoType('btn_quickFight')--GButton
	self.btn_rank = viewNode:getChildAutoType('btn_rank')--GButton
	self.btn_record = viewNode:getChildAutoType('btn_record')--btn_record
		self.btn_record.img_red = viewNode:getChildAutoType('btn_record/img_red')--GImage
	self.btn_refresh = viewNode:getChildAutoType('btn_refresh')--GButton
	self.btn_reward = viewNode:getChildAutoType('btn_reward')--GButton
	self.btn_shop = viewNode:getChildAutoType('btn_shop')--GButton
	self.frame = viewNode:getChildAutoType('frame')--GLabel
	self.item_1 = viewNode:getChildAutoType('item_1')--playerItem
		self.item_1.modelNode = viewNode:getChildAutoType('item_1/modelNode')--GComponent
		self.item_1.txt_name = viewNode:getChildAutoType('item_1/txt_name')--GTextField
		self.item_1.txt_power = viewNode:getChildAutoType('item_1/txt_power')--GTextField
		self.item_1.txt_rank = viewNode:getChildAutoType('item_1/txt_rank')--GTextField
	self.item_2 = viewNode:getChildAutoType('item_2')--playerItem
		self.item_2.modelNode = viewNode:getChildAutoType('item_2/modelNode')--GComponent
		self.item_2.txt_name = viewNode:getChildAutoType('item_2/txt_name')--GTextField
		self.item_2.txt_power = viewNode:getChildAutoType('item_2/txt_power')--GTextField
		self.item_2.txt_rank = viewNode:getChildAutoType('item_2/txt_rank')--GTextField
	self.item_3 = viewNode:getChildAutoType('item_3')--playerItem
		self.item_3.modelNode = viewNode:getChildAutoType('item_3/modelNode')--GComponent
		self.item_3.txt_name = viewNode:getChildAutoType('item_3/txt_name')--GTextField
		self.item_3.txt_power = viewNode:getChildAutoType('item_3/txt_power')--GTextField
		self.item_3.txt_rank = viewNode:getChildAutoType('item_3/txt_rank')--GTextField
	self.item_4 = viewNode:getChildAutoType('item_4')--playerItem
		self.item_4.modelNode = viewNode:getChildAutoType('item_4/modelNode')--GComponent
		self.item_4.txt_name = viewNode:getChildAutoType('item_4/txt_name')--GTextField
		self.item_4.txt_power = viewNode:getChildAutoType('item_4/txt_power')--GTextField
		self.item_4.txt_rank = viewNode:getChildAutoType('item_4/txt_rank')--GTextField
	self.item_5 = viewNode:getChildAutoType('item_5')--playerItem
		self.item_5.modelNode = viewNode:getChildAutoType('item_5/modelNode')--GComponent
		self.item_5.txt_name = viewNode:getChildAutoType('item_5/txt_name')--GTextField
		self.item_5.txt_power = viewNode:getChildAutoType('item_5/txt_power')--GTextField
		self.item_5.txt_rank = viewNode:getChildAutoType('item_5/txt_rank')--GTextField
	self.txt_countTimer = viewNode:getChildAutoType('txt_countTimer')--GTextField
	self.txt_countTimerTitle = viewNode:getChildAutoType('txt_countTimerTitle')--GTextField
	self.txt_fightDesc = viewNode:getChildAutoType('txt_fightDesc')--GTextField
	self.txt_haveTime = viewNode:getChildAutoType('txt_haveTime')--GRichTextField
	self.txt_partCondition = viewNode:getChildAutoType('txt_partCondition')--GTextField
	self.txt_tips = viewNode:getChildAutoType('txt_tips')--GTextField
	--{autoFieldsEnd}:CrossLadders.CrossLaddersMainView
	--Do not modify above code-------------
end

function CrossLaddersMainView:_initListener( )
	
	self.txt_fightDesc:setText(Desc.CrossLadders_str29)
	self.btn_add:addClickListener(function()
		if not CrossLaddersModel:checkOpenState() then
			RollTips.show(Desc.CrossLadders_str27)
			return
		end

		local state = CrossLaddersModel:noQualif()
		if not state then
			return
		end
		ViewManager.open("CrossLaddersShopView")
	end)

	self.btn_def:addClickListener(function()
		if not CrossLaddersModel:checkOpenState() then
			RollTips.show(Desc.CrossLadders_str27)
			return
		end
		local state = CrossLaddersModel:noQualif()
		if not state then
			return
		end
		local const = DynamicConfigData.t_arena[1]
		local function battleHandler(eventName)
			if eventName == "begin" then
			end
		end
		local args = {
			fightID= const.fightId,
			configType = GameDef.BattleArrayType.SkyLadderDef
		}
		Dispatcher.dispatchEvent(EventType.battle_requestFunc,battleHandler,args)
	end)

	self.btn_heroHouse:addClickListener(function()
		-- local state = CrossLaddersModel:noQualif()
		-- if not state then
		-- 	return
		-- end
		ViewManager.open("CrossLaddersHeroHouseView")
	end)

	self.btn_quickFight:addClickListener(function()
		if not CrossLaddersModel:checkOpenState() then
			RollTips.show(Desc.CrossLadders_str27)
			return
		end
		local state = CrossLaddersModel:noQualif()
		if not state then
			return
		end

		local info = {}
		info.text = Desc.CrossLadders_str15
		info.type = "yes_no"
		info.onYes = function() 
			local const = DynamicConfigData.t_HPvPConst[1];
			local requseInfo={
				fightId	= const.fightId,
				playerId= tonumber(PlayerModel.userid),
				gamePlay= GameDef.BattleArrayType.SkyLadderAck, -- SkyLadderDef
				serverId= LoginModel:getUnitServerId(),
			}
			local function success(data)
				if (data.array) then
				end
				if data.heroInfos then
				end
				if TableUtil.GetTableLen(data.array) ~= 0  then
					local rankInfo = CrossLaddersModel:getNextRankInfo()
					CrossLaddersModel:reqSkyLadder_ChallengeOneKey(rankInfo.id,rankInfo.rank)
				else
					RollTips.show(Desc.CrossLadders_str28)
				end
			end
			RPCReq.Battle_GetOpponentBattleArray(requseInfo,success)
		end
		Alert.show(info);
	end)

	self.btn_rank:addClickListener(function()
		ViewManager.open("CrossLaddersRankView")
	end)

	self.btn_record:addClickListener(function()
		if not CrossLaddersModel:checkOpenState() then
			RollTips.show(Desc.CrossLadders_str27)
			return
		end
		local state = CrossLaddersModel:noQualif()
		if not state then
			return
		end

		ViewManager.open("CrossLaddersRecordView")
		CrossLaddersModel:setRecordFightMs()
		RedManager.updateValue("V_CROSSLADDERS_RECORD",false)
	end)
	if CrossLaddersModel:checkOpenState() then
		CrossLaddersModel:checkRecord()
	end

	self.btn_refresh:addClickListener(function()
		if not CrossLaddersModel:checkOpenState() then
			RollTips.show(Desc.CrossLadders_str27)
			return
		end
		local state = CrossLaddersModel:noQualif()
		if not state then
			return
		end
		CrossLaddersModel:reqSkyLadder_GetChallengeList()
	end)

	self.btn_reward:addClickListener(function()
		ViewManager.open("CrossLaddersRewardView")
	end)

	self.btn_shop:addClickListener(function()
		ModuleUtil.openModule(ModuleId.Shop_crossLadders.id,true)
	end)

	RedManager.register("V_CROSSLADDERS_RECORD", self.btn_record:getChildAutoType("img_red"))
	RedManager.register("V_CROSSLADDERS_HEROHOUSE", self.btn_heroHouse:getChildAutoType("img_red"))
end

function CrossLaddersMainView:_initUI( )
	self:_initVM()
	self:_initListener()
	self:setBg("crossLadders.jpg")
	self:CrossLaddersMainView_refreshPanel()
	if CrossLaddersModel:checkOpenState() then
		CrossLaddersModel:reqSkyLadder_GetInfo()
		CrossLaddersModel:reqSkyLadder_GetChallengeList()
	else
		RollTips.show(Desc.CrossLadders_str30)
	end
end

function CrossLaddersMainView:CrossLaddersMainView_refreshPanel()
	self:refreshPanel()
end

function CrossLaddersMainView:refreshPanel()
	self:setRankList()
	self:setTextInfo()
	self:countTimes()
end


-- 设置排名信息
function CrossLaddersMainView:setRankList()
	local rankInfo = CrossLaddersModel.challengeList
	local rankData = rankInfo.rankData or {}
	local myRankData = rankInfo.myRankData or {}
	local myId = tonumber(PlayerModel.userid)
	local haveMe = false
	for k,v in pairs(rankData) do
		if v.id == myId then
			haveMe = true
			break
		end
	end
	if not haveMe and myRankData.id then
		table.insert(rankData,myRankData)
		table.sort(rankData,function(a,b) 
			return a.rank < b.rank
		end)
	else
		for k,v in pairs(rankData) do
			if v.id == myId then
				rankData[k] = myRankData
				break
			end
		end
	end

	if #rankData > 0 then
		for i=1,5 do
			local obj = self.view:getChildAutoType("item_"..i)   
			local isSelfCtrl 	= obj:getController("isSelfCtrl") -- 0 不是自己 1 是自己
			local modelNode 	= obj:getChildAutoType("modelNode")
			local txt_rank 		= obj:getChildAutoType("txt_rank")
			local txt_power 	= obj:getChildAutoType("txt_power")
			local txt_name 		= obj:getChildAutoType("txt_name")
			local haveDataCtrl  = obj:getController("haveDataCtrl")
			local data 	= rankData[i] or {}

			haveDataCtrl:setSelectedIndex(not data.id and 0 or 1)
			isSelfCtrl:setSelectedIndex((myId==data.id) and 1 or 0)
			txt_rank:setText(string.format(Desc.CrossLadders_rank,data.rank or 0))
			txt_power:setText(StringUtil.transValue(data.combat or 0))
			txt_name:setText(string.format(Desc.CrossLadders_name,data.serverId or 0,data.name or ""))

			-- 模型部分
			if modelNode then
				modelNode:displayObject():removeAllChildren()
			end
			local skeletonNode =false
			if data then
				if data.heroOpertion == 0 then
					data.heroOpertion = 35001
				end
				if myId==data.id then
					data.heroOpertion = HandbookModel.heroOpertion
				end
				skeletonNode = SpineUtil.createModel(modelNode, {x = 0, y =0}, "stand", data.heroOpertion or 35006,true,false,HandbookModel.fashionCode)
			end
			-- local temp= skeletonNode:findBone("hanging_point")
			-- local pos = {x=temp:getWorldX(),y=-temp:getWorldY()}
			-- local globalPos = modelNode:localToGlobal(pos)
			-- local hpPos= obj:globalToLocal(globalPos)
			-- CrownTitleCell:setPosition(hpPos.x ,hpPos.y)

			obj:removeClickListener(11)
			obj:addClickListener(function() 
				if not CrossLaddersModel:checkOpenState() then
					RollTips.show(Desc.CrossLadders_str27)
					return
				end
				if data.id == myId then
					RollTips.show(Desc.CrossLadders_str4)
					return
				end
				local conf = {
					playerId = data.id or myId,
					gamePlayType = GameDef.GamePlayType.SkyLadder,
					serverId = data.serverId,
					arrayType =  GameDef.BattleArrayType.SkyLadderDef,
					rank = data.rank,
					otherData = data,
					myOldRank = myRankData.rank,
					haveTimes = CrossLaddersModel:getHaveTimes(),
				}
				ViewManager.open("FriendCheckView",conf)
			end,11)
		end
	end
end


-- 设置文本相关
function CrossLaddersMainView:setTextInfo()
	local arenaRank = DynamicConfigData.t_SkyLadder[1].arenaRank
	-- 参与条件
	self.txt_partCondition:setText(string.format(Desc.CrossLadders_str2,arenaRank))
	-- 
	self.txt_tips:setText(Desc.CrossLadders_str3)
	-- 剩余次数
	self.txt_haveTime:setText(string.format(Desc.CrossLadders_haveTimes,CrossLaddersModel:getHaveTimes()))

end


-- 倒计时
function CrossLaddersMainView:countTimes()
	local conf = DynamicConfigData.t_SkyLadder[1]
    local ServerTime    = ServerTimeModel:getServerTime()
    local data      = {}
    local today     = TimeLib.getWeekDay()
    local weekTimes = TimeLib.nextWeekBeginTime()  -- 周末24:00的时间戳 S
    local startMs   = conf.startMs 
    local endMs     = conf.endMs
    local preTime   = 86400*7 - startMs
    local openMs    =   weekTimes - preTime
    local closeMs   =   weekTimes - (86400*7 - endMs)
    local entranceTitle = ""

    local reqInfo = {

    }
    local serverTime = ServerTimeModel:getServerTime()
    local myId  = tonumber(PlayerModel.userid)
    entranceTitle = Desc.CrossLadders_str19
    if today < 6 then
        data.seasonTime = openMs - serverTime
        entranceTitle = Desc.CrossLadders_str20
    elseif today == 6 then
        data.seasonTime = closeMs - serverTime
    elseif today == 7 then
        if serverTime < closeMs then
            data.seasonTime = closeMs - serverTime
        else
            if serverTime <= weekTimes then
                entranceTitle = Desc.CrossLadders_str20
                data.seasonTime = (weekTimes + startMs) - serverTime
            end
        end
    end

	local lastTime = data.seasonTime
	self.txt_countTimerTitle:setText(entranceTitle)

	if lastTime > 0 then
		if not tolua.isnull(self.txt_countTimer) then
			self.txt_countTimer:setText(TimeLib.GetTimeFormatDay(lastTime, 2))
		end
		local function onCountDown(time)
			if not tolua.isnull(self.txt_countTimer) then
				self.txt_countTimer:setText(TimeLib.GetTimeFormatDay(time, 2))
			end
		end
		local function onEnd(...)

			CrossLaddersModel:reqSkyLadder_GetInfo()
			CrossLaddersModel:reqSkyLadder_GetChallengeList()
		end
		if self.timer then
			TimeLib.clearCountDown(self.timer)
		end
		self.timer = TimeLib.newCountDown(lastTime, onCountDown, onEnd, false, false, false)
	end

end

function CrossLaddersMainView:_exit()
	if self.timer then
		TimeLib.clearCountDown(self.timer)
	end
	Dispatcher.dispatchEvent(EventType.CrossTabView_refresh)
end







return CrossLaddersMainView