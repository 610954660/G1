--Date :2021-01-21
--Author : generated by FairyGUI
--Desc : 

local TwistSpFestivalView,Super = class("TwistSpFestivalView", Window)

function TwistSpFestivalView:ctor()
	--LuaLog("TwistSpFestivalView ctor")
	self._packName = "TwistSpFestival"
	self._compName = "TwistSpFestivalView"
	--self._rootDepth = LayerDepth.Window
	self.lastR_index=1
	
end

function TwistSpFestivalView:_initEvent( )
	
end

function TwistSpFestivalView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:TwistSpFestival.TwistSpFestivalView
	self.txt_countTimer = viewNode:getChildAutoType('$txt_countTimer')--GTextField
	self.billHero = viewNode:getChildAutoType('billHero')--billHero
		self.billHero.icon = viewNode:getChildAutoType('billHero/icon')--GLoader
		self.billHero.iconG = viewNode:getChildAutoType('billHero/iconG')--GGroup
		self.billHero.icon_next = viewNode:getChildAutoType('billHero/icon_next')--GLoader
	self.btn_EditorWord = viewNode:getChildAutoType('btn_EditorWord')--GButton
	self.btn_Qianzihe = viewNode:getChildAutoType('btn_Qianzihe')--GButton
	self.btn_help = viewNode:getChildAutoType('btn_help')--GButton
	self.btn_readWord = viewNode:getChildAutoType('btn_readWord')--GButton
	self.frame = viewNode:getChildAutoType('frame')--GLabel
	self.qianzihe = viewNode:getChildAutoType('qianzihe')--GGroup
	self.spineHung = viewNode:getChildAutoType('spineHung')--GComponent
	self.wordType = viewNode:getController('wordType')--Controller
	--{autoFieldsEnd}:TwistSpFestival.TwistSpFestivalView
	--Do not modify above code-------------
end

function TwistSpFestivalView:_initListener( )
	
	self.btn_readWord:addClickListener(function()
         ViewManager.open("TwistWordEditView")		
	end)
	self.btn_Qianzihe:addClickListener(function ()
		ViewManager.open("TwistWordEditView")
	end)
	
	self.btn_EditorWord:addClickListener(function()
		 ViewManager.open("TwistWordTipView")
	end)

	self.btn_help:addClickListener(function()
			local info={}
			info['title']=Desc["help_StrTitle295"]
			info['desc']=Desc["help_StrDesc295"]
			ViewManager.open("GetPublicHelpView",info)
	end)
	local interval=0
	local aciveConfig=TwistSpFestivalModel:getAciveConfig()
	self.view:displayObject():onUpdate(function (dt)
			interval=interval+dt
			if interval>=aciveConfig.interval then
				interval=0
				self:changeBillImage()
			end
			
	end,0)

end


function TwistSpFestivalView:__initBarrage()
	local aciveData=TwistSpFestivalModel:getAciveData()
	if aciveData.isWish then
		Super.__initBarrage(self)
	end
end


function TwistSpFestivalView:_initUI( )
	self:setBg("spFestival.jpg")
	self:_initVM()
	self:_initListener()
	self:setData()
	self:updateCountTimer()
end

function TwistSpFestivalView:setData()
	local aciveData=TwistSpFestivalModel:getAciveData()
	if aciveData.isWish then
		self.btn_EditorWord:setTouchable(false)
		self.wordType:setSelectedPage("haveSend")
		self.qianzihe:setVisible(true)
	end
	TwistSpFestivalModel.hasOpen=true
	TwistSpFestivalModel:updateRed()
	--local MapWidth=fgui.GRoot:getInstance():getViewWidth()
	--local MapHeight=fgui.GRoot:getInstance():getViewHeight()
	--local centerPos=Vector2(MapWidth/2,MapHeight/2)
end

function TwistSpFestivalView:activity_FestivalWishUpdate(_,args)
	if args.showAction then
		local skeletonNode=SpineUtil.createSpineObj(self.spineHung, Vector2.zero, nil, SpinePathConfiger.qianZiHeEffect.path, SpinePathConfiger.qianZiHeEffect.upEffect, SpinePathConfiger.qianZiHeEffect.upEffect)
		skeletonNode:setAnimation(0,"animation",false)
		GlobalUtil.delayCall(function()end,function ()
				skeletonNode:removeFromParent()
				Dispatcher.dispatchEvent(EventType.show_gameReward,{gamePlayType=GameDef.GamePlayType.festivalWish})
				self:setData()
				self:__initBarrage()
		end,2,1)
	end
end



-- 倒计时
function TwistSpFestivalView:updateCountTimer()
	if self.isEnd then return end
	local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.FestivalWish)
	if not actData then return end
	local actId   = actData.id
	local status, addtime = ModelManager.ActivityModel:getActStatusAndLastTime(actId)
	if not addtime then return end
	TwistRegimentModel.activeEnd=false
	if status == 2 and addtime == -1 then
		self.isEnd = false
		self.txt_countTimer:setText(Desc.activity_txt5)
	else
		local lastTime = math.floor(addtime / 1000)
		if lastTime == -1 then
			self.txt_countTimer:setText(Desc.activity_txt5)
		else
			if not tolua.isnull(self.txt_countTimer) then
				self.txt_countTimer:setText(TimeLib.GetTimeFormatDay(lastTime, 2))
			end
			local function onCountDown(time)
				if not tolua.isnull(self.txt_countTimer) then
					self.isEnd = false
					self.txt_countTimer:setText(TimeLib.GetTimeFormatDay(time, 2))
				end
			end
			local function onEnd(...)
				self.isEnd = true
				if not tolua.isnull(self.txt_countTimer) then
					--  self.activityEnable = true
					self.txt_countTimer:setText(Desc.activity_txt18)
					TwistRegimentModel.activeEnd=true
				end
			end
			if self.timer then
				TimeLib.clearCountDown(self.timer)
			end
			self.timer = TimeLib.newCountDown(lastTime, onCountDown, onEnd, false, false, false)
		end
	end
end


--定时改变壁纸
function TwistSpFestivalView:changeBillImage()
	local aciveConfig=TwistSpFestivalModel:getAciveConfig()
	local r_index= math.random(1,3)
	
	if self.lastR_index~=r_index then
		self.lastR_index=r_index
		--self.billHero.iconG:setPosition(-409,0)
		self.billHero.icon_next:setURL(PathConfiger.getFestivalWishIcon(aciveConfig.pic[r_index]))
		self.billHero:getTransition("t0"):play(function ()
				self.billHero.icon:setURL(PathConfiger.getFestivalWishIcon(aciveConfig.pic[r_index]))
		end)
	else
		self:changeBillImage()
	end
end


function TwistSpFestivalView:_exit()
	Scheduler.unschedule(self.timer)
end


return TwistSpFestivalView