--Date :2021-01-21
--Author : generated by FairyGUI
--Desc : 

local TwistWordEditView,Super = class("TwistWordEditView", Window)

function TwistWordEditView:ctor()
	--LuaLog("TwistWordEditView ctor")
	self._packName = "TwistSpFestival"
	self._compName = "TwistWordEditView"
	self._rootDepth = LayerDepth.PopWindow
	
end

function TwistWordEditView:_initEvent( )
	
end

function TwistWordEditView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:TwistSpFestival.TwistWordEditView
	self.TextInput_mulLines = viewNode:getChildAutoType('TextInput_mulLines')--TextInput_mulLines
		self.TextInput_mulLines.txt_input = viewNode:getChildAutoType('TextInput_mulLines/txt_input')--GTextInput
		self.TextInput_mulLines.txt_show = viewNode:getChildAutoType('TextInput_mulLines/txt_show')--GRichTextField
	self.bg = viewNode:getChildAutoType('bg')--GLoader
	self.btn_send = viewNode:getChildAutoType('btn_send')--GButton
	self.closeButton = viewNode:getChildAutoType('closeButton')--GButton
	self.title = viewNode:getChildAutoType('title')--GTextField
	self.wordType = viewNode:getController('wordType')--Controller
	--{autoFieldsEnd}:TwistSpFestival.TwistWordEditView
	--Do not modify above code-------------
end

function TwistWordEditView:_initListener( )
	


	--self.closeButton:addClickListener(function()

	--end)
	--self.TextInput_mulLines:getChildAutoType("title"):set
	self.txt_input = BindManager.bindTextInput(self.TextInput_mulLines)
	--self.txt_input:setText(guildInfo.notice)
	self.txt_input:setMaxLength(40)
	
	local oldStr = self.txt_input:getText()
	self.txt_input:onChanged(function (value)
		if StringUtil.utf8len(value)>39 then
			RollTips.show("寄语内容过长");
		    return 
		end
		oldStr=value
		--self.txt_input:setText(oldStr)
	end)
	
	
	self.btn_send:addClickListener(function()
			local inputText = self.txt_input:getText()
			inputText=StringUtil.limitStringLen(inputText, 40)
			if (StringUtil.isOnlyNumberOrCharacter(inputText)) then
				RollTips.show(Desc.input_tips2);
				self.txt_input:setText(oldStr)
				return;
			end
			local newText=StringUtil.filterString(inputText)
			if newText ~= inputText then
				self.txt_input:setText(oldStr)
				RollTips.show(Desc.input_tips3);
				return
			end
			inputText = newText
			self.txt_input:setText(inputText)
			
			TwistSpFestivalModel:showConfirmView(function ()
				TwistSpFestivalModel:postWish(self.txt_input:getText(),function ()ViewManager.close("TwistWordEditView")end)
			end)	
	end)
	
	

end

function TwistWordEditView:_initUI( )
	self:_initVM()
	self:_initListener()
    self:setData()
end


function TwistWordEditView:setData()
	local aciveData=TwistSpFestivalModel:getAciveData()
	if aciveData.isWish then
		self.txt_input:setText(aciveData.myWish.content)
		self.TextInput_mulLines:setTouchable(false)
		self.wordType:setSelectedPage("read")
	end
end

return TwistWordEditView