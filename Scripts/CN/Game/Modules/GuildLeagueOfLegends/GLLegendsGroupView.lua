--Date :2020-12-31
--Author : generated by FairyGUI
--Desc : 

local GLLegendsGroupView,Super = class("GLLegendsGroupView", Window)

function GLLegendsGroupView:ctor()
	--LuaLog("GLLegendsGroupView ctor")
	self._packName = "GuildLeagueOfLegends"
	self._compName = "GLLegendsGroupView"
	--self._rootDepth = LayerDepth.PopWindow
	self.curGroup = 1;
	self.groupIndexMap = false;
	self.showGroup = 1;
	self.actCD = false;
	self.spineMap = {};
end

function GLLegendsGroupView:_initEvent( )
	
end

function GLLegendsGroupView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:GuildLeagueOfLegends.GLLegendsGroupView
	self.btn_choose1 = viewNode:getChildAutoType('$btn_choose1')--Button14
	self.btn_choose2 = viewNode:getChildAutoType('$btn_choose2')--Button14
	self.btn_choose3 = viewNode:getChildAutoType('$btn_choose3')--Button14
	self.btn_left = viewNode:getChildAutoType('$btn_left')--btn_arrow
	self.btn_right = viewNode:getChildAutoType('$btn_right')--btn_arrow
	self.btn_def = viewNode:getChildAutoType('btn_def')--btn_data
		self.btn_def.img_red = viewNode:getChildAutoType('btn_def/img_red')--GImage
	self.btn_guess = viewNode:getChildAutoType('btn_guess')--btn_data
		self.btn_guess.img_red = viewNode:getChildAutoType('btn_guess/img_red')--GImage
	self.btn_match1 = viewNode:getChildAutoType('btn_match1')--btn_matchType
	self.btn_match2 = viewNode:getChildAutoType('btn_match2')--btn_matchType
	self.frame = viewNode:getChildAutoType('frame')--GLabel
	self.group0_1 = viewNode:getChildAutoType('group0_1')--com_guildGroup(1)
		self.group0_1.btn_video = viewNode:getChildAutoType('group0_1/btn_video')--btn_data
			self.group0_1.btn_video.img_red = viewNode:getChildAutoType('group0_1/btn_video/img_red')--GImage
		self.group0_1.icon = viewNode:getChildAutoType('group0_1/icon')--GLoader
		self.group0_1.txt_flag = viewNode:getChildAutoType('group0_1/txt_flag')--GTextField
		self.group0_1.txt_name = viewNode:getChildAutoType('group0_1/txt_name')--GTextField
	self.group1_1 = viewNode:getChildAutoType('group1_1')--com_guildGroup
		self.group1_1.btn_video = viewNode:getChildAutoType('group1_1/btn_video')--btn_data
			self.group1_1.btn_video.img_red = viewNode:getChildAutoType('group1_1/btn_video/img_red')--GImage
		self.group1_1.icon = viewNode:getChildAutoType('group1_1/icon')--GLoader
		self.group1_1.txt_flag = viewNode:getChildAutoType('group1_1/txt_flag')--GTextField
		self.group1_1.txt_name = viewNode:getChildAutoType('group1_1/txt_name')--GTextField
	self.group1_2 = viewNode:getChildAutoType('group1_2')--com_guildGroup
		self.group1_2.btn_video = viewNode:getChildAutoType('group1_2/btn_video')--btn_data
			self.group1_2.btn_video.img_red = viewNode:getChildAutoType('group1_2/btn_video/img_red')--GImage
		self.group1_2.icon = viewNode:getChildAutoType('group1_2/icon')--GLoader
		self.group1_2.txt_flag = viewNode:getChildAutoType('group1_2/txt_flag')--GTextField
		self.group1_2.txt_name = viewNode:getChildAutoType('group1_2/txt_name')--GTextField
	self.group2_1 = viewNode:getChildAutoType('group2_1')--com_guildGroup
		self.group2_1.btn_video = viewNode:getChildAutoType('group2_1/btn_video')--btn_data
			self.group2_1.btn_video.img_red = viewNode:getChildAutoType('group2_1/btn_video/img_red')--GImage
		self.group2_1.icon = viewNode:getChildAutoType('group2_1/icon')--GLoader
		self.group2_1.txt_flag = viewNode:getChildAutoType('group2_1/txt_flag')--GTextField
		self.group2_1.txt_name = viewNode:getChildAutoType('group2_1/txt_name')--GTextField
	self.group2_2 = viewNode:getChildAutoType('group2_2')--com_guildGroup
		self.group2_2.btn_video = viewNode:getChildAutoType('group2_2/btn_video')--btn_data
			self.group2_2.btn_video.img_red = viewNode:getChildAutoType('group2_2/btn_video/img_red')--GImage
		self.group2_2.icon = viewNode:getChildAutoType('group2_2/icon')--GLoader
		self.group2_2.txt_flag = viewNode:getChildAutoType('group2_2/txt_flag')--GTextField
		self.group2_2.txt_name = viewNode:getChildAutoType('group2_2/txt_name')--GTextField
	self.group2_3 = viewNode:getChildAutoType('group2_3')--com_guildGroup
		self.group2_3.btn_video = viewNode:getChildAutoType('group2_3/btn_video')--btn_data
			self.group2_3.btn_video.img_red = viewNode:getChildAutoType('group2_3/btn_video/img_red')--GImage
		self.group2_3.icon = viewNode:getChildAutoType('group2_3/icon')--GLoader
		self.group2_3.txt_flag = viewNode:getChildAutoType('group2_3/txt_flag')--GTextField
		self.group2_3.txt_name = viewNode:getChildAutoType('group2_3/txt_name')--GTextField
	self.group2_4 = viewNode:getChildAutoType('group2_4')--com_guildGroup
		self.group2_4.btn_video = viewNode:getChildAutoType('group2_4/btn_video')--btn_data
			self.group2_4.btn_video.img_red = viewNode:getChildAutoType('group2_4/btn_video/img_red')--GImage
		self.group2_4.icon = viewNode:getChildAutoType('group2_4/icon')--GLoader
		self.group2_4.txt_flag = viewNode:getChildAutoType('group2_4/txt_flag')--GTextField
		self.group2_4.txt_name = viewNode:getChildAutoType('group2_4/txt_name')--GTextField
	self.group3_1 = viewNode:getChildAutoType('group3_1')--com_guildGroup
		self.group3_1.btn_video = viewNode:getChildAutoType('group3_1/btn_video')--btn_data
			self.group3_1.btn_video.img_red = viewNode:getChildAutoType('group3_1/btn_video/img_red')--GImage
		self.group3_1.icon = viewNode:getChildAutoType('group3_1/icon')--GLoader
		self.group3_1.txt_flag = viewNode:getChildAutoType('group3_1/txt_flag')--GTextField
		self.group3_1.txt_name = viewNode:getChildAutoType('group3_1/txt_name')--GTextField
	self.group3_2 = viewNode:getChildAutoType('group3_2')--com_guildGroup
		self.group3_2.btn_video = viewNode:getChildAutoType('group3_2/btn_video')--btn_data
			self.group3_2.btn_video.img_red = viewNode:getChildAutoType('group3_2/btn_video/img_red')--GImage
		self.group3_2.icon = viewNode:getChildAutoType('group3_2/icon')--GLoader
		self.group3_2.txt_flag = viewNode:getChildAutoType('group3_2/txt_flag')--GTextField
		self.group3_2.txt_name = viewNode:getChildAutoType('group3_2/txt_name')--GTextField
	self.group3_3 = viewNode:getChildAutoType('group3_3')--com_guildGroup
		self.group3_3.btn_video = viewNode:getChildAutoType('group3_3/btn_video')--btn_data
			self.group3_3.btn_video.img_red = viewNode:getChildAutoType('group3_3/btn_video/img_red')--GImage
		self.group3_3.icon = viewNode:getChildAutoType('group3_3/icon')--GLoader
		self.group3_3.txt_flag = viewNode:getChildAutoType('group3_3/txt_flag')--GTextField
		self.group3_3.txt_name = viewNode:getChildAutoType('group3_3/txt_name')--GTextField
	self.group3_4 = viewNode:getChildAutoType('group3_4')--com_guildGroup
		self.group3_4.btn_video = viewNode:getChildAutoType('group3_4/btn_video')--btn_data
			self.group3_4.btn_video.img_red = viewNode:getChildAutoType('group3_4/btn_video/img_red')--GImage
		self.group3_4.icon = viewNode:getChildAutoType('group3_4/icon')--GLoader
		self.group3_4.txt_flag = viewNode:getChildAutoType('group3_4/txt_flag')--GTextField
		self.group3_4.txt_name = viewNode:getChildAutoType('group3_4/txt_name')--GTextField
	self.group3_5 = viewNode:getChildAutoType('group3_5')--com_guildGroup
		self.group3_5.btn_video = viewNode:getChildAutoType('group3_5/btn_video')--btn_data
			self.group3_5.btn_video.img_red = viewNode:getChildAutoType('group3_5/btn_video/img_red')--GImage
		self.group3_5.icon = viewNode:getChildAutoType('group3_5/icon')--GLoader
		self.group3_5.txt_flag = viewNode:getChildAutoType('group3_5/txt_flag')--GTextField
		self.group3_5.txt_name = viewNode:getChildAutoType('group3_5/txt_name')--GTextField
	self.group3_6 = viewNode:getChildAutoType('group3_6')--com_guildGroup
		self.group3_6.btn_video = viewNode:getChildAutoType('group3_6/btn_video')--btn_data
			self.group3_6.btn_video.img_red = viewNode:getChildAutoType('group3_6/btn_video/img_red')--GImage
		self.group3_6.icon = viewNode:getChildAutoType('group3_6/icon')--GLoader
		self.group3_6.txt_flag = viewNode:getChildAutoType('group3_6/txt_flag')--GTextField
		self.group3_6.txt_name = viewNode:getChildAutoType('group3_6/txt_name')--GTextField
	self.group3_7 = viewNode:getChildAutoType('group3_7')--com_guildGroup
		self.group3_7.btn_video = viewNode:getChildAutoType('group3_7/btn_video')--btn_data
			self.group3_7.btn_video.img_red = viewNode:getChildAutoType('group3_7/btn_video/img_red')--GImage
		self.group3_7.icon = viewNode:getChildAutoType('group3_7/icon')--GLoader
		self.group3_7.txt_flag = viewNode:getChildAutoType('group3_7/txt_flag')--GTextField
		self.group3_7.txt_name = viewNode:getChildAutoType('group3_7/txt_name')--GTextField
	self.group3_8 = viewNode:getChildAutoType('group3_8')--com_guildGroup
		self.group3_8.btn_video = viewNode:getChildAutoType('group3_8/btn_video')--btn_data
			self.group3_8.btn_video.img_red = viewNode:getChildAutoType('group3_8/btn_video/img_red')--GImage
		self.group3_8.icon = viewNode:getChildAutoType('group3_8/icon')--GLoader
		self.group3_8.txt_flag = viewNode:getChildAutoType('group3_8/txt_flag')--GTextField
		self.group3_8.txt_name = viewNode:getChildAutoType('group3_8/txt_name')--GTextField
	self.line0_1 = viewNode:getChildAutoType('line0_1')--com_line2
		self.line0_1.spine1 = viewNode:getChildAutoType('line0_1/spine1')--GLoader
		self.line0_1.spine2 = viewNode:getChildAutoType('line0_1/spine2')--GLoader
	self.line1_1 = viewNode:getChildAutoType('line1_1')--com_line3
		self.line1_1.spine1 = viewNode:getChildAutoType('line1_1/spine1')--GLoader
		self.line1_1.spine2 = viewNode:getChildAutoType('line1_1/spine2')--GLoader
	self.line1_2 = viewNode:getChildAutoType('line1_2')--com_line3
		self.line1_2.spine1 = viewNode:getChildAutoType('line1_2/spine1')--GLoader
		self.line1_2.spine2 = viewNode:getChildAutoType('line1_2/spine2')--GLoader
	self.line2_1 = viewNode:getChildAutoType('line2_1')--com_line1
		self.line2_1.spine = viewNode:getChildAutoType('line2_1/spine')--GLoader
	self.line2_2 = viewNode:getChildAutoType('line2_2')--com_line1
		self.line2_2.spine = viewNode:getChildAutoType('line2_2/spine')--GLoader
	self.line2_3 = viewNode:getChildAutoType('line2_3')--com_line1
		self.line2_3.spine = viewNode:getChildAutoType('line2_3/spine')--GLoader
	self.line2_4 = viewNode:getChildAutoType('line2_4')--com_line1
		self.line2_4.spine = viewNode:getChildAutoType('line2_4/spine')--GLoader
	self.matchType = viewNode:getController('matchType')--Controller
	self.stage = viewNode:getChildAutoType('stage')--GLoader
	self.txt_cd = viewNode:getChildAutoType('txt_cd')--GTextField
	self.txt_stage = viewNode:getChildAutoType('txt_stage')--GTextField
	self.txt_status = viewNode:getChildAutoType('txt_status')--GTextField
	self.wing = viewNode:getChildAutoType('wing')--GLoader
	--{autoFieldsEnd}:GuildLeagueOfLegends.GLLegendsGroupView
	--Do not modify above code-------------
end

function GLLegendsGroupView:_initListener( )
	-- 左切
	self.btn_left:addClickListener(function()
		self:changeBtnChose(0);
	end)
	-- 右切
	self.btn_right:addClickListener(function()
		self:changeBtnChose(1);
	end)
	-- 晋级赛
	self.btn_match1:addClickListener(function()
		self.showGroup = self.curGroup;
		self:upPosInfo();
	end)
	-- 冠军赛
	self.btn_match2:addClickListener(function()
		local round = GuildLeagueOfLegendsModel.matchRound -- 比赛阶段
		if (round < GameDef.GuildLeagueRound.Four) then
			RollTips.show(Desc.GLOL_str11);
			self.btn_match1:setSelected(true);
			return;
		end
		self.showGroup = 0;
		self:upPosInfo();
	end)

	self.btn_guess:addClickListener(function()
		ViewManager.open("GLLegendsGuessView")
	end)

	self.btn_def:addClickListener(function()
		ViewManager.open("GLLegendsDefPreView")
	end)

	self._closeBtn:removeClickListener();
	self._closeBtn:addClickListener(function()
		ModuleUtil.openModule(ModuleId.GuildLeagueOfLegends.id, false);
		self:closeView();
	end)
	
	local guessRed = self.btn_guess:getChildAutoType("img_red")
	RedManager.register("V_GLOL_guessRed", guessRed);
end

function GLLegendsGroupView:_initUI( )
	self:_initVM()
	self:_initListener()
	self.wing:setIcon("UI/WorldChallenge/flag2.png")
	self:setBg("worldchallengeMian1.png")
	self:initSpine()
	self:GLOL_MatchInfoUpdate();
end

function GLLegendsGroupView:initSpine()
	local lineList = GuildLeagueOfLegendsModel.lineList
	for _, k in ipairs(lineList) do
		local line = self["line"..k];
		self.spineMap[k] = {}
		if (k == "0_1") then
			for i = 1, 2 do
				local spine = line["spine"..i];
				local animation = SpineUtil.createSpineObj(spine,{x = 0, y = 0},"ui_lianxian2_1_loop2","Spine/ui/GuildLeague","efx_sijieleitaisai","efx_sijieleitaisai",true)
				table.insert(self.spineMap[k], animation);
			end

		elseif k == "1_1" or k == "1_2" then
			for i = 1, 2 do
				local spine = line["spine"..i];
				local animation = SpineUtil.createSpineObj(spine,{x = 0, y = 0},"ui_lianxian4_1_loop","Spine/ui/GuildLeague","efx_sijieleitaisai","efx_sijieleitaisai",true)
				table.insert(self.spineMap[k], animation);
			end
		else
			local spine = line.spine;
			local animation = SpineUtil.createSpineObj(spine,{x = 0, y = 0},"ui_lianxian8_1_loop","Spine/ui/GuildLeague","efx_sijieleitaisai","efx_sijieleitaisai",true)
			table.insert(self.spineMap[k], animation);
		end
		self:showLineSpine(k, false)
	end
end

function GLLegendsGroupView:showLineSpine(key, boolean)
	if (self.spineMap[key]) then
		for _, anim in ipairs(self.spineMap[key]) do
			anim:setVisible(boolean);
		end
	end
end

function GLLegendsGroupView:GLOL_MatchInfoUpdate()
	local round = GuildLeagueOfLegendsModel.matchRound -- 比赛阶段
	if (round >= GameDef.GuildLeagueRound.Four) then
		self.showGroup = 0;
		self.btn_match2:setGrayed(false);
		self.btn_match2:setSelected(true);
	else
		local guessInfo = GuildLeagueOfLegendsModel.guessInfo;
		if (guessInfo and next(guessInfo)) then
			local key = GuildLeagueOfLegendsModel:getPosKey(round, guessInfo.battleIndex, 1);
			local group = tonumber(string.split(key, "_")[1]);
			self.showGroup = group;
			self.curGroup = group;
			self.btn_match1:setSelected(true);
			self.groupIndexMap = false;
		end
		self.btn_match2:setGrayed(true);
	end
	self:showBtnChose()
	self:changeBtnStatus();
end

function GLLegendsGroupView:changeBtnStatus()
	local defShow = GuildLeagueOfLegendsModel.isInMatch and GuildLeagueOfLegendsModel.matchRound ~= GameDef.GuildLeagueRound.Seven and GuildLeagueOfLegendsModel.roundState == GameDef.GuildLeagueState.Pre
	self.btn_def:setVisible(defShow);

	local guessShow = GuildLeagueOfLegendsModel.guessState ~= 0 and GuildLeagueOfLegendsModel.matchRound ~= GameDef.GuildLeagueRound.Seven
	self.btn_guess:setVisible(guessShow);
end


-- 更新位置信息
function GLLegendsGroupView:upPosInfo()
	local posList = GuildLeagueOfLegendsModel.posList;
	for _, k in pairs(posList) do
		local item = self["group"..k];
		local info = GuildLeagueOfLegendsModel:getPosInfo(self.showGroup, k);
		local c1 = item:getController("c1");
		local c2 = item:getController("c2");
		local c3 = item:getController("c3");
		item.btn_video:removeClickListener()
		item:removeClickListener();
		if (info) then
			c1:setSelectedIndex(1);
			c2:setSelectedIndex(0);
			if (info.index ~= 3) then
				c3:setSelectedIndex(1);
			end
			local guildId = info.guildId;
			local guildInfo = GuildLeagueOfLegendsModel.guildMap[guildId] or false
			if (guildInfo) then
				item.icon:setIcon(GuildModel:getGuildHead(guildInfo.guildIcon));
				item.txt_name:setText(string.format("[S.%s]%s", guildInfo.serverId, guildInfo.guildName));
				if (GuildLeagueOfLegendsModel:isOutMatch(self.showGroup.."_"..k)) then
					c2:setSelectedIndex(1);
				end
				item:addClickListener(function()
					ViewManager.open("GLOLGuildInfoView", {data = guildInfo})
				end)
			end
			item.btn_video:addClickListener(function(context)
				context:stopPropagation();
				local round = info.round - 1;
				local battleIndex = info.side == 1 and 2 * info.battleIndex - 1 or 2 * info.battleIndex
				if (info.round == GameDef.GuildLeagueRound.Four) then
					battleIndex = info.battleIndex
				end
				local battleInfo = GuildLeagueOfLegendsModel.groupInfo[round][battleIndex];
				ViewManager.open("GLLegendsBattleResultView", {round = round, battleInfo = battleInfo});
			end)
		else
			c1:setSelectedIndex(0);
			local str = GuildLeagueOfLegendsModel:getPosEmptyTitle(self.showGroup.."_"..k);
			item.txt_flag:setText(str);
		end
	end
	self:upMatchInfo();
	self:upLineInfo();
end

function GLLegendsGroupView:upLineInfo()
	local lineList = GuildLeagueOfLegendsModel.lineList
	local keyMap = {
		["0_1"] = 51,
		["1_1"] = 51,
		["1_2"] = 51,
		["2_1"] = 54,
		["2_2"] = 54,
		["2_3"] = 54,
		["2_4"] = 54
	}
	for _, k in pairs(lineList) do
		local item = self["line"..k];
		local status, showSpine = GuildLeagueOfLegendsModel:getLineStatus(k, self.showGroup);
		item:setMax(100);
		local index = tonumber(string.split(k, "_")[1])
		local img = item:getChildAutoType("bar") or item:getChildAutoType("bar_v");
		if (status == 0) then
			item:setValue(0);
		elseif status == 1 then
			if (item:getScaleY() == -1) then
				img:setFillOrigin(1)
				if (index == 2) then
					keyMap[k] = 50
				end
			else
				img:setFillOrigin(0)
				if (index == 2) then
					keyMap[k] = 54
				end
			end
			item:setValue(keyMap[k]);
		elseif status == 2 then
			if (item:getScaleY() == -1) then
				img:setFillOrigin(0)
				if (index == 2) then
					keyMap[k] = 54
				end
			else
				img:setFillOrigin(1)
				if (index == 2) then
					keyMap[k] = 50
				end
			end
			item:setValue(keyMap[k]);
		end
		self:showLineSpine(k, showSpine)
	end
end

-- 更新阶段信息
function GLLegendsGroupView:upMatchInfo()
	local matchRound = GuildLeagueOfLegendsModel.matchRound; -- 1、64强  2、32强  3、16强  4、8强
	local roundState = GuildLeagueOfLegendsModel.roundState; -- 1、准备阶段  2、战斗阶段  3、结算阶段
	self.txt_stage:setText("testLog:"..(Desc["GLOL_round"..matchRound] or ""))
	if (matchRound) then
		local map = {32, 16, 8, 4, 2, 1, 1}
		self.stage:setIcon(string.format("UI/WorldChallenge/worldchallengeyisuzi%s.png", map[matchRound]))
	else
		self.stage:setIcon("")
	end
	if (matchRound == GameDef.GuildLeagueRound.Seven) then
		self:stopCD();
		self.txt_cd:setText(Desc.GLOL_status4);
		self.txt_status:setText("");
	elseif (self.showGroup ~= 0 and matchRound > GameDef.GuildLeagueRound.Three) then
		self:stopCD();
		self.txt_cd:setText(Desc.GLOL_status5);
		self.txt_status:setText("");
	else
		local stamp = GuildLeagueOfLegendsModel.stateStamp or 0;
		local time = math.ceil((stamp - ServerTimeModel:getServerTimeMS()) / 1000);
		if (time > 0) then
			self:starCD(time);
			self.txt_status:setText(Desc["GLOL_status"..roundState]);
		else
			self:stopCD();
			self.txt_cd:setText(Desc.GLOL_status6)
			self.txt_status:setText("");
		end
	end
end

-- 底部分组
function GLLegendsGroupView:changeBtnChose(type)
	local flag = type == 0 and -1 or 1
	local curSelected = self:limitBtnNum(self.curGroup + flag)
	self.curGroup = curSelected
	if (not TableUtil.Exist(self.groupIndexMap, curSelected)) then
		local next1 = self:limitBtnNum(curSelected - flag)
		local next2 = self:limitBtnNum(curSelected - 2 * flag)
		if (type == 0) then
			self.groupIndexMap = {curSelected, next1, next2}
		else
			self.groupIndexMap = {next2, next1, curSelected}
		end
	end
	self.showGroup = self.curGroup;
	self:showBtnChose();
end

function GLLegendsGroupView:limitBtnNum(num)
    local result = (num + 8) % 8
    return result == 0 and 8 or result
end

function GLLegendsGroupView:showBtnChose()
	if (not self.groupIndexMap) then
		local next1 = self:limitBtnNum(self.curGroup - 1)
        local next2 = self:limitBtnNum(self.curGroup + 1)
        self.groupIndexMap = {next1, self.curGroup, next2}
	end
	for i = 1, 3 do
		local btn = self["btn_choose"..i];
		local index = self.groupIndexMap[i]
		btn:setTitle(string.format(Desc.WorldChallenge_str8, index));
		-- local showGroup = self.showGroup == 0 and self.curGroup or self.showGroup;
		btn:setSelected(index == self.curGroup)
		local c1 = btn:getController("c1");
		if (index == GuildLeagueOfLegendsModel.guessGroup) then
			c1:setSelectedIndex(1);
		else
			c1:setSelectedIndex(0);
		end
		btn:removeClickListener();
		btn:addClickListener(function()
			self.showGroup = index;
			self.curGroup = index;
			self:showBtnChose();
		end)
	end
	self:upPosInfo()
end

function GLLegendsGroupView:stopCD()
	if (self.actCD) then
		TimeLib.clearCountDown(self.actCD);
		self.actCD = false;
	end
end

function GLLegendsGroupView:starCD(time)
	if (not time) then
		return;
	end
	self:stopCD();
	local fmat = function(t)
		if (t > 86400) then
			return TimeLib.GetTimeFormatDay(t);
		else
		return TimeLib.formatTime(t, true);
		end
	end
	local onCD = function(t)
		self.txt_cd:setText(fmat(t));
	end
	local onEnd = function()
		GuildLeagueModel:requestBaseInfo();
	end
	self.actCD = TimeLib.newCountDown(time, onCD, onEnd, false, false, false);
	self.txt_cd:setText(fmat(time));
end

function GLLegendsGroupView:_exit()
	self:stopCD();
end

return GLLegendsGroupView