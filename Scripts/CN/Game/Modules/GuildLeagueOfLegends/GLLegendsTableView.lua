--Date :2021-01-06
--Author : generated by FairyGUI
--Desc : 

local GLLegendsTableView,Super = class("GLLegendsTableView", Window)

function GLLegendsTableView:ctor()
	--LuaLog("GLLegendsTableView ctor")
	self._packName = "GuildLeagueOfLegends"
	self._compName = "GLLegendsTableView"
	--self._rootDepth = LayerDepth.PopWindow
	self.curFlagPos = 1;
	self.moveCount = 0;
	self.scheduleHandle = false;
	self.normalAnimHandle = false;
	self.showMoneyType = {
		{type = GameDef.ItemType.Money, code = GameDef.MoneyType.GuildLeagueCoin},
		{type = GameDef.GameResType.Item, code = 10000120},
		} --显示的货币类型，从左到右排列
end

function GLLegendsTableView:_initEvent( )
	
end

function GLLegendsTableView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:GuildLeagueOfLegends.GLLegendsTableView
	self.btn_1 = viewNode:getChildAutoType('btn_1')--com_btn_Lv0Blue_cost
		self.btn_1.cost_2 = viewNode:getChildAutoType('btn_1/cost')--GTextField
		self.btn_1.img_red = viewNode:getChildAutoType('btn_1/img_red')--GImage
	self.btn_2 = viewNode:getChildAutoType('btn_2')--com_btn_Lv0Yellow_cost
		self.btn_2.cost_2 = viewNode:getChildAutoType('btn_2/cost')--GTextField
		self.btn_2.img_red = viewNode:getChildAutoType('btn_2/img_red')--GImage
	self.btn_checkBox = viewNode:getChildAutoType('btn_checkBox')--GButton
	self.btn_mark = viewNode:getChildAutoType('btn_mark')--GButton
	self.btn_tips = viewNode:getChildAutoType('btn_tips')--GButton
	self.c1 = viewNode:getController('c1')--Controller
	self.cell1 = viewNode:getChildAutoType('cell1')--GButton
	self.cell2 = viewNode:getChildAutoType('cell2')--GButton
	self.cell3 = viewNode:getChildAutoType('cell3')--GButton
	self.cell4 = viewNode:getChildAutoType('cell4')--GButton
	self.cell5 = viewNode:getChildAutoType('cell5')--GButton
	self.cell6 = viewNode:getChildAutoType('cell6')--GButton
	self.cell7 = viewNode:getChildAutoType('cell7')--GButton
	self.cell8 = viewNode:getChildAutoType('cell8')--GButton
	self.frame = viewNode:getChildAutoType('frame')--GLabel
	self.list_lucky = viewNode:getChildAutoType('list_lucky')--GList
	self.list_rate = viewNode:getChildAutoType('list_rate')--GList
	self.tBg1 = viewNode:getChildAutoType('tBg1')--GImage
	self.tBg2 = viewNode:getChildAutoType('tBg2')--GImage
	self.tBg3 = viewNode:getChildAutoType('tBg3')--GImage
	self.tBg4 = viewNode:getChildAutoType('tBg4')--GImage
	self.tBg5 = viewNode:getChildAutoType('tBg5')--GImage
	self.tBg6 = viewNode:getChildAutoType('tBg6')--GImage
	self.tBg7 = viewNode:getChildAutoType('tBg7')--GImage
	self.tBg8 = viewNode:getChildAutoType('tBg8')--GImage
	self.tLight = viewNode:getChildAutoType('tLight')--GImage
	self.txt_center = viewNode:getChildAutoType('txt_center')--GRichTextField
	--{autoFieldsEnd}:GuildLeagueOfLegends.GLLegendsTableView
	--Do not modify above code-------------
end

function GLLegendsTableView:_initListener( )
	local cost = DynamicConfigData.t_GLConst[1].legendLuckDraw[1];
	self.btn_1:setData(cost);
	local cost2 = clone(cost);
	cost2.amount = 10;
	self.btn_2:setData(cost2);

	self.btn_1:addClickListener(function()
		if (PlayerModel:checkCostEnough(cost, true)) then
			GuildLeagueOfLegendsModel:lottory(1)
		end
	end)

	self.btn_2:addClickListener(function()
		if (PlayerModel:checkCostEnough(cost2, true)) then
			GuildLeagueOfLegendsModel:lottory(2)
		end
	end)

	self.btn_checkBox:addClickListener(function()
		local value = self.btn_checkBox:isSelected()
		FileCacheManager.setBoolForKey("GLLegendsTableView_check", value)
	end)

	self.btn_mark:addClickListener(function()
		RollTips.show(Desc.turnTable_isLotterying);
	end)

	self.list_lucky:setVirtual();

	local flag = FileCacheManager.getBoolForKey("GLLegendsTableView_check", false)
	self.btn_checkBox:setSelected(flag);
	self:setBg("guildTable.jpg");
	self.txt_center:setText(Desc.GLOL_tableCenter)
end

function GLLegendsTableView:_initUI( )
	self:_initVM()
	self.btn_1 = BindManager.bindCostButton(self.btn_1);
	self.btn_2 = BindManager.bindCostButton(self.btn_2);
	self:_initListener()
	self:showTable();
	GuildLeagueOfLegendsModel:getLuckList()
	self.normalAnimHandle = self:normalAnim()
end

function GLLegendsTableView:showTable()
	local conf = DynamicConfigData.t_GLLuckDraw;
	local rateList = {};
	for i = 1, 8 do
		local a = conf[i]
		local c = a.reward[1];
		local cell = self["cell"..i];
		if (not cell.cell) then
			cell.cell = BindManager.bindItemCell(cell)
			cell.cell:setIsMid(true)
		end
		cell.cell:setData(c.code, c.amount, c.type);
		local info = {
			code = c.type == 2 and c.code + 2000 or c.code,
			rate = a.weight
		}
		table.insert(rateList, info)
	end
	self:initDrawRate(rateList);
end

function GLLegendsTableView:initDrawRate(data)
	self.list_rate:setItemRenderer(function(idx, obj)
		local d = data[idx + 1];
		local conf = DynamicConfigData.t_item;
		local c = conf[d.code];
		local txt1 = obj:getChildAutoType("txt1");
		local txt2 = obj:getChildAutoType("txt2");
		txt1:setText(c.name);
		txt2:setText((d.rate / 100).."%");
	end)
	self.list_rate:setNumItems(#data)
end

function GLLegendsTableView:GuildLeagueOfLegendsModel_DrawSuc(_, rewardIndexList, luckList)
	self:playAnim(rewardIndexList, luckList)
end


function GLLegendsTableView:playAnim(indexList, luckList)
	-- body
	local showReward = function()
		self.btn_mark:setVisible(false);
		local conf = DynamicConfigData.t_GLLuckDraw
        local reward = {}
        for _, idx in pairs(indexList) do
            local c = conf[idx].reward;
            table.insert(reward, c[1])
        end
        local data = {
			show = 1,
			reward = reward
		}
		ViewManager.open("AwardShowView",data);
		self:upLuckList(luckList)
	end

	if (self.btn_checkBox:isSelected()) then
		showReward();
	else
		if (self.normalAnimHandle) then
			Scheduler.unschedule(self.normalAnimHandle);
			self.normalAnimHandle = false;
		end
		self.btn_mark:setVisible(true);
		self.moveCount = 16 - self.curFlagPos + indexList[1];
		local midCount = self.moveCount / 2 + 3
		local timeTotal = 0;
		local moveAnim = function(dt)
			if (tolua.isnull(self.view)) then
				self:stopAnim()
				return;
			end
			local a = math.pow(self.moveCount - midCount, 2) * 0.0015 + 0.015
			timeTotal = timeTotal + dt
			if (timeTotal >= a) then
				timeTotal = 0;
				self.moveCount = self.moveCount - 1;
				self.curFlagPos  = self.curFlagPos + 1;
				if (self.curFlagPos > 8) then
					self.curFlagPos = 1;
				end
				local child = self["tBg"..self.curFlagPos];
				self.tLight:setPosition(child:getX(), child:getY());
				if (self.moveCount == 0) then
					self:stopAnim();
					local sequence = cc.Sequence:create(cc.FadeOut:create(0.1), cc.FadeIn:create(0.1))
					local cb = cc.CallFunc:create(showReward);
					self.tLight:displayObject():runAction(cc.Sequence:create(cc.Repeat:create(sequence, 3), cb));
				end
			end
		end
		self.scheduleHandle = Scheduler.schedule(moveAnim, 0, 100000)
	end
end

function GLLegendsTableView:stopAnim()
	if (self.scheduleHandle) then
		Scheduler.unschedule(self.scheduleHandle)
		self.scheduleHandle = false;
	end
end

function GLLegendsTableView:GuildLeagueOfLegendsModel_luckList(_, list)
	self:upLuckList(list)
end

function GLLegendsTableView:upLuckList(luckList)
	local list = {}
	luckList = luckList or {};
	for _, d in pairs(luckList) do
		if d.type == 2 then
			d.code = d.code + 2000
		end
		table.insert(list, d);
	end
	table.sort(list, function(a, b)
		return a.index > b.index
	end)
	self.list_lucky:setItemRenderer(function(idx, obj)
		local d = list[idx + 1];
		local conf = DynamicConfigData.t_item[d.code];
		local itemName = conf.name;
		local itemColor = ColorUtil.chatIemColorStr[conf.color];
		local str = string.format(Desc.GLOL_luckStr, d.name, itemColor, itemName, d.amount);
		obj:setTitle(str);
	end)
	self.list_lucky:setNumItems(#list)
end

function GLLegendsTableView:normalAnim()
	self.curFlagPos = 1;
	local dtCount = 0
	local moveAnim = function(dt)
		dtCount = dtCount + dt;
		if (dtCount >= 0.3) then
			self.curFlagPos  = self.curFlagPos + 1;
			if (self.curFlagPos > 8) then
				self.curFlagPos = 1;
			end
			local child = self["tBg"..self.curFlagPos];
			self.tLight:setPosition(child:getX(), child:getY());
			dtCount = dtCount - 1
		end
	end
	return Scheduler.schedule(moveAnim, 0.2, 0)
end

function GLLegendsTableView:_exit()
	if (self.normalAnimHandle) then
		Scheduler.unschedule(self.normalAnimHandle);
		self.normalAnimHandle = false;
	end
	self:stopAnim()
end

return GLLegendsTableView