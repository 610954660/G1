--Date :2020-12-31
--Author : generated by FairyGUI
--Desc : 

local GLLegendsBattleResultView,Super = class("GLLegendsBattleResultView", Window)

function GLLegendsBattleResultView:ctor()
	--LuaLog("GLLegendsBattleResultView ctor")
	self._packName = "GuildLeagueOfLegends"
	self._compName = "GLLegendsBattleResultView"
	self._rootDepth = LayerDepth.PopWindow
	self.battleInfo = self._args.battleInfo;
	self.battleData = {};
end

function GLLegendsBattleResultView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:GuildLeagueOfLegends.GLLegendsBattleResultView
	self.blackbg = viewNode:getChildAutoType('blackbg')--GLabel
	self.c1 = viewNode:getController('c1')--Controller
	self.list_item = viewNode:getChildAutoType('list_item')--GList
	self.txt_guildName1 = viewNode:getChildAutoType('txt_guildName1')--GTextField
	self.txt_guildName2 = viewNode:getChildAutoType('txt_guildName2')--GTextField
	self.txt_score = viewNode:getChildAutoType('txt_score')--GTextField
	self.txt_team1 = viewNode:getChildAutoType('txt_team1')--GTextField
	self.txt_team2 = viewNode:getChildAutoType('txt_team2')--GTextField
	--{autoFieldsEnd}:GuildLeagueOfLegends.GLLegendsBattleResultView
	--Do not modify above code-------------
end

function GLLegendsBattleResultView:_initUI( )
	self:_initVM()
	-- self:_initListener()
	local posInfo = self.battleInfo.battlePosInfo;
	for i = 1, 2 do
		local info = posInfo[i];
		local guildId = info.guildId;
		local guildInfo = GuildLeagueOfLegendsModel.guildMap[guildId] or false;
		if (guildInfo) then
			local name = guildInfo.guildName;
			local serverId = guildInfo.serverId;
			local txt = self["txt_guildName"..i];
			txt:setText(string.format("[S.%s]%s", serverId, name));
			local txt_team = self["txt_team"..i];
			txt_team:setText(string.format(Desc.GLOL_str7, info.teamCount - info.teamLose))
		end
		GuildLeagueOfLegendsModel:getBattleData(guildId, self._args.round);
	end
	
end

function GLLegendsBattleResultView:GLOL_guildBattleData(_, guildId, videoList)
	local posInfo = self.battleInfo.battlePosInfo;
	for i = 1, 2 do
		local id = posInfo[i].guildId;
		if (id == guildId) then
			self.battleData[i] = videoList;
		end
	end
	if (TableUtil.GetTableLen(self.battleData) == #posInfo) then
		local arr = {};
		local len = self.battleData[1] and #self.battleData[1] or 0;
		local winCount = 0
		for i = 1, len do
			local info_1 = self.battleData[1][i]
			local info_2 = self.battleData[2][i]
			local info = {
				idx = info_1.index,
				recordId = info_1.recordId,
				isWin = info_1.isWin,
				player1 = info_1,
				player2 = info_2
			}
			if (info.isWin) then
				winCount = winCount + 1;
			end
			table.insert(arr, info)
		end
		local other = len - winCount
		self.txt_score:setText(string.format("%s:%s", winCount, other));
		self.c1:setSelectedIndex(self.battleInfo.winSide == 1 and 0 or 1);
		self:upBattleList(arr);
	end
end

function GLLegendsBattleResultView:upBattleList(battleList)
	self.list_item:setItemRenderer(function(idx, obj)
		local data = battleList[idx + 1];
		local c1 = obj:getController("c1");
		c1:setSelectedIndex(data.isWin and 0 or 1);
		local btn = obj:getChildAutoType("btn_check");
		for i = 1, 2 do
			local playerInfo = data["player"..i]
			local txt_teamIdx = obj:getChildAutoType("txt_teamIdx"..i);
			if (not obj["cell"..i]) then
				local heroCell = obj:getChildAutoType("heroCell"..i);
				obj["cell"..i] = BindManager.bindPlayerCell(heroCell);
			end
			local playerCell = obj["cell"..i];
			local txt_name = obj:getChildAutoType("txt_name"..i);
			local txt_combat = obj:getChildAutoType("txt_combat"..i);
			txt_teamIdx:setText(playerInfo.teamIndex);
			playerCell:setHead(playerInfo.head, playerInfo.level, nil, nil, playerInfo.headBorder);
			txt_name:setText(playerInfo.name);
			txt_combat:setText(StringUtil.transValue(playerInfo.combat));
		end
		btn:removeClickListener()
		btn:addClickListener(function()
			if (data.recordId) then
				BattleModel:requestBattleRecord(data.recordId)
			end
		end)
	end)
	self.list_item:setNumItems(#battleList);
end


return GLLegendsBattleResultView