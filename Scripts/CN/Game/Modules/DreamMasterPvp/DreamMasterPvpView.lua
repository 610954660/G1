--Date :2020-11-23
--Author : generated by FairyGUI
--Desc : 

local DreamMasterPvpView,Super = class("DreamMasterPvpView", Window)

function DreamMasterPvpView:ctor()
	--LuaLog("DreamMasterPvpView ctor")
	self._packName = "DreamMasterPvp"
	self._compName = "DreamMasterPvpView"
	self._rootDepth = LayerDepth.Window
	self.curIssue = 1
	self.skeletonNode={}
	self.first = true
	self._args.moduleId = 202
	self.calltimer = false
end

function DreamMasterPvpView:_initEvent( )
	self.btn_reward:addClickListener(function()
		ViewManager.open("DreamMasterPvpRewardView")
	end,33)
	
	self.btn_jingjichang:addClickListener(function()
		ModuleUtil.openModule(ModuleId.Arena)
	end,33)
	
	self.btn_go:addClickListener(function()
			--ModuleUtil.openModule(ModuleId.DreamMasterPvpMain)
			
			ViewManager.open("DreamMasterPvpMainView")
		end,33)
	self.btn_go:setGrayed(true)
	self.btn_go:setTouchable(false)

	self.btn_1:addClickListener(function()
		self:clickFunc(1)
	end,33)

	self.btn_2:addClickListener(function()
		self:clickFunc(2)
	end,33)

	self.btn_3:addClickListener(function()
		self:clickFunc(3)
	end,33)

	self.btn_4:addClickListener(function()
		self:clickFunc(4)
	end,33)
	
end

function DreamMasterPvpView:clickFunc( id )
	if self.curIssue == id then return end
	
	if DreamMasterPvpModel.status < 3 and id == 2 then
		RollTips.show(Desc.DreamMasterPvp_OneGoing)
		self["btn_"..id]:setSelected(false)
		return
	elseif DreamMasterPvpModel.status < 5 and id == 3 then
		RollTips.show(Desc.DreamMasterPvp_TwoGoing)
		self["btn_"..id]:setSelected(false)
		return
	elseif DreamMasterPvpModel.status < 7 and id == 4 then
		RollTips.show(Desc.DreamMasterPvp_ThreeGoing)
		self["btn_"..id]:setSelected(false)
		return
	end

	self.curIssue = id
	
	for i=1,4 do
		if self.curIssue ~= i then
			self["btn_"..i]:setSelected(false)
		end
	end

	

	DreamMasterPvpModel:getPlayersInfo(self.curIssue)
	local configInfo=DynamicConfigData.t_DreamMasterPvpConst[1];
	self.list_reward:setNumItems(#configInfo["preReward"..self.curIssue]);

end

function DreamMasterPvpView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:DreamMasterPvp.DreamMasterPvpView
	self.btn_jingjichang = viewNode:getChildAutoType('$btn_jingjichang')--GButton
	self.btn_reward = viewNode:getChildAutoType('$btn_reward')--GButton
	self.heroCell1 = viewNode:getChildAutoType('$heroCell1')--Component10
		self.heroCell1.com_mode = viewNode:getChildAutoType('$heroCell1/com_mode')--GLoader
		self.heroCell1.txt_level = viewNode:getChildAutoType('$heroCell1/txt_level')--GTextField
		self.heroCell1.txt_name = viewNode:getChildAutoType('$heroCell1/txt_name')--GTextField
	self.heroCell2 = viewNode:getChildAutoType('$heroCell2')--Component10
		self.heroCell2.com_mode = viewNode:getChildAutoType('$heroCell2/com_mode')--GLoader
		self.heroCell2.txt_level = viewNode:getChildAutoType('$heroCell2/txt_level')--GTextField
		self.heroCell2.txt_name = viewNode:getChildAutoType('$heroCell2/txt_name')--GTextField
	self.heroCell3 = viewNode:getChildAutoType('$heroCell3')--Component10
		self.heroCell3.com_mode = viewNode:getChildAutoType('$heroCell3/com_mode')--GLoader
		self.heroCell3.txt_level = viewNode:getChildAutoType('$heroCell3/txt_level')--GTextField
		self.heroCell3.txt_name = viewNode:getChildAutoType('$heroCell3/txt_name')--GTextField
	self.heroCell4 = viewNode:getChildAutoType('$heroCell4')--Component10
		self.heroCell4.com_mode = viewNode:getChildAutoType('$heroCell4/com_mode')--GLoader
		self.heroCell4.txt_level = viewNode:getChildAutoType('$heroCell4/txt_level')--GTextField
		self.heroCell4.txt_name = viewNode:getChildAutoType('$heroCell4/txt_name')--GTextField
	self.heroCell5 = viewNode:getChildAutoType('$heroCell5')--Component10
		self.heroCell5.com_mode = viewNode:getChildAutoType('$heroCell5/com_mode')--GLoader
		self.heroCell5.txt_level = viewNode:getChildAutoType('$heroCell5/txt_level')--GTextField
		self.heroCell5.txt_name = viewNode:getChildAutoType('$heroCell5/txt_name')--GTextField
	self.heroCell6 = viewNode:getChildAutoType('$heroCell6')--Component10
		self.heroCell6.com_mode = viewNode:getChildAutoType('$heroCell6/com_mode')--GLoader
		self.heroCell6.txt_level = viewNode:getChildAutoType('$heroCell6/txt_level')--GTextField
		self.heroCell6.txt_name = viewNode:getChildAutoType('$heroCell6/txt_name')--GTextField
	self.heroCell7 = viewNode:getChildAutoType('$heroCell7')--Component10
		self.heroCell7.com_mode = viewNode:getChildAutoType('$heroCell7/com_mode')--GLoader
		self.heroCell7.txt_level = viewNode:getChildAutoType('$heroCell7/txt_level')--GTextField
		self.heroCell7.txt_name = viewNode:getChildAutoType('$heroCell7/txt_name')--GTextField
	self.heroCell8 = viewNode:getChildAutoType('$heroCell8')--Component10
		self.heroCell8.com_mode = viewNode:getChildAutoType('$heroCell8/com_mode')--GLoader
		self.heroCell8.txt_level = viewNode:getChildAutoType('$heroCell8/txt_level')--GTextField
		self.heroCell8.txt_name = viewNode:getChildAutoType('$heroCell8/txt_name')--GTextField
	self.arrowCtrl = viewNode:getController('arrowCtrl')--Controller
	self.btn_1 = viewNode:getChildAutoType('btn_1')--actbutton1
	self.btn_2 = viewNode:getChildAutoType('btn_2')--actbutton2
		self.btn_2.desc = viewNode:getChildAutoType('btn_2/desc')--GTextField
	self.btn_3 = viewNode:getChildAutoType('btn_3')--actbutton2
		self.btn_3.desc = viewNode:getChildAutoType('btn_3/desc')--GTextField
	self.btn_4 = viewNode:getChildAutoType('btn_4')--actbutton2
		self.btn_4.desc = viewNode:getChildAutoType('btn_4/desc')--GTextField
	self.btn_go = viewNode:getChildAutoType('btn_go')--GButton
	self.frame = viewNode:getChildAutoType('frame')--GLabel
	self.list_reward = viewNode:getChildAutoType('list_reward')--GList
	self.mengzhu = viewNode:getChildAutoType('mengzhu')--GImage
	self.tiemless = viewNode:getChildAutoType('tiemless')--GTextField
	--{autoFieldsEnd}:DreamMasterPvp.DreamMasterPvpView
	--Do not modify above code-------------
end

function DreamMasterPvpView:_initUI( )
	self:_initVM()
	DreamMasterPvpModel:getPlayersInfo()
	local configInfo=DynamicConfigData.t_DreamMasterPvpConst[1];

	self.list_reward:setItemRenderer(function(indexItem,objItem)
			local itemcell = BindManager.bindItemCell(objItem)
			local award = configInfo["preReward"..self.curIssue][indexItem+1]
			itemcell:setData(award.code, award.amount, award.type)
			itemcell:setFrameVisible(false)
			objItem:removeClickListener(100)
			objItem:addClickListener(function( ... )
					itemcell:onClickCell()
				end,100)
		end)
	
	self:setBg("dreammaster_bg.png")
	self:dreamMaster_updateButton()
	 if self.first then
		self.first = false
		DreamMasterPvpModel:setDayFirstRed()
		DreamMasterPvpModel:checkRed()
		if DreamMasterPvpModel.status == GameDef.DreamMasterPvpActivityStatus.GoingOne  or DreamMasterPvpModel.status ==  GameDef.DreamMasterPvpActivityStatus.GoingTwo or 
		   DreamMasterPvpModel.status == GameDef.DreamMasterPvpActivityStatus.GoingThree  or DreamMasterPvpModel.status ==  GameDef.DreamMasterPvpActivityStatus.GoingFour then
			ViewManager.open("DreamMasterPvpMainView")
		end
	 end
end

function DreamMasterPvpView:dreamMaster_updateButton()
	--DreamMasterPvpModel.status = 4
--	if self.first then
		if DreamMasterPvpModel.status < 3 then
			self.btn_1:setSelected(true)
			self.btn_2:setSelected(false)
			self.btn_3:setSelected(false)
			self.btn_4:setSelected(false)
			self.curIssue = 1
		elseif DreamMasterPvpModel.status < 5 then
			self.btn_1:setSelected(false)
			self.btn_2:setSelected(true)
			self.btn_3:setSelected(false)
			self.btn_4:setSelected(false)
			self.curIssue = 2
		elseif DreamMasterPvpModel.status < 7 then
			self.btn_1:setSelected(false)
			self.btn_2:setSelected(false)
			self.btn_3:setSelected(true)
			self.btn_4:setSelected(false)
			self.curIssue = 3
		else
			self.btn_2:setSelected(false)
			self.btn_1:setSelected(false)
			self.btn_3:setSelected(false)
			self.btn_4:setSelected(true)
			self.curIssue = 4
		end
--	end

	local buttonStatus = {{1,3,3,3},{0,3,3,3},{2,1,3,3},{2,0,3,3},{2,2,1,3},{2,2,0,3},{2,2,2,1},{2,2,2,0},{2,2,2,2}}
	self.btn_1:getController("c1"):setSelectedIndex(buttonStatus[DreamMasterPvpModel.status][1])
	self.btn_2:getController("c1"):setSelectedIndex(buttonStatus[DreamMasterPvpModel.status][2])
	self.btn_3:getController("c1"):setSelectedIndex(buttonStatus[DreamMasterPvpModel.status][3])
	self.btn_4:getController("c1"):setSelectedIndex(buttonStatus[DreamMasterPvpModel.status][4])
	self:showCountDown()
	local configInfo=DynamicConfigData.t_DreamMasterPvpConst[1];
	self.list_reward:setNumItems(#configInfo["preReward"..self.curIssue]);
end

function DreamMasterPvpView:dreamMaster_updateView()
	--self:dreamMaster_updateButton()
	self:showCountDown()
	self.mengzhu:setVisible(true)
	local playerMap = {}
	for i=1,8 do
		local key = "0_"..DreamMasterPvpModel.ItemPos[i]
		local player = DreamMasterPvpModel.WorldChallenInfo[key]
		if not player then break end
		table.insert(playerMap,player)
	end

	
	TableUtil.sortByMap(playerMap, {{key="pVPIndex",asc=true},{key="playerId",asc=true}} )	
	--printTable(33,"dreamMaster_updateView",playerMap)
	for i = 1, 8, 1 do
		local item=self.view:getChild("$heroCell"..i)
		local c1=item:getController("c1")
		local c2=item:getController("c2")
	 	local txt_name=item:getChildAutoType("txt_name")--
		local txt_level=item:getChildAutoType("txt_level")
		local com_mode=item:getChildAutoType("com_mode")
		local info= playerMap[i]
		if DreamMasterPvpModel.pVPIndex ==  GameDef.DreamPvpIndex.Seven and info then
			c1:setSelectedIndex(1)
			if info.pVPIndex==7 then
				c2:setSelectedIndex(0)
			elseif info.pVPIndex==6 then
				c2:setSelectedIndex(1)
			elseif info.pVPIndex==5 then
				c2:setSelectedIndex(2)
			else
				c2:setSelectedIndex(3)
			end
			txt_name:setText(info.name)
			txt_level:setText(Desc.itemtips_attrNameLv..info.level)
			local configItem=DynamicConfigData.t_hero[info.head]
			if not configItem then
				return
			end
			local  modeId= configItem.model	
			local skeletonNode = SpineMnange.createSprineById(modeId)
			if not skeletonNode then
				return
			end
			com_mode:displayObject():addChild(skeletonNode)
			skeletonNode:setAnimation(0, "stand", true)
			if self.skeletonNode[i] then
				self.skeletonNode[i]:removeFromParent()
			end
			self.skeletonNode[i] = skeletonNode
			self.mengzhu:setVisible(false)
		else
			c1:setSelectedIndex(0)
		end
	end
end



function DreamMasterPvpView:showCountDown()
	if self.calltimer then
		TimeLib.clearCountDown(self.calltimer)
		self.calltimer = false
	end

	local txt_countdown = self.tiemless
	local model = DreamMasterPvpModel:getModelByType(self.mode)
	local stage = DreamMasterPvpModel.status
	local actState = DreamMasterPvpModel.pVPIndex
	printTable(33, "打印的倒计时.........1", stage, actState)
	if stage == GameDef.DreamMasterPvpActivityStatus.AllEnd then
		txt_countdown:setText(Desc.DreamMasterPvp_allend)
		self.btn_go:setGrayed(false)
		self.btn_go:setTouchable(true)
		self.btn_go:setTitle(Desc.DreamMasterPvp_huigu)
		return
	elseif (self.curIssue == 1 and stage == GameDef.DreamMasterPvpActivityStatus.GoingOne) or  (self.curIssue == 2 and stage == GameDef.DreamMasterPvpActivityStatus.GoingTwo) or 
		(self.curIssue == 3 and stage == GameDef.DreamMasterPvpActivityStatus.GoingThree) or  (self.curIssue == 4 and stage == GameDef.DreamMasterPvpActivityStatus.GoingFour) then
		txt_countdown:setText(Desc.DreamMasterPvp_going)
		self.btn_go:setGrayed(false)
		self.btn_go:setTouchable(true)
		self.btn_go:setTitle(Desc.DreamMasterPvp_goto)
		return
	elseif self.curIssue == 1 and stage > GameDef.DreamMasterPvpActivityStatus.GoingOne then
		txt_countdown:setText(Desc.DreamMasterPvp_allend)
		self.btn_go:setGrayed(false)
		self.btn_go:setTouchable(true)
		self.btn_go:setTitle(Desc.DreamMasterPvp_huigu)
		return
	elseif self.curIssue == 2 and stage > GameDef.DreamMasterPvpActivityStatus.GoingTwo then
		txt_countdown:setText(Desc.DreamMasterPvp_allend)
		self.btn_go:setGrayed(false)
		self.btn_go:setTouchable(true)
		self.btn_go:setTitle(Desc.DreamMasterPvp_huigu)
		return
	elseif self.curIssue == 3 and stage > GameDef.DreamMasterPvpActivityStatus.GoingThree then
		txt_countdown:setText(Desc.DreamMasterPvp_allend)
		self.btn_go:setGrayed(false)
		self.btn_go:setTouchable(true)
		self.btn_go:setTitle(Desc.DreamMasterPvp_huigu)
		return
	end
	
	
	if actState and actState > 0 then
		self.btn_go:setTitle(Desc.DreamMasterPvp_goto)
		self.btn_go:setGrayed(false)
		self.btn_go:setTouchable(true)
	else
		self.btn_go:setGrayed(true)
		self.btn_go:setTouchable(false)
		self.btn_go:setTitle(Desc.DreamMasterPvp_wait)
	end

	local curServerTime = ServerTimeModel:getServerTime()

	local addtime = DreamMasterPvpModel.nextSec - (curServerTime - DreamMasterPvpModel.nextSecServerTime)
	local dayTime = 24*60*60
	if addtime > 0 then
		txt_countdown:setText(TimeLib.GetTimeFormatDay(addtime, 2))
		local function onCountDown(time)
			if time<dayTime then
				txt_countdown:setText(Desc.DreamMasterPvp_lesstime..TimeLib.formatTime(time))
			else
				txt_countdown:setText(Desc.DreamMasterPvp_lesstime..TimeLib.GetTimeFormatDay1(time))
			end
		end
		local function onEnd(...)
			txt_countdown:setText(Desc.DreamMasterPvp_going)
			self.btn_go:setGrayed(false)
			self.btn_go:setTouchable(true)
			self.btn_go:setTitle(Desc.DreamMasterPvp_goto)
		end
		if self.calltimer then
			TimeLib.clearCountDown(self.calltimer)
		end
		self.calltimer = TimeLib.newCountDown(addtime, onCountDown, onEnd, false, false, false)
	else
		txt_countdown:setText(Desc.DreamMasterPvp_going)
	end
end

function DreamMasterPvpView:_exit()

	if self.calltimer then
		TimeLib.clearCountDown(self.calltimer)
	end
	self.calltimer = false

end

return DreamMasterPvpView