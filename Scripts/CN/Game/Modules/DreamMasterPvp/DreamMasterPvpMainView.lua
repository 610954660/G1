--Date :2020-11-23
--Author : generated by FairyGUI
--Desc : 

local DreamMasterPvpMainView, Super = class("DreamMasterPvpMainView", Window)

function DreamMasterPvpMainView:ctor()
	--LuaLog("DreamMasterPvpMainView ctor")
	self._packName = "DreamMasterPvp"
	self._compName = "DreamMasterPvpMainView"
	self._rootDepth = LayerDepth.Window
	self.curGroupId = 1
	self.annimation = false
	self.calltimer = false
	self.touchBtn = false
	self._updateTimeId = false
	self.addTag = 1
	self.addNum = 1
	self.addMap = {}
	self.shouzhiAnima = {}
	self.xiantiaoAnima = {}
	self.mode = DreamMasterPvpModel.matchMode
	self._args.moduleId = 202
end

function DreamMasterPvpMainView:_initEvent()
end

function DreamMasterPvpMainView:_initVM()
	local vmRoot = self
	local viewNode = self.view
	---Do not modify following code--------
	--{vmFields}:WorldChallenge.DreamMasterPvpMainView
	vmRoot.btn_choose1 = viewNode:getChildAutoType("$btn_choose1")
	--component
	vmRoot.btn_quiz = viewNode:getChildAutoType("$btn_quiz")
	--component
	vmRoot.btn_choose2 = viewNode:getChildAutoType("$btn_choose2")
	--component
	vmRoot.heroCell3 = viewNode:getChildAutoType("$heroCell3")
	--component
	vmRoot.heroCell5 = viewNode:getChildAutoType("$heroCell5")
	--component
	vmRoot.heroCell10 = viewNode:getChildAutoType("$heroCell10")
	--component
	vmRoot.heroCell1 = viewNode:getChildAutoType("$heroCell1")
	--component
	vmRoot.heroCell6 = viewNode:getChildAutoType("$heroCell6")
	--component
	vmRoot.heroCell9 = viewNode:getChildAutoType("$heroCell9")
	--component
	vmRoot.heroCell7 = viewNode:getChildAutoType("$heroCell7")
	--component
	vmRoot.heroCell13 = viewNode:getChildAutoType("$heroCell13")
	--component
	vmRoot.heroCell15 = viewNode:getChildAutoType("$heroCell15")
	--component
	vmRoot.bar_6 = viewNode:getChildAutoType("$bar_6")
	--component
	vmRoot.btn_championship = viewNode:getChildAutoType("$btn_championship")
	--component
	vmRoot.bar_3 = viewNode:getChildAutoType("$bar_3")
	--component
	vmRoot.bar_1 = viewNode:getChildAutoType("$bar_1")
	--component
	vmRoot.btn_left = viewNode:getChildAutoType("$btn_left")
	--component
	vmRoot.heroCell8 = viewNode:getChildAutoType("$heroCell8")
	--component
	vmRoot.bar_4 = viewNode:getChildAutoType("$bar_4")
	--component
	vmRoot.btn_second = viewNode:getChildAutoType("$btn_second")
	--component
	vmRoot.btn_choose3 = viewNode:getChildAutoType("$btn_choose3")
	--component
	vmRoot.btn_mymatch = viewNode:getChildAutoType("$btn_mymatch")
	--component
	vmRoot.bar_9 = viewNode:getChildAutoType("$bar_9")
	--component
	vmRoot.btn_halloffame = viewNode:getChildAutoType("$btn_halloffame")
	--component
	vmRoot.bar_5 = viewNode:getChildAutoType("$bar_5")
	--component
	vmRoot.heroCell2 = viewNode:getChildAutoType("$heroCell2")
	--component
	vmRoot.bar_7 = viewNode:getChildAutoType("$bar_7")
	--component
	vmRoot.img_stageNum = viewNode:getChildAutoType("$img_stageNum")
	--loader
	vmRoot.bar_2 = viewNode:getChildAutoType("$bar_2")
	--component
	vmRoot.heroCell12 = viewNode:getChildAutoType("$heroCell12")
	--component
	vmRoot.heroCell11 = viewNode:getChildAutoType("$heroCell11")
	--component
	vmRoot.btn_right = viewNode:getChildAutoType("$btn_right")
	--component
	vmRoot.countdown = viewNode:getChildAutoType("$countdown")
	vmRoot.statusTitle = viewNode:getChildAutoType("statusTitle")
	--text
	vmRoot.heroCell14 = viewNode:getChildAutoType("$heroCell14")
	--component
	vmRoot.heroCell4 = viewNode:getChildAutoType("$heroCell4")
	--component
	vmRoot.bar_8 = viewNode:getChildAutoType("$bar_8")

	
	--component
	--{vmFieldsEnd}:WorldChallenge.DreamMasterPvpMainView
	--Do not modify above code-------------
end

function DreamMasterPvpMainView:_addRed()
	RedManager.register(
        "V_DREAMMASTER_JINGCAI",
        self.btn_quiz:getChildAutoType("img_red"),
        ModuleId.DreamMasterPvp.id
    )

    RedManager.register(
        "V_DREAMMASTER_MYMATCH",
        self.btn_mymatch:getChildAutoType("img_red"),
        ModuleId.DreamMasterPvp.id
    )
end

function DreamMasterPvpMainView:_initUI()
	local root = self
	local rootView = self.view

	self:_initVM()
	self:setBg("worldchallengeMian0.png")
	self.c1 = self.view:getController("c1")
	self:showBtn()
	self:upWorldViewInfo()
end

function DreamMasterPvpMainView:upWorldViewInfo()
	local model = DreamMasterPvpModel:getModelByType(self.mode)
	local countdown = DreamMasterPvpModel.stateEndTimeMs/1000
	
	self:showCountDown(self.statusTitle,self.countdown, countdown)
	local isOpenBtn = model:isOpenGuanjunSai()
	self.btn_championship:setGrayed(not isOpenBtn)
	if isOpenBtn == false then
		self.btn_second:setSelected(true)
		self.btn_championship:setSelected(false)
		if model:getHasOpen() == false then --参赛人数不足
			self:showView(0, 2, 1)
		else
			self:showView(0, 0, self.curGroupId)
			self:showBtn()
		end
	else
		self.btn_second:setSelected(false)
		self.btn_championship:setSelected(true)
		-- local isOpenBtn = DreamMasterPvpModel:isOpenGuanjunSai()
		-- if isOpenBtn == true then
		if model:getHasOpen() == false then --参赛人数不足
			self:showView(1, 2, 0)
		else
			self:showView(1, 1, 0)
		end
		-- else
		--     RollTips.show(Desc.WorldChallenge_str1)
		-- end
	end
	if model:getcanChange() == true then
		self.btn_mymatch:setVisible(true)
	else
		self.btn_mymatch:setVisible(false)
	end
end

function DreamMasterPvpMainView:getBtnNum(type) --0减1加
	self.addMap = {}
	local flag = type == 0 and -1 or 1
	local tag = self.addTag + 3 * flag
	tag = math.min(6, math.max(1, tag))
	for i = 0, 2 do
		table.insert(self.addMap, tag + i)
	end
	self.addTag = tag;
	self:showBtn()
end

-- 小组赛切换按钮
function DreamMasterPvpMainView:showBtn()

	local guessId = DreamMasterPvpModel:getGuessinggroupId()
	if #self.addMap == 0 then
		local index = math.min(6, math.max(1, guessId))
		self.addTag = index
		self.curGroupId = math.min(8, math.max(1, guessId))
		self.addMap = {index, index + 1, index + 2}
	end
	-- self.btn_left:setVisible(self.addTag ~= 1)
	-- self.btn_right:setVisible(self.addTag ~= 6)
	local seleInfo = self.curGroupId
	for i = 1, 3, 1 do
		local num = self.addMap[i]
		local key = "$btn_choose" .. i
		local btnItem = self.view:getChildAutoType(key)
		local c1 = btnItem:getController("c1")
		if num == guessId then
			c1:setSelectedIndex(1)
		else
			c1:setSelectedIndex(0)
		end
		if num == seleInfo then
			btnItem:setSelected(true)
			self.touchBtn = btnItem
			self:showView(0, 0, num)
		else
			btnItem:setSelected(false)
		end
		if num == nil then
			num = 1
		end
		btnItem:setTitle(string.format(Desc.WorldChallenge_str8, num))
		btnItem:removeClickListener(100)
		btnItem:addClickListener(
			function(context)
				if self.touchBtn then
					self.touchBtn:setSelected(false)
				end
				btnItem:setSelected(true)
				self.touchBtn = btnItem
				self.curGroupId = num
				self:showView(0, 0, num)
			end,
			100
		)
	end
end

function DreamMasterPvpMainView:showView(state, seleIndex, groupId) --state=0晋级赛1冠军赛，seleIndex控制器id
	local model = DreamMasterPvpModel
	self.c1:setSelectedIndex(seleIndex)
	local stage = model.WorldChallenInfo.stage
	local stageStr = DreamMasterPvpModel:getPresentStageImgURL()
	self.img_stageNum:setURL(stageStr)
	local ItemPosNum = DreamMasterPvpModel.ItemPos
	for i = 1, #ItemPosNum, 1 do
		local posKey = ItemPosNum[i]
		local key = "$heroCell" .. posKey
		local PlayerInfoKey = groupId .. "_" .. posKey
		local playerInfo = model.WorldChallenInfo[PlayerInfoKey]
		local item = self.view:getChildAutoType(key)
		local c1 = item:getController("c1")
		local c2 = item:getController("c2")
		local c3 = item:getController("c3")
		local txt_num = item:getChildAutoType("txt_num")
		local img_shouzhiani = item:getChildAutoType("img_shouzhiani")
		local itemPos = model:getGuessinggroupPos()
		local arrt = string.split(posKey, "_")
		-- 竞猜手指
		if playerInfo and DreamMasterPvpModel.myGuessInfo and playerInfo.pos == DreamMasterPvpModel.myGuessInfo.dreamPvpPos and arrt and itemPos == tonumber(arrt[1]) then
			c3:setSelectedIndex(1)
			if not self.shouzhiAnima[PlayerInfoKey] then
				self.shouzhiAnima[PlayerInfoKey] = DreamMasterPvpModel:getWorldChallengeShouzhiAnim(img_shouzhiani)
			end
		else
			c3:setSelectedIndex(0)
			if self.shouzhiAnima[PlayerInfoKey] then
				SpineUtil.clearEffect(self.shouzhiAnima[PlayerInfoKey])
			end
		end
		if playerInfo == nil or playerInfo.playerId < 0 then --没有参赛人员显示几强
			c1:setSelectedIndex(0)
			c2:setSelectedIndex(0)
			local desc = DreamMasterPvpModel:getChallengeText(state, i)
			txt_num:setText(desc)
		else
			local playerHead = item:getChildAutoType("heroCell")
			local allplayerInfo = model.playerMap[playerInfo.playerId]
			local itemStateSele = model:getPlayerItem(groupId, posKey)
            c1:setSelectedIndex(itemStateSele)
			--差个竞猜玩家标志{}
			local heroItem = BindManager.bindPlayerCell(playerHead)

			
			if allplayerInfo  and allplayerInfo.level then
				heroItem:setHead(allplayerInfo.head, allplayerInfo.level, nil, nil, allplayerInfo.headBorder)
				local txt_playername = item:getChildAutoType("txt_playername")
				txt_playername:setText(allplayerInfo.name)
			end
			
			playerHead:removeClickListener(100)
			playerHead:addClickListener(
				function(context)
					local playId = allplayerInfo.playerId
					local serverId = allplayerInfo.serverId
					if (self.mode == 1) then
						allplayerInfo.fromView = "worldChallenge"
						ViewManager.open("HigherPvPPlayerInfoView", allplayerInfo)
					else
						ViewManager.open(
							"ViewPlayerView",
							{playerId = playId, serverId = serverId, arrayType = GameDef.BattleArrayType.DreamPvp}
						)
					end
				end,
				100
			)
			--战斗记录
			local has, recordId = model:hashuifangRecordId(PlayerInfoKey)
			if has and recordId and recordId ~= "" and recordId ~= 0 then
				c2:setSelectedIndex(1)
			else
				c2:setSelectedIndex(0)
			end
			local btn_video = item:getChildAutoType("$btn_video")
			--btn_video:setTitle(recordId)
			btn_video:removeClickListener(100)
			btn_video:addClickListener(
				function(context)
					local info = false
					if (self.mode == 1) then
						info = PlayerInfoKey
					else
						info = 4001
					end
					model:seeCombatlog(recordId, info)
				end,
				100
			)
		end
	end
	self:showLine(state, groupId)
end

function DreamMasterPvpMainView:showLine(state, groupId)
	local model = DreamMasterPvpModel:getModelByType(self.mode)
	local lineNum = DreamMasterPvpModel.LinePos
	for lineId = 1, #lineNum, 1 do
		local tiaoKey = lineNum[lineId]
		local lineKey = "$bar" .. tiaoKey
		local barItem = self.view:getChildAutoType(lineKey)
		local img = barItem:getChildAutoType("bar")
		local isShowAnim = DreamMasterPvpModel:getWorldChallengeXiantiao(groupId, tiaoKey, self.mode)
		local img_ani = self.view:getChildAutoType("img_ani" .. tiaoKey)
		if isShowAnim then
			if not self.xiantiaoAnima[tiaoKey] then
				self.xiantiaoAnima[tiaoKey] = self:getXiantiaoAnim(tiaoKey, img_ani)
			end
		else
			if self.xiantiaoAnima[tiaoKey] then
				SpineUtil.clearEffect(self.xiantiaoAnima[tiaoKey])
				self.xiantiaoAnima[tiaoKey] = false
			end
		end
		barItem:setMin(0)
		barItem:setMax(100)
		local isLine = model:getLineBarState(groupId, tiaoKey)
		if lineId == 4 then
			printTable(31, "打印的进度条", isLine, tiaoKey)
			
		end

		if tiaoKey == "0_1" then
			print(33,"groupId, lineId",groupId, tiaoKey,isLine)
			--isLine = 4
		end
		
		if isLine == 1 then
			img:setFillOrigin(0)
			barItem:setValue(54)
		elseif isLine == 2 then
			img:setFillOrigin(1)
			barItem:setValue(50)
		elseif isLine == 3 then
			img:setFillOrigin(2)
				barItem:setValue(50)
		elseif isLine == 4 then
			img:setFillOrigin(3)
			barItem:setValue(51)
		elseif isLine == true then
			barItem:setValue(100)
		elseif isLine == false then
			barItem:setValue(0)
		end
		--barItem:setValue(100)
	end
end

function DreamMasterPvpMainView:getXiantiaoAnim(lineId, barImg)
	-- local model = DreamMasterPvpModel:getModelByType(self.mode)
	local ani = DreamMasterPvpModel:getXiantiaobyStageAnim(barImg, self.mode)
	if ani ~= false then
		local arr = string.split(lineId, "_")
		local key = tonumber(arr[1])
		local pos = tonumber(arr[2])
		if key == 2 and (pos == 3 or pos == 4) then
			ani:setScaleX(-1)
		elseif key == 1 and pos == 3 then
			ani:setScaleX(-1)
		elseif key == 1 and pos == 2 then
			ani:setScaleY(-1)
		elseif key == 1 and pos == 4 then
			ani:setScaleX(-1)
			ani:setScaleY(-1)
		end
	end
	return ani
end

function DreamMasterPvpMainView:showCountDown(txt_statusTitle,txt_countdown, serverTime)
	local model = DreamMasterPvpModel:getModelByType(self.mode)
	local stage = DreamMasterPvpModel.status
	local actState = DreamMasterPvpModel.pVPIndex
	printTable(33, "打印的倒计时.........1", stage, actState)
	if actState == GameDef.DreamPvpIndex.Seven or stage == GameDef.DreamMasterPvpActivityStatus.AllEnd then
		txt_countdown:setText(Desc.DreamMasterPvp_allend)
		txt_statusTitle:setVisible(false)
		return
	end
	txt_statusTitle:setVisible(true)
	if DreamMasterPvpModel.state == GameDef.DreamPvpState.Pre then
		txt_statusTitle:setText(Desc.DreamMasterPvp_ready)
	elseif DreamMasterPvpModel.state == GameDef.DreamPvpState.Lock then
		txt_statusTitle:setText(Desc.DreamMasterPvp_lock)
	elseif DreamMasterPvpModel.state == GameDef.DreamPvpState.Fight then
		txt_statusTitle:setText(Desc.DreamMasterPvp_battle)
	end
	
	local curServerTime = ServerTimeModel:getServerTime()
	local addtime = serverTime - curServerTime

	if (stage == GameDef.DreamMasterPvpActivityStatus.ReadyOne or stage == GameDef.DreamMasterPvpActivityStatus.ReadyTwo or stage == GameDef.DreamMasterPvpActivityStatus.ReadyThree or stage == GameDef.DreamMasterPvpActivityStatus.ReadyFour) and  actState == 1 then
		addtime = DreamMasterPvpModel.nextSec - (curServerTime - DreamMasterPvpModel.nextSecServerTime)
	end

	if addtime > 0 then
		txt_countdown:setText(TimeLib.GetTimeFormatDay(addtime, 2))
		local function onCountDown(time)
			txt_countdown:setText(TimeLib.formatTime(time, 2))
		end
		local function onEnd(...)
			txt_countdown:setText(Desc.DreamMasterPvp_allend)
		end
		if self.calltimer then
			TimeLib.clearCountDown(self.calltimer)
		end
		self.calltimer = TimeLib.newCountDown(addtime, onCountDown, onEnd, false, false, false)
	else
		txt_countdown:setText(Desc.DreamMasterPvp_allend)
	end
	printTable(28, "打印的倒计时.........", stage, actState, addtime)
end

function DreamMasterPvpMainView:showguessView() --显示竞猜结果界面
	
	
end

function DreamMasterPvpMainView:_initEvent()
	self.btn_mymatch:addClickListener(
		function(context) --我的比赛
			local model = DreamMasterPvpModel:getModelByType(self.mode)
			model:setBattleArrayState()
			RedManager.updateValue("V_DREAMMASTER_MYMATCH", false)
			local id = model:getMyopponentId()
			if id ~= 0 then
				model:getBattlePlayerInfo(id)
			end
			if model:getcanChange() == true then
				ViewManager.open("DreamMasterPvpQuizView", {quiz = 2, mode = self.mode})
			else
				RollTips.show(Desc.WorldChallenge_str2)
			end
		end
	)

	self.btn_quiz:addClickListener(
		function(context) --竞猜按钮
			--RedManager.updateValue("V_DREAMMASTER_JINGCAI", false);  
			if DreamMasterPvpModel.pVPIndex == GameDef.DreamPvpIndex.One  then 
				if not  DreamMasterPvpModel.guessInfoMap or next(DreamMasterPvpModel.guessInfoMap) == nil then
					RollTips.show(Desc.DreamMasterPvp_guessNo2)
					return
				end
			elseif DreamMasterPvpModel.status == GameDef.DreamMasterPvpActivityStatus.AllEnd or  
				DreamMasterPvpModel.status == GameDef.DreamMasterPvpActivityStatus.ReadyOne or  
				DreamMasterPvpModel.status == GameDef.DreamMasterPvpActivityStatus.ReadyTwo  or
				DreamMasterPvpModel.status == GameDef.DreamMasterPvpActivityStatus.ReadyThree or  
				DreamMasterPvpModel.status == GameDef.DreamMasterPvpActivityStatus.ReadyFour  or
				DreamMasterPvpModel.pVPIndex == GameDef.DreamPvpIndex.Seven  then
				RollTips.show(Desc.DreamMasterPvp_guessNo)
				return
			elseif not DreamMasterPvpModel.guessInfoMap or next(DreamMasterPvpModel.guessInfoMap) == nil then
				RollTips.show(Desc.DreamMasterPvp_guessNo2)
				return
			elseif self.state == GameDef.DreamPvpState.Fight then
				RollTips.show(Desc.DreamMasterPvp_guessLock)
				return
			elseif not DreamMasterPvpModel.guessInfoMap or  next(DreamMasterPvpModel.guessInfoMap) == nil then
				RollTips.show(Desc.DreamMasterPvp_guessNo2)
				return
			end
			ViewManager.open("DreamMasterPvpQuizView", {quiz = 0, mode = self.mode})
		end
	)

	self.btn_halloffame:addClickListener(
		function(context) --名人堂
			--ViewManager.open("WorldChallengeHallPlayerView", {mode = self.mode})
			ModuleUtil.openModule(ModuleId.Chat)
		end
	)

	self.btn_left:addClickListener(
		function(context) --减
			self:getBtnNum(0)
			--0减1加
		end
	)

	self.btn_right:addClickListener(
		function(context) --加
			self:getBtnNum(1)
			--0减1加
		end
	)

	self.btn_second:addClickListener(
		function(context) --晋级赛
			local model = DreamMasterPvpModel:getModelByType(self.mode)
			if model:getHasOpen() == false then --参赛人数不足
				self:showView(0, 2, 1)
			else
				self:showView(0, 0, self.curGroupId)
			end
			self:showBtn()
			self.btn_championship:setSelected(false)
		end
	)
	self.btn_championship:addClickListener(
		function(context) --冠军赛
			local model = DreamMasterPvpModel:getModelByType(self.mode)
			local isOpenBtn = model:isOpenGuanjunSai()
			if isOpenBtn == true then
				if model:getHasOpen() == false then --参赛人数不足
					self:showView(1, 2, 0)
				else
					self:showView(1, 1, 0)
				end
				self.btn_second:setSelected(false)
			else
				self.btn_second:setSelected(true)
				self.btn_championship:setSelected(false)
				RollTips.show(Desc.WorldChallenge_str1)
			end
		end
	)
end

function DreamMasterPvpMainView:dreamMaster_dianjijincai() --竞猜刷新显示竞猜标志
	self:upWorldViewInfo()
end

function DreamMasterPvpMainView:dreamMaster_updateView()
	self:upWorldViewInfo()
	self:showguessView()
end

function DreamMasterPvpMainView:dreamMaster_updateState()
	local countdown = DreamMasterPvpModel.stateEndTimeMs/1000
	self:showCountDown(self.statusTitle,self.countdown, countdown)
	self:showguessView()
end

function DreamMasterPvpMainView:dreamMaster_wodebisaianniu()
	local model = DreamMasterPvpModel:getModelByType(self.mode)
	if model:getcanChange() == true then
		self.btn_mymatch:setVisible(true)
	else
		self.btn_mymatch:setVisible(false)
	end
end

function DreamMasterPvpMainView:_exit()
	SpineUtil.clearEffect(self.xiantiaoAnima)
	SpineUtil.clearEffect(self.shouzhiAnima)
	if self.calltimer then
		TimeLib.clearCountDown(self.calltimer)
	end
	self.calltimer = false
	Scheduler.unschedule(self.annimation)
end

return DreamMasterPvpMainView