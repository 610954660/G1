--Date :2021-01-21
--Author : generated by FairyGUI
--Desc : 

local ElfFinalSecondView,Super = class("ElfFinalSecondView", Window)

function ElfFinalSecondView:ctor()
	--LuaLog("ElfFinalSecondView ctor")
	self._packName = "ElfFinalSecond"
	self._compName = "ElfFinalSecondView"
	--self._rootDepth = LayerDepth.Window
	self.isEnd 	= false
	self.timer 	= false
	
end

function ElfFinalSecondView:_initEvent( )
	
end

function ElfFinalSecondView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:ElfFinalSecond.ElfFinalSecondView
	self.btn_go = viewNode:getChildAutoType('btn_go')--GButton
	self.click = viewNode:getChildAutoType('click')--GGraph
	self.img_banner = viewNode:getChildAutoType('img_banner')--GLoader
	self.img_boxBg = viewNode:getChildAutoType('img_boxBg')--GLoader
	self.img_elfs = viewNode:getChildAutoType('img_elfs')--GLoader
	self.item_1 = viewNode:getChildAutoType('item_1')--rewardItem
		self.item_1.img_red = viewNode:getChildAutoType('item_1/img_red')--GImage
		self.item_1.layerBg = viewNode:getChildAutoType('item_1/layerBg')--GGraph
		self.item_1.list_reward = viewNode:getChildAutoType('item_1/list_reward')--GList
		self.item_1.rewardGroup = viewNode:getChildAutoType('item_1/rewardGroup')--GGroup
	self.item_2 = viewNode:getChildAutoType('item_2')--rewardItem
		self.item_2.img_red = viewNode:getChildAutoType('item_2/img_red')--GImage
		self.item_2.layerBg = viewNode:getChildAutoType('item_2/layerBg')--GGraph
		self.item_2.list_reward = viewNode:getChildAutoType('item_2/list_reward')--GList
		self.item_2.rewardGroup = viewNode:getChildAutoType('item_2/rewardGroup')--GGroup
	self.item_3 = viewNode:getChildAutoType('item_3')--rewardItem
		self.item_3.img_red = viewNode:getChildAutoType('item_3/img_red')--GImage
		self.item_3.layerBg = viewNode:getChildAutoType('item_3/layerBg')--GGraph
		self.item_3.list_reward = viewNode:getChildAutoType('item_3/list_reward')--GList
		self.item_3.rewardGroup = viewNode:getChildAutoType('item_3/rewardGroup')--GGroup
	self.item_4 = viewNode:getChildAutoType('item_4')--rewardItem
		self.item_4.img_red = viewNode:getChildAutoType('item_4/img_red')--GImage
		self.item_4.layerBg = viewNode:getChildAutoType('item_4/layerBg')--GGraph
		self.item_4.list_reward = viewNode:getChildAutoType('item_4/list_reward')--GList
		self.item_4.rewardGroup = viewNode:getChildAutoType('item_4/rewardGroup')--GGroup
	self.progressBar = viewNode:getChildAutoType('progressBar')--ProgressBar1
	self.txt_countTimer = viewNode:getChildAutoType('txt_countTimer')--GTextField
	self.txt_countTitle = viewNode:getChildAutoType('txt_countTitle')--GTextField
	self.txt_decTitle = viewNode:getChildAutoType('txt_decTitle')--GTextField
	self.txt_times = viewNode:getChildAutoType('txt_times')--GTextField
	self.txt_tips = viewNode:getChildAutoType('txt_tips')--GTextField
	--{autoFieldsEnd}:ElfFinalSecond.ElfFinalSecondView
	--Do not modify above code-------------
end

function ElfFinalSecondView:_initListener( )
	

end

function ElfFinalSecondView:_initUI( )
	self:_initVM()
	self:_initListener()
	local moduleId 	= ElfFinalSecondModel:getModuleId()
	local ElfShowNew = DynamicConfigData.t_ElfShowNew[moduleId]
	local show 	= ElfShowNew.show
	local link 	= ElfShowNew.link
	local buttonTitle = ElfShowNew.button
	self.img_boxBg:setURL("UI/activity/ElfFinalSecond/img_elfbg.png")
	self.img_elfs:setURL(string.format("UI/activity/ElfFinalSecond/%s",show))
	self.btn_go:getChildAutoType("title"):setText(buttonTitle)
	self.btn_go:addClickListener(function()
		ModuleUtil.openModule(link,true)
	end)
	self:ElfFinalSecondView_refreshPanel()
end

function ElfFinalSecondView:ElfFinalSecondView_refreshPanel()
	self:setPanel()
	self:updateCountTimer()
end

function ElfFinalSecondView:setPanel()
	local moduleId 	= ElfFinalSecondModel:getModuleId()
	local ElfShowNew = DynamicConfigData.t_ElfShowNew[moduleId]
	local desc  	= ElfShowNew.desc
	local elfFinalInfo 	= ElfFinalSecondModel.elfFinalInfo
	local drawTimes 	= elfFinalInfo.drawTimes or 0
	local rewardStatus 	= elfFinalInfo.reward or {}
	local findRewardStatus = function(times)  
		for k,v in pairs(rewardStatus) do
			if v == times then
				return true
			end
		end
		return false
	end
	self.txt_tips:setText(desc)

	self.txt_times:setText(string.format(Desc.ElfFinalSecond_str2,drawTimes))

	local itemInfo 	= DynamicConfigData.t_ElfLastNew[moduleId]
	local touch  	= false
	for i=1,4 do
		local item 	= self["item_"..i] 
		local data 	= itemInfo[i]
		local title = item:getChildAutoType("title")	
		local list_reward 	= item:getChildAutoType("list_reward")
		local rewardData 	= data.reward
		local rewardGroup 	= item:getChildAutoType("rewardGroup")
		local icon 	= item:getChildAutoType("icon")
		title:setText(data.times)
		list_reward:setItemRenderer(function(idx,obj)
			local index = idx + 1
			local reward = rewardData[index]
			local itemCell = BindManager.bindItemCell(obj)
			itemCell:setData(reward.code,reward.amount,reward.type)
		end)
		list_reward:setData(rewardData)
		list_reward:resizeToFit(2)

		if findRewardStatus(data.times) then
			icon:setColor({r=100,g=100,b=100})
		else
			icon:setColor({r=255,g=255,b=255})
		end

		local img_red = item:getChildAutoType("img_red")
		RedManager.register("V_ACTIVITY_"..GameDef.ActivityType.ElfFinalSecond .."_" .. i, img_red)
		icon:removeClickListener(11)
		icon:addClickListener(function()  
			if drawTimes >= data.times then
				if not findRewardStatus(data.times) then
					ElfFinalSecondModel:reqActivity_ElfFinalSecond_PlayerGetTimesReward(data.times,false,function()  
					end) 
					return
				end
			end

			for j =1,4 do
				local item2 	= self["item_"..j] 
				local rewardGroup2 	= item2:getChildAutoType("rewardGroup")
				if j ~= i then
					rewardGroup2:setVisible(false)
				end
			end
			print(8849,">>>>111>>>")
			rewardGroup:setVisible(not rewardGroup:isVisible())
			touch = rewardGroup:isVisible()
			print(8849,">>>touch>>",touch)
			if touch then
				self.click:setTouchable(touch)
			end
		end,11)


		if i == 4 then
			list_reward:setPivot(1,0.5)
		else
			list_reward:setPivot(0.5,0.5)
		end
	end

	self.click:removeClickListener(11)
	self.click:addClickListener(function()  
		print(8849,">>>>13233>>>")
		for i=1,4 do
			local item 	= self["item_"..i] 
			local icon 	= item:getChildAutoType("icon")
			local rewardGroup 	= item:getChildAutoType("rewardGroup")
			if rewardGroup:isVisible() then
				rewardGroup:setVisible(not rewardGroup:isVisible())
			end
		end
		self.click:setTouchable(false)
	end,11)

	local viewInfo = ViewManager.getViewInfo("ActivityFrame2View")
	local _tabBar = viewInfo.window._tabBar
	_tabBar:removeClickListener(777)
	_tabBar:addClickListener(function()  
		for i=1,4 do
			local item 	= self["item_"..i] 
			local icon 	= item:getChildAutoType("icon")
			local rewardGroup 	= item:getChildAutoType("rewardGroup")
			if rewardGroup:isVisible() then
				rewardGroup:setVisible(not rewardGroup:isVisible())
			end
		end
		self.click:setTouchable(false)
	end,777)

	local maxValue = 0
	for k,v in pairs(itemInfo) do
		if maxValue < v.times then
			maxValue = v.times
		end
	end
	print(8849,">>>>maxValue>>>" .. maxValue)
	local coeNum = 0
	local lastTimes = 0
	local curTimes 	= itemInfo[1].times
	for i=1,#itemInfo do
		local data = itemInfo[i]
		if drawTimes <= data.times then
			if i ~= 1 then
				lastTimes 	= itemInfo[i-1].times
				curTimes 	= itemInfo[i].times
				coeNum = (i-1)/#itemInfo
			end
			break
		end
	end
	local curValue = 0
	if coeNum ~= 0 then
		curValue = (coeNum + (1/#itemInfo)*((drawTimes - lastTimes)/(curTimes - lastTimes))) * 100
	else
		curValue = (1/#itemInfo)*(drawTimes/curTimes) * 100
	end
	self.progressBar:setMax(100)
	self.progressBar:setValue(curValue)

end

-- 倒计时
function ElfFinalSecondView:updateCountTimer()
	if self.isEnd then return end
	local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.ElfFinalSecond)
	printTable(8848,">>>actData>>",actData)
	if not actData then return end
	local actId   = actData.id
	local status, addtime = ModelManager.ActivityModel:getActStatusAndLastTime(actId)
	if not addtime then return end

	if status == 2 and addtime == -1 then
		self.isEnd = false
		self.txt_countTimer:setText(Desc.activity_txt5)
	else
		local lastTime = addtime / 1000
		if lastTime == -1 then
			self.txt_countTimer:setText(Desc.activity_txt5)
		else
			if not tolua.isnull(self.txt_countTimer) then
				self.txt_countTimer:setText(TimeLib.GetTimeFormatDay(lastTime, 2))
			end
			local function onCountDown(time)
				if not tolua.isnull(self.txt_countTimer) then
					self.isEnd = false
					self.txt_countTimer:setText(TimeLib.GetTimeFormatDay(time, 2))
				end
			end
			local function onEnd(...)
				self.isEnd = true
				if not tolua.isnull(self.txt_countTimer) then
					self.txt_countTimer:setText(Desc.activity_txt18)
				end
				if not tolua.isnull(self.view) then
					self:ElfFinalSecondView_refreshPanel()
				end
			end
			if self.timer then
				TimeLib.clearCountDown(self.timer)
			end
			self.timer = TimeLib.newCountDown(lastTime, onCountDown, onEnd, false, false, false)
		end
	end
end




return ElfFinalSecondView