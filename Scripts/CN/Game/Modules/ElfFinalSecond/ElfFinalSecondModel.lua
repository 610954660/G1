--Date :2021-01-21
--Author : generated by FairyGUI
--Desc : 

local ElfFinalSecondModel = class("ElfFinalSecond", BaseModel)

function ElfFinalSecondModel:ctor()
    self.elfFinalInfo = {}
    self.addRed = false
end

function ElfFinalSecondModel:init()

end


-- #最终大赏2
-- .PActivity_ElfFinalSecond {
-- 	reward 			1:*integer  #抽奖次数进度奖励
-- 	drawTimes       2:integer #抽奖总次数
-- }

function ElfFinalSecondModel:initData(data)   
    printTable(8849,">>>data>>",data)
    self.elfFinalInfo = data
    self:updateRed()
    Dispatcher.dispatchEvent(EventType.ElfFinalSecondView_refreshPanel)
end

-- #最终大赏2领进度奖励
-- Activity_ElfFinalSecond_PlayerGetTimesReward 12110 {
-- 	request {
-- 		activityType 	1:integer #活动类型
-- 		times 			2:integer #抽奖的次数
-- 	}
-- }
function ElfFinalSecondModel:reqActivity_ElfFinalSecond_PlayerGetTimesReward(times,activityType,func) 
    local reqInfo = {
        activityType    = activityType or GameDef.ActivityType.ElfFinalSecond,
        times   = times,
    }
    RPCReq.Activity_ElfFinalSecond_PlayerGetTimesReward(reqInfo,function(params)  
        if func then
            func()
        end
    end)
    if func then
        func()
    end
end


function ElfFinalSecondModel:getModuleId(activityType)
	local moduleId = 1
	local actData = ModelManager.ActivityModel:getActityByType( activityType or GameDef.ActivityType.ElfFinalSecond)
	moduleId = actData and actData.showContent.moduleId or 1
	return moduleId
end

function ElfFinalSecondModel:updateRed()
	local moduleId 	= self:getModuleId()
	local itemInfo 	= DynamicConfigData.t_ElfLastNew[moduleId]
    local rewardState = false
    if not self.addRed then
        self.addRed = true
        local keyArr = {}
        for k,v in pairs(itemInfo) do
            table.insert(keyArr, "V_ACTIVITY_"..GameDef.ActivityType.ElfFinalSecond.."_" .. k)
        end
        RedManager.addMap("V_ACTIVITY_"..GameDef.ActivityType.ElfFinalSecond, keyArr)
    end

    local elfFinalInfo 	= self.elfFinalInfo
	local drawTimes 	= elfFinalInfo.drawTimes or 0
	local rewardStatus 	= elfFinalInfo.reward or {}
	local findRewardStatus = function(times)  
		for k,v in pairs(rewardStatus) do
			if v == times then
				return true
			end
		end
		return false
	end

    for k,v in pairs(itemInfo) do 
        RedManager.updateValue("V_ACTIVITY_"..GameDef.ActivityType.ElfFinalSecond.."_" ..k, ((drawTimes >= v.times) and ( not findRewardStatus(v.times))) )
    end
end

return ElfFinalSecondModel
