--Name : RuneActiveView.lua
--Author : generated by FairyGUI
--Date : 2020-5-29
--Desc : 符文礼包

local RuneActiveView, Super = class("RuneActiveView", Window)
local ItemCell = require "Game.UI.Global.ItemCell"
function RuneActiveView:ctor()
	--LuaLog("RuneActiveView ctor")
	self._packName = "OperatingActivities"
	self._compName = "RuneActiveView"
	--self._rootDepth = LayerDepth.Window
	self.activeInfo = {}
	self.rewardInfo = {}
	self.activityEnable = false
end

function RuneActiveView:_initEvent()
end

function RuneActiveView:_initVM()
	local vmRoot = self
	local viewNode = self.view
	---Do not modify following code--------
	--{vmFields}:OperatingActivities.RuneActiveView
	vmRoot.txt_countdowm = viewNode:getChildAutoType("$txt_countdowm")
	--list
	vmRoot.List_reward = viewNode:getChildAutoType("$list_reward")
	--text
	--{vmFieldsEnd}:OperatingActivities.RuneActiveView
	--Do not modify above code-------------
end

function RuneActiveView:_initUI()
	self:_initVM()
	--RedManager.updateValue("V_ACTIVITY_" .. type, false)
	local dayStr = DateUtil.getOppostieDays()
	FileCacheManager.setBoolForKey(GameDef.ActivityType.RuneShop.."ElvesmalActivelView_isShow" .. dayStr, true)
	OperatingActivitiesModel:ElvesmalActiveRed(GameDef.ActivityType.RuneShop)
	self.activeInfo = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.RuneShop)
	if not self.activeInfo then
		self.txt_countdowm:setText(Desc.activity_txt4)
		return
	end
	self:showActiveTime()
	self:showRewardList()
end

function RuneActiveView:showRewardList()
	if self.activeInfo.showContent and self.activeInfo.showContent.data then
		self.rewardInfo = OperatingActivitiesModel:getElvesmalActiveConfigInfo(true,GameDef.ActivityType.RuneShop)
		self.List_reward:setVirtual()
		self.List_reward:setItemRenderer(
			function(index, obj)
				local itemMode = self.rewardInfo[index + 1]
				local gCtr1 = obj:getController("c1")
				local lingqu = self:getLingquState(itemMode.id, itemMode.times)
				printTable(5656,itemMode,"itemMode")
				if lingqu == true then
					gCtr1:setSelectedIndex(1)
				else
					gCtr1:setSelectedIndex(0)
				end
				local btn = obj:getChildAutoType("btn_ordinary")
				btn:setTitle(itemMode.price .. Desc.activity_txt7)
				local txt_desc = obj:getChildAutoType("txt_desc")
				txt_desc:setText(itemMode.price .. Desc.activity_txt11)
				if itemMode.price==0 and lingqu==false then
					local btn_imgred= btn:getChildAutoType("img_red")
					btn_imgred:setVisible(true)
				else
					local btn_imgred= btn:getChildAutoType("img_red")
					btn_imgred:setVisible(false)
				end
				local count = self:getLingquCount(itemMode.id)
				local txt_xiangou = obj:getChildAutoType("txt_xiangou")
				txt_xiangou:setText(Desc.activity_txt12 .. (itemMode.times - count))
				local itemReward = itemMode.item
				local list_reward = obj:getChildAutoType("list_reward")
				list_reward:setItemRenderer(
					function(itemIdex, rewardObj)
						--池子里面原来的事件注销掉
						local itemcell1 = BindManager.bindItemCell(rewardObj)
						local award = itemReward[itemIdex + 1]
						itemcell1:setData(award.code, award.amount, award.type)
					end
				)
				list_reward:setNumItems(#itemReward)
				local btn_ordinary = obj:getChildAutoType("btn_ordinary")
				btn_ordinary:removeClickListener(100)
				btn_ordinary:addClickListener(
					function(context)
						if self.activityEnable then
							RollTips.show(Desc.activity_txt13)
							return
						end
						if itemMode.price == 0 then
							self.activeInfo = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.ElfGift)
							if not self.activeInfo then
								return
							end
							OperatingActivitiesModel:getElfGiftGetRewardReq(self.activeInfo.id,itemMode.id)
						else
							ModelManager.RechargeModel:directBuy(
								itemMode.price,
								GameDef.StatFuncType.SFT_RuneShop,
								itemMode.id,
								itemMode.price .. Desc.activity_txt11,
								nil,
								itemMode.showName1
							)
						end
					end,
					100
				)
			end
		)
		self.List_reward:setNumItems(#self.rewardInfo)
	end
end

function RuneActiveView:getLingquState(id, time)
	local lingqu = false
	local lingquList = OperatingActivitiesModel.ElvesmalActivelInfo[GameDef.ActivityType.RuneShop]
	if not lingquList then
		return lingqu
	end
	local useTime = self:getLingquCount(id)
	if lingquList[id] and useTime >= time then
		lingqu = true
		--已售罄
	end
	return lingqu
end

function RuneActiveView:getLingquCount(id)
	local count = 0
	local lingquList = OperatingActivitiesModel.ElvesmalActivelInfo[GameDef.ActivityType.RuneShop]
	if not lingquList then
		return count
	end
	if lingquList[id] then
		count = lingquList[id].count
	end
	return count
end

function RuneActiveView:showActiveTime()
	self.activeInfo = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.RuneShop)
	if not self.activeInfo then
		return
	end
	local actData = self.activeInfo
	if not actData then
		return
	end
	local actId = actData.id
	local status, addtime = ModelManager.ActivityModel:getActStatusAndLastTime(actId)
	if not addtime then
		return
	end
	if status == 2 and addtime == -1 then
		self.txt_countdowm:setText(Desc.activity_txt5)
	else
		local lastTime = addtime / 1000
		if lastTime == -1 then
			self.txt_countdowm:setText(Desc.activity_txt5)
		else
			if lastTime > 0 then
				self.txt_countdowm:setText(TimeLib.GetTimeFormatDay(lastTime, 2))
				local function onCountDown(time)
					self.txt_countdowm:setText(TimeLib.GetTimeFormatDay(time, 2))
				end
				local function onEnd(...)
					self.activityEnable = true
					self.txt_countdowm:setText(Desc.activity_txt4)
				end
				if self.calltimer then
					TimeLib.clearCountDown(self.calltimer)
				end
				self.calltimer = TimeLib.newCountDown(lastTime, onCountDown, onEnd, false, false, false)
			else
				self.txt_countdowm:setText(Desc.activity_txt4)
			end
		end
	end
end

--事件初始化
function RuneActiveView:activity_ElvesmalActiveUpdate(...)
	self.activeInfo = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.RuneShop)
	if not self.activeInfo then
		return
	end
	self:showActiveTime()
	if self.activeInfo.showContent and self.activeInfo.showContent.data then
		self.rewardInfo = OperatingActivitiesModel:getElvesmalActiveConfigInfo(true,GameDef.ActivityType.RuneShop)
	end
	self.List_reward:setNumItems(#self.rewardInfo)
end

function RuneActiveView:_exit(...)
	if self.calltimer then
		TimeLib.clearCountDown(self.calltimer)
	end
end

return RuneActiveView
