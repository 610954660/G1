--Name : EverDayAccumulatedView.lua
--Author : generated by FairyGUI
--Date : 2020-7-8
--Desc : --每日累计豪礼

local EverDayAccumulatedView, Super = class("EverDayAccumulatedView", Window)
local ItemConfiger = require "Game.ConfigReaders.ItemConfiger"
function EverDayAccumulatedView:ctor()
    LuaLog("EverDayAccumulatedView ctor")
    self._packName = "EverDayAccumulated"
    self._compName = "EverDayAccumulatedView"
    self._rootDepth = LayerDepth.PopWindow
    self.viewIndexTag = GameDef.ActivityType.AccChargeDay
    self.currTabIndex = false
    self.state = false
    self.starInfo = false
    self.bannerUrl = false
end

function EverDayAccumulatedView:_initEvent()
end

function EverDayAccumulatedView:_initVM()
    local vmRoot = self
    local viewNode = self.view
    ---Do not modify following code--------
    --{vmFields}:OperatingActivities.EverDayAccumulatedView
    --	vmRoot.list_item = viewNode:getChildAutoType("$list_item")--list
    --	vmRoot.img_banner = viewNode:getChildAutoType("$img_banner")--loader
    --	vmRoot.ltxt_countDown = viewNode:getChildAutoType("$ltxt_countDown")--text
    --{vmFieldsEnd}:OperatingActivities.EverDayAccumulatedView
    --Do not modify above code-------------
end

function EverDayAccumulatedView:_initUI()
    self:_initVM()
    self.itemList = self.view:getChildAutoType("itemList")
    self.tabList = self.view:getChildAutoType("tabList")
    self.btnGet = self.view:getChildAutoType("btnGet")
    self.txtRecharge = self.view:getChildAutoType("txtRecharge")
    self.btnClose = self.view:getChildAutoType("btnClose")
    printTable(999, "累计充值打印的数据", self._args)

    self.itemList:setVirtual()

    self.itemList:setItemRenderer(function(index, obj)
        self:itemListRenderer(index,obj)
    end)

    self.tabList:setItemRenderer(function(index, obj)
        self:tabListRenderer(index,obj)
    end)

    self.btnGet:addClickListener(function()
        self:onBtnGetClick()
    end,1)

    self.btnClose:addClickListener(function()
        self:onBtnCloseClick()
    end,1)

    self.currTabIndex = 1
    self.view:getChildAutoType("n0"):setURL(PathConfiger.GetUIFrame("EverDayAccumulated/frame","png"))
    self:updateTabList()
    self:updateView()
    self:updateItemList()

    self.tabList:setSelectedIndex(0)
end

function EverDayAccumulatedView:_exit()
    self.currTabIndex = false
    self.starInfo = false
    self.bannerUrl = false
    self.state = false
end

function EverDayAccumulatedView:updateView()
    local hasGet = OperatingActivitiesModel:getAccumulatedAddLingqu(self.viewIndexTag, self.starInfo[self.currTabIndex].id)
    local money = OperatingActivitiesModel:getAccumulatedAddMoney(self.viewIndexTag)

    if money < self.starInfo[self.currTabIndex].accType then --无法领取
        self.state = 0
    elseif money >= self.starInfo[self.currTabIndex].accType and hasGet == false then --可领取
        self.state = 1
    elseif money >= self.starInfo[self.currTabIndex].accType and hasGet == true then --已领取
        self.state = 2
    end
    print(999,"累充",money,self.state)
    self.txtRecharge:setText(string.format(Desc.AnyPrepaidphoneView_str92,money))
    self.view:getController("status"):setSelectedIndex(self.state)
    self.view:getChildAutoType("imgRed"):setVisible(self.state == 1)
end

function EverDayAccumulatedView:updateItemList()
    if not self.starInfo or not self.currTabIndex then
        return
    end

    self.itemList:setNumItems(#self.starInfo[self.currTabIndex].reward)
end

function EverDayAccumulatedView:updateTabList()
    self.starInfo, self.bannerUrl = OperatingActivitiesModel:getAccumulatedAddInfo(self.viewIndexTag, true)
    self.tabList:setNumItems(#self.starInfo)
end

function EverDayAccumulatedView:itemListRenderer(index,obj)
    local itemcell = BindManager.bindItemCell(obj)
    local award = self.starInfo[self.currTabIndex].reward[index + 1]
    itemcell:setData(award.code, award.amount, award.type)
    itemcell:setIsHook(self.state == 2)


    --local money = OperatingActivitiesModel:getAccumulatedAddMoney(self.viewIndexTag)
    --local starInfo = self.starInfo
    --local itemInfo = starInfo[index + 1]
    --obj:getChild("$txt_desc"):setText("累计充值达到"..ColorUtil.formatColorString1(itemInfo.accType,"#6aff60").."元")
    --local iconUrl = ItemConfiger.getItemIconByCodeAndType(2, 2)
    --obj:getChild("$img_num"):setURL(iconUrl)
    --obj:getChild("$txt_num"):setText(ColorUtil.formatColorString1(money,"#6aff60").. "/" .. itemInfo.accType)
    --local ctrl = obj:getController("c1")
    --local lingqu = OperatingActivitiesModel:getAccumulatedAddLingqu(self.viewIndexTag, itemInfo.id)
    --local red = false
    --local state = 0
    --if money < itemInfo.accType then --无法领取
    --    state = 1
    --    ctrl:setSelectedIndex(1)
    --    red = false
    --elseif money >= itemInfo.accType and lingqu == false then --可领取
    --    state = 2
    --    ctrl:setSelectedIndex(0)
    --    red = true
    --elseif money >= itemInfo.accType and lingqu == true then --已领取
    --    state = 3
    --    ctrl:setSelectedIndex(2)
    --    red = false
    --end
    --local btn = obj:getChild("$btn_get")
    --local img_red =btn:getChild("img_red")
    --img_red:setVisible(red)
    --local list_prop = obj:getChild("$list_prop")
    --list_prop:setItemRenderer(function(idx2, obj2)
    --    local itemcell = BindManager.bindItemCell(obj2)
    --    local award = itemInfo.reward[idx2 + 1]
    --    itemcell:setData(award.code, award.amount, award.type)
    --    itemcell:setIsHook(state == 3)
    --end)
    --list_prop:setNumItems(#itemInfo.reward)
    ---- 领取按钮
    --
    --btn:removeClickListener(100)
    --btn:addClickListener(function()
    --    OperatingActivitiesModel:AccChargeDayRecieveReward(itemInfo.id)
    --end, 100)
    ---- 前往按钮
    --local enterbtn = obj:getChild("$btn_enter")
    --enterbtn:removeClickListener(100)
    --enterbtn:addClickListener(function()
    --    ModuleUtil.openModule(ModuleId.Recharge.id)
    --end, 100)
end


function EverDayAccumulatedView:tabListRenderer(index,obj)
    local itemInfo = self.starInfo[index + 1]
    local hasGet = OperatingActivitiesModel:getAccumulatedAddLingqu(self.viewIndexTag, self.starInfo[index + 1].id)
    local money = OperatingActivitiesModel:getAccumulatedAddMoney(self.viewIndexTag)

    obj:setTitle(string.format(Desc.activity_txt10,itemInfo.accType))
    obj:addClickListener(function()
        self:onTabClick(index + 1)
    end,1)
    obj:getChildAutoType("red"):setVisible(money >= self.starInfo[index + 1].accType and hasGet == false)
end

function EverDayAccumulatedView:onTabClick(index)
    if self.currTabIndex ~= index then
        self.currTabIndex = index
        self:updateView()
        self:updateItemList()
    end
end

function EverDayAccumulatedView:onBtnGetClick()
    if self.state == 0 then
        ModuleUtil.openModule(ModuleId.Recharge.id,false,{page = 3})
    elseif self.state == 1 then
        OperatingActivitiesModel:AccChargeDayRecieveReward(self.viewIndexTag,self.starInfo[self.currTabIndex].id)
    end
end

function EverDayAccumulatedView:onBtnCloseClick()
    self:closeView()
end
--function EverDayAccumulatedView:showCountTime()
--    local actData = ModelManager.ActivityModel:getActityByType(self.viewIndexTag)
--       if actData then
--        local  addtime = ServerTimeModel:getTodayLastSeconds()
--        self.ltxt_countDown:setText(TimeLib.GetTimeFormatDay(addtime,2))
--        if not tolua.isnull(self.ltxt_countDown) then
--            self.ltxt_countDown:setText(TimeLib.GetTimeFormatDay(addtime, 2))
--         --TimeLib.formatTime(addtime,true,false)
--        end
--        local function onCountDown(time)
--            printTable(21,"打印大额时间",time)
--            if not tolua.isnull(self.ltxt_countDown) then
--                self.ltxt_countDown:setText(TimeLib.GetTimeFormatDay(time, 2))
--             --TimeLib.formatTime(time,true,false)
--            end
--        end
--        local function onEnd(...)
--            if not tolua.isnull(self.ltxt_countDown) then
--            self.ltxt_countDown:setText("活动已结束")
--            end
--        end
--        if self.calltimer then
--            TimeLib.clearCountDown(self.calltimer)
--        end
--        self.calltimer = TimeLib.newCountDown(addtime, onCountDown, onEnd, false, false, false)
--     else
--        self.ltxt_countDown:setText("活动已结束")
--     end
--end

--function EverDayAccumulatedView:showView()
--
--    self.img_banner:setURL(string.format("%s%s", "UI/activity/", self.bannerUrl))
--    self:showCountTime()
--    self.list_item:setVirtual()
--
--
--end

function EverDayAccumulatedView:activity_AccumulatedAddInfoupdate(...)
	--self.starInfo, self.bannerUrl = OperatingActivitiesModel:getAccumulatedAddInfo(self.viewIndexTag, true)
	--self.list_item:setNumItems(#self.starInfo);
    self:updateTabList()
    self:updateView()
    self:updateItemList()
end
    
function EverDayAccumulatedView:serverTime_crossDay(...)--跨天
    RollTips.show(Desc.AnyPrepaidphoneView_str93)
    --self:showView()
    self:updateTabList()
    self:updateView()
    self:updateItemList()
end

return EverDayAccumulatedView
