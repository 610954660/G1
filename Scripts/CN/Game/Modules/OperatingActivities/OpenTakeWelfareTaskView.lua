--Name : OpenTakeWelfareTaskView.lua
--Author : generated by FairyGUI
--Date : 2020-7-8
--Desc : --开服福利

local OpenTakeWelfareTaskView, Super = class("OpenTakeWelfareTaskView", Window)
function OpenTakeWelfareTaskView:ctor()
    LuaLog("OpenTakeWelfareTaskView ctor")
    self._packName = "OperatingActivities"
    self._compName = "OpenTakeWelfareTaskView"
    self._rootDepth = LayerDepth.PopWindow
    self.viewIndexTag = GameDef.ActivityType.PrimaryTask
    self.starInfo = false
    self.bannerUrl = false
    self.calltimer = false
    self.com_enter = false
end

function OpenTakeWelfareTaskView:_initEvent()
end

function OpenTakeWelfareTaskView:_initVM()
    local vmRoot = self
    local viewNode = self.view
    ---Do not modify following code--------
    --{vmFields}:OperatingActivities.OpenTakeWelfareTaskView
    vmRoot.txt_clientDesc = viewNode:getChildAutoType("txt_clientDesc")
    vmRoot.list_item = viewNode:getChildAutoType("$list_item")
    --list
    vmRoot.txt_countDown = viewNode:getChildAutoType("$txt_countDown")
    --text
    vmRoot.img_banner = viewNode:getChildAutoType("$img_banner")
    --loader
    --{vmFieldsEnd}:OperatingActivities.OpenTakeWelfareTaskView
    --Do not modify above code-------------
end

function OpenTakeWelfareTaskView:setActType(_args)
end

function OpenTakeWelfareTaskView:_initUI()
    self:_initVM()
    local img_bg = self.view:getChildAutoType("img_bg")
    img_bg:setURL("UI/activity/openTakeWelfareTaskBg.png")
    self.com_enter = self.view:getChildAutoType("com_enter")
    local actData = ModelManager.ActivityModel:getActityByType(self.viewIndexTag)
    if not actData then
        return
    end
    self:PriviligeGift_upGiftData()
    self:showView()
end

function OpenTakeWelfareTaskView:showCountTime()
    local actData = ModelManager.ActivityModel:getActityByType(self.viewIndexTag)
    if not actData then
        return
    end
    local actId = actData.id
    local status, addtime = ModelManager.ActivityModel:getActStatusAndLastTime(actId)
    if not addtime then
        return
    end
    if status == 2 and addtime == -1 then
        self.txt_countDown:setText(Desc.activity_txt5)
    else
        local lastTime = addtime / 1000
        if lastTime == -1 then
            self.txt_countDown:setText(Desc.activity_txt5)
        else
            if not tolua.isnull(self.txt_countDown) then
                self.txt_countDown:setText(TimeLib.GetTimeFormatDay(lastTime, 2))
            end
            local function onCountDown(time)
                if not tolua.isnull(self.txt_countDown) then
                    self.txt_countDown:setText(TimeLib.GetTimeFormatDay(time, 2))
                end
            end
            local function onEnd(...)
                if not tolua.isnull(self.txt_countDown) then
                    self.txt_countDown:setText(Desc.activity_txt13)
                end
            end
            if self.calltimer then
                TimeLib.clearCountDown(self.calltimer)
                self.calltimer = false
            end
            self.calltimer = TimeLib.newCountDown(lastTime, onCountDown, onEnd, false, false, false)
        end
    end
end

function OpenTakeWelfareTaskView:showView()
    self:showCountTime()
    self.starInfo = OperatingActivitiesModel:getOpenTakeWelfareMapInfo(true)
    if not self.starInfo then
        return
    end
    self.list_item:setVirtual()
    self.list_item:setItemRenderer(
        function(index, obj)
            local starInfo = self.starInfo
            local itemInfo = starInfo[index + 1]
            local taskId = itemInfo.id
            obj:getChild("$txt_desc"):setText(itemInfo.name)
            local bar = obj:getChild("progressBar")
            local num, lingqu = OperatingActivitiesModel:getOpenTakeWelfareTaskState(taskId)
            local max = itemInfo.count
            bar:setMax(max)
            bar:setValue(num)
            local ctrl = obj:getController("c1")
            ctrl:setSelectedIndex(lingqu)
            local list_prop = obj:getChild("$list_prop")
            list_prop:setItemRenderer(
                function(idx2, obj2)
                    local itemcell = BindManager.bindItemCell(obj2)
                    local award = itemInfo.reward[idx2 + 1]
                    itemcell:setData(award.code, award.amount, award.type)
                    -- itemcell:setIsHook(state == 3)
                end
            )
            list_prop:setNumItems(#itemInfo.reward)
            local btn = obj:getChild("$btn_get") -- 领取按钮
            btn:removeClickListener(100)
            btn:addClickListener(
                function()
                    OperatingActivitiesModel:primaryTaskRecieveReward(itemInfo.moduleId, taskId)
                end,
                100
            )
            local enterbtn = obj:getChild("$btn_enter") -- 前往按钮
            enterbtn:removeClickListener(100)
            enterbtn:addClickListener(
                function()
                    ModuleUtil.openModule(itemInfo.moduleOpen, true)
                end,
                100
            )
        end
    )
    self.list_item:setNumItems(#self.starInfo)
end

function OpenTakeWelfareTaskView:activity_OpenTakeWelfareTaskUpdate(...)
    self.starInfo = OperatingActivitiesModel:getOpenTakeWelfareMapInfo(true)
    if next(self.starInfo) == nil then
        return
    end
    self.list_item:setNumItems(#self.starInfo)
end

function OpenTakeWelfareTaskView:PriviligeGift_upGiftData()
    if (not PriviligeGiftModel:getPriviligeGift(1)) then
        if  tolua.isnull(self.com_enter) then
            return
        end
        self.com_enter:setVisible(true)
        local vip_goto=self.com_enter:getChildAutoType("vip_goto")
        vip_goto:removeClickListener(222)
        vip_goto:addClickListener(
            function()
                ModuleUtil.openModule(ModuleId.PriviligeGiftView, true)
            end,
            222
        )
    else
        self.com_enter:setVisible(false)
    end
end

function OpenTakeWelfareTaskView:_exit()
    if self.calltimer then
        TimeLib.clearCountDown(self.calltimer)
    end
end

return OpenTakeWelfareTaskView
