--Name : OperatingActivitiesController.lua
--Author : generated by FairyGUI
--Date : 2020-5-29
--Desc :

local OperatingActivitiesController = class("OperatingActivitiesController", Controller)

function OperatingActivitiesController:init()
end

function OperatingActivitiesController:Activity_UpdateData(_, params)
    if params and params.type == GameDef.ActivityType.EightDayLogin then --八日登陆
        --服务器 表示活动类型是唯一的
        printTable(16, "Activity_UpdateData八日登陆", params)
        if params.endState then --如果是true 直接结束
            ActivityModel:speDeleteSeverData(params.type)
        end
        if params.eightDayLogin then
            ModelManager.OperatingActivitiesModel:initData(params.eightDayLogin)
        end
        Dispatcher.dispatchEvent(EventType.activity_eightdayActiveupdate)
    elseif params and params.type == GameDef.ActivityType.CollectStar then --集星活动
        printTable(151, "Activity_UpdateData集星活动", params)
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
        if params.collectStar then
            ModelManager.OperatingActivitiesModel:setPolestarActive(params.collectStar)
        end
        Dispatcher.dispatchEvent(EventType.activity_PolestarActiveupdate)
    elseif params and params.type == GameDef.ActivityType.OnlineReward then --在线礼包
        printTable(152, "Activity_UpdateData在线礼包", params)
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
        if params.onlineReward then
            ModelManager.OperatingActivitiesModel:setOnlineGiftBag(params.onlineReward)
            OperatingActivitiesModel:starOnlineCountTime(nil, 0, 1)
        end
        Dispatcher.dispatchEvent(EventType.activity_OnlineGiftActiveupdate)
    elseif params and params.type == GameDef.ActivityType.AccChargeDay then -- 每日累计充值豪礼
        printTable(21, "Activity_UpdateData 每日累计充值豪礼", params)
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
        if params.accChargeDay then
            ModelManager.OperatingActivitiesModel:setAccumulatedAdd(GameDef.ActivityType.AccChargeDay, params)
        end
        Dispatcher.dispatchEvent(EventType.activity_AccumulatedAddInfoupdate)
    elseif params and params.type == GameDef.ActivityType.AccCharge then --累计充值豪礼
        printTable(21, "Activity_UpdateData累计充值豪礼", params)
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
        if params.accCharge then
            ModelManager.OperatingActivitiesModel:setAccumulatedAdd(GameDef.ActivityType.AccCharge, params)
        end
        Dispatcher.dispatchEvent(EventType.activity_AccumulatedAddInfoupdate)
    elseif params and params.type == GameDef.ActivityType.FestivalRecharge then --节日累充
        printTable(21, "Activity_UpdateData节日累充豪礼", params)
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
        if params.accCharge then
            ModelManager.OperatingActivitiesModel:setAccumulatedAdd(GameDef.ActivityType.FestivalRecharge, params)
        end
        Dispatcher.dispatchEvent(EventType.activity_AccumulatedAddInfoupdate)
    elseif params and params.type == GameDef.ActivityType.FirstCharge then -- 首充礼包
        -- printTable(999,"Activity_UpdateData首充礼包",params)
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
    elseif params and params.type == GameDef.ActivityType.BargainGift then -- 超值礼包
        -- printTable(999,"Activity_UpdateData超值礼包",params)
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
    elseif params and params.type == GameDef.ActivityType.QuestionnaireSurvey then -- 问卷调查
        -- printTable(999,"Activity_UpdateData问卷调查",params)
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
    elseif params and params.type == GameDef.ActivityType.WarOrder then --战令活动
        printTable(31, "Activity_UpdateData战令活动", params)
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
        if params.warOrder then
            ModelManager.OperatingActivitiesModel:setWarmakesActiveInfo(params.warOrder)
        end
        Dispatcher.dispatchEvent(EventType.activity_WarmakesActiveupdate)
    elseif params and params.type == GameDef.ActivityType.ElfWarOrder then --精灵战令活动
        printTable(690, "Activity_UpdateData精灵战令活动", params)
        if params.newWarOrder then
            ModelManager.OperatingActivitiesModel:setWarmakesElfActiveInfo(params.type,params.newWarOrder)
        end
        Dispatcher.dispatchEvent(EventType.activity_WarmakesElfActiveupdate)
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
    elseif params and params.type == GameDef.ActivityType.LimitGift then --限时商城礼包
        printTable(152, "Activity_UpdateData限时商城礼包", params)
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
        if params.limitGift and params.limitGift.gift then
            ModelManager.OperatingActivitiesModel:setLimitedmarkeActiveInfo(params.limitGift.gift)
        else
            OperatingActivitiesModel.LimitedmarkeActiveInfo = {}
        end
        OperatingActivitiesModel:updateLimitedmarkeRed()
        Dispatcher.dispatchEvent(EventType.activity_LimitedmarketActiveUpdate)
    elseif params and params.type == GameDef.ActivityType.Features then --特性觉醒活动
        printTable(152, "Activity_UpdateData特性觉醒活动", params)
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
        if params.features and params.features.data then
            ModelManager.OperatingActivitiesModel:setAwakeningCharacteristicsInfo(params.features.data)
        else
            OperatingActivitiesModel.AwakeningCharacter = {}
        end
        OperatingActivitiesModel:AwakeningCharacteristicsred()
        Dispatcher.dispatchEvent(EventType.activity_AwakeningCharacterisUpdate)
    elseif params and params.type == GameDef.ActivityType.CollectMap then --集图夺宝
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
        if params.collectMap then
            ModelManager.OperatingActivitiesModel:setCollectMap(params.collectMap)
        end
        OperatingActivitiesModel:CollectMapRedFirst()
        Dispatcher.dispatchEvent(EventType.activity_CollectMap)
    elseif params and params.type == GameDef.ActivityType.HeroCome then --英雄降临
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
        if params.heroCome then
            ModelManager.OperatingActivitiesModel:setNieYinComingMap(params.heroCome)
        end
        Dispatcher.dispatchEvent(EventType.activity_nieYingComingUpdate)
    elseif params and params.type == GameDef.ActivityType.PrimaryTask then --开服福利
        if params.primaryTask then
            ModelManager.OperatingActivitiesModel:setOpenTakeWelfareMap(params.primaryTask)
        end
        Dispatcher.dispatchEvent(EventType.activity_OpenTakeWelfareTaskUpdate)
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
    elseif params and params.type == GameDef.ActivityType.ElfCollection then --精灵收集
        printTable(155, "Activity_UpdateData精灵收集活动", params)
        if params.elfCollection then
            ModelManager.OperatingActivitiesModel:setElvestoCollectActiveInfo(params.type, params.elfCollection)
        else
            OperatingActivitiesModel.spriteActivityInfo[params.type] = {}
        end
        OperatingActivitiesModel:elvestoCollectActiveRed(params.type)
         --红点
        Dispatcher.dispatchEvent(EventType.activity_ElvestoCollectUpdate)
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
    elseif params and params.type == GameDef.ActivityType.ElfSummon then --精灵召唤
        printTable(155, "Activity_UpdateData精灵召唤活动", params)
        if params.elfSummon then
            ModelManager.OperatingActivitiesModel:setElvestoCollectActiveInfo(params.type, params.elfSummon)
        else
            OperatingActivitiesModel.spriteActivityInfo[params.type] = {}
        end
        OperatingActivitiesModel:elvestoCollectActiveRed(params.type)   --红点
        Dispatcher.dispatchEvent(EventType.activity_ElvestoElfSummontUpdate)   
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end   
    elseif params and params.type == GameDef.ActivityType.ElfGift then --精灵商城
        printTable(152, "Activity_UpdateData精灵商城礼包", params)
        if params.elfGift then
            ModelManager.OperatingActivitiesModel:setElvesmalActivelInfo(params.elfGift.records,params.type)
        else
            OperatingActivitiesModel.ElvesmalActivelInfo[params.type] = {}
        end
        OperatingActivitiesModel:ElvesmalActiveRed()
        Dispatcher.dispatchEvent(EventType.activity_ElvesmalActiveUpdate)
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
	
	elseif params and params.type == GameDef.ActivityType.RuneShop then --符文商城
		printTable(5656, "Activity_UpdateData符文商城礼包", params)
		if params.limitGift and params.limitGift.gift then
			for k, giftData in pairs(params.limitGift.gift) do
				giftData.count=giftData.times
			end
			ModelManager.OperatingActivitiesModel:setElvesmalActivelInfo(params.limitGift.gift,params.type)
		else
			OperatingActivitiesModel.ElvesmalActivelInfo[params.type] = {}
		end
		OperatingActivitiesModel:ElvesmalActiveRed(params.type)
		Dispatcher.dispatchEvent(EventType.activity_ElvesmalActiveUpdate)
		if params.endState then
			ActivityModel:speDeleteSeverData(params.type)
		end	
	elseif params and params.type == GameDef.ActivityType.NewHeroShop then --新英雄活动商店
		if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
        if params.newHeroShop then
            ModelManager.OperatingActivitiesModel:setHeroBossShopData(params.newHeroShop)
        end
        OperatingActivitiesModel:setHeroBossShopRedFirst()
        Dispatcher.dispatchEvent(EventType.activity_CommonBossShop)
	elseif params and params.type == GameDef.ActivityType.NewHeroCopy then --新英雄活动
		if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
        if params.newHeroCopy then
            ModelManager.OperatingActivitiesModel:setHeroBossData(params.newHeroCopy)
        end
--        OperatingActivitiesModel:setHeroBossRedFirst()
        Dispatcher.dispatchEvent(EventType.activity_HeroBossData)
    elseif params and params.type == GameDef.ActivityType.WantCharge then --任意充值 -- 累充档位可以复刻这里
        printTable(21, "Activity_UpdateData任意充值", params)
        if params.wantCharge then
            ModelManager.OperatingActivitiesModel:setAccumulatedAdd(GameDef.ActivityType.WantCharge, params)
        end
        Dispatcher.dispatchEvent(EventType.activity_AnyPrepaidphoneupdate)
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
    elseif params and params.type == GameDef.ActivityType.GroupBuyGift then --团购礼包
        printTable(156, "Activity_UpdateData团购礼包", params)
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
        if params.groupBuyGift then
            ModelManager.OperatingActivitiesModel:setGroupBuyInfo(GameDef.ActivityType.GroupBuyGift, params.groupBuyGift)
        end
        Dispatcher.dispatchEvent(EventType.activity_GroupBuyGiftupdate)
	elseif params and params.type == GameDef.ActivityType.Monopoly then --天降神兵
		printTable(5656, "Activity_Monopoly 天降神兵", params)
		if params.monopoly then
			TwistRegimentModel:updateData(params.monopoly.records)
		end
		Dispatcher.dispatchEvent(EventType.activity_AccumulatedAddInfoupdate)
		if params.endState then
			ActivityModel:speDeleteSeverData(params.type)
        end
    elseif params and params.type == GameDef.ActivityType.AccChargeDayCopy then --合集里的每日累充
        printTable(21, "Activity_UpdateData合集里的每日累充", params)
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
        if params.accChargeDay then
            ModelManager.OperatingActivitiesModel:setAccumulatedAdd(GameDef.ActivityType.AccChargeDayCopy, params)
        end
        Dispatcher.dispatchEvent(EventType.activity_AccumulatedAddInfoupdate) 
    elseif params and params.type == GameDef.ActivityType.BoundaryWarOrder then --临界执照
        printTable(157, "Activity_UpdateData精灵战令活动", params)
        if params.newWarOrder then
            ModelManager.OperatingActivitiesModel:setWarmakesElfActiveInfo(params.type,params.newWarOrder)
        end
        Dispatcher.dispatchEvent(EventType.activity_WarmakesElfActiveupdate)
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
    elseif params and params.type == GameDef.ActivityType.MazeWarOrder then --迷宫执照
        printTable(157, "Activity_UpdateData迷宫执照活动", params)
        if params.newWarOrder then
            ModelManager.OperatingActivitiesModel:setWarmakesElfActiveInfo(params.type,params.newWarOrder)
        end
        Dispatcher.dispatchEvent(EventType.activity_WarmakesElfActiveupdate)
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
    elseif params and params.type == GameDef.ActivityType.HallowWarOrder then --圣器战令执照
        printTable(157, "Activity_UpdateData圣器战令执照活动", params)
        if params.newWarOrder then
            ModelManager.OperatingActivitiesModel:setWarmakesElfActiveInfo(params.type,params.newWarOrder)
        end
        Dispatcher.dispatchEvent(EventType.activity_WarmakesElfActiveupdate)
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
    elseif params and params.type == GameDef.ActivityType.EndlessRoadWarOrder then --极地执照
        printTable(157, "Activity_UpdateData极地执照活动", params)
        if params.newWarOrder then
            ModelManager.OperatingActivitiesModel:setWarmakesElfActiveInfo(params.type,params.newWarOrder)
        end
        Dispatcher.dispatchEvent(EventType.activity_WarmakesElfActiveupdate)
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
    elseif params and params.type == GameDef.ActivityType.SmallElfWarOrder then --小额精灵战令
        printTable(157, "Activity_UpdateData小额精灵战令", params)
        if params.newWarOrder then
            ModelManager.OperatingActivitiesModel:setWarmakesElfActiveInfo(params.type,params.newWarOrder)
        end
        Dispatcher.dispatchEvent(EventType.activity_WarmakesElfActiveupdate)
        if params.endState then
            ActivityModel:speDeleteSeverData(params.type)
        end
    end
end

-- --8日礼包登录下推
-- function OperatingActivitiesController:Activity_EightDayLogin_Notify( _,params)
-- 	printTable(16,"8日礼包登录下推",params)
-- 	ModelManager.OperatingActivitiesModel:initData(params)
-- 	Dispatcher.dispatchEvent(EventType.activity_eightdayActiveupdate);
-- end

-- --在线礼包登录下推
-- function OperatingActivitiesController:Activity_OnlineReward_InfoNotify( _,params)
-- 	printTable(16,"在线礼包登录下推",params)
-- 	if params and params.data then
-- 		ModelManager.OperatingActivitiesModel:setOnlineGiftBag(params)
-- 		OperatingActivitiesModel:starOnlineCountTime(nil,0,1)
-- 	end
-- 	Dispatcher.dispatchEvent(EventType.activity_OnlineGiftActiveupdate);
-- end

-- --集星活动下推
-- function OperatingActivitiesController:Activity_CollectStar_Notify( _,params)
-- 	printTable(16,"集星活动下推",params)
-- 	if params then
-- 		ModelManager.OperatingActivitiesModel:setPolestarActive(params)
-- 	end
-- 	Dispatcher.dispatchEvent(EventType.activity_PolestarActiveupdate);
-- end
function OperatingActivitiesController:money_change(_, info)
    printTable(29, "战令经验数量", info)
    OperatingActivitiesModel:setWarmakesActiveLvAndExp()
    Dispatcher.dispatchEvent(EventType.activity_WarmakesActiveupdate)
    Dispatcher.dispatchEvent(EventType.activity_WarmakesElfActiveupdate)
end

return OperatingActivitiesController
