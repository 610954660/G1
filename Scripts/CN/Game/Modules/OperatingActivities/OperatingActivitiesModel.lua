--Name : OperatingActivitiesModel.lua
--Author : generated by FairyGUI
--Date : 2020-5-29
--Desc :

local OperatingActivitiesModel = class("OperatingActivitiesModel", BaseModel)

function OperatingActivitiesModel:ctor()
    self.eightDayInfo = false
    --八日礼包
    self.onlineGiftBagInfo = false
    --在线礼包
    self.polestarActiveInfo = {}
    --集星活动
    self.AccumulatedAddInfo = {}
    --每日累充 模块id63 活动type13 累充豪礼 模块id64 活动type14
    self.WarmakesActiveInfo = {}
    --战令
    self.LimitedmarkeActiveInfo = {}
    --限时商城
    self.AwakeningCharacter = {} --特性觉醒
    self.calltimer = {}
    self.calltimerTime = {}
    self.mainOnlinegiftTime = {}
    self.collectMap = {} --集图夺宝
    self.NieYinComingMap = {} --聂隐降临
    self.NieYinComingServerTime = 0
    --聂隐降临倒计时
    self.OpenTakeWelfare = {} --开服福利
    self.spriteActivityInfo = {} --精灵收集精灵召唤
	
    self.ElvesmalActivelInfo = {} --限时商城
	--self.RuneActivelInfo = {} --符文商城

	self.heroBossShopData = {}
    self.heroBossData = {}
    self.groupBuyInfo={}    --团购礼包
    self.WarmakesElfActiveInfo = {}--精灵战令
end

function OperatingActivitiesModel:init()
end

--type1=每日累充 type2=累充豪礼
function OperatingActivitiesModel:setAccumulatedAdd(type, data)
    self.AccumulatedAddInfo[type] = data
    if not self.AccumulatedAddInfo[type] then
        return
    end
    self:upsetAccumulatedAddRed(type)
end

function OperatingActivitiesModel:upsetAccumulatedAddRed(type)
    local money = self:getAccumulatedAddMoney(type)
    local actData = ModelManager.ActivityModel:getActityByType(type)
    if not actData then
        RedManager.updateValue("V_ACTIVITY_" .. type, false)
        return
    end
    local showContent = actData.showContent
    local configInfo = showContent.rewardList
    if not configInfo then
        return
    end  

    local serverGetstate = self.AccumulatedAddInfo[type].accChargeDay
    if type == GameDef.ActivityType.WantCharge then
        serverGetstate = self.AccumulatedAddInfo[type].wantCharge
    end
    local red = false
    for key, itemInfo in pairs(configInfo) do
        if type == GameDef.ActivityType.WantCharge then--特殊处理任意充值
            if serverGetstate.recvList[key] then
                local lingqu = self:getAccumulatedAddLingqu(type, itemInfo.id)
                if money >= itemInfo.accType and lingqu == false then --无法领取
                    red = true
                end
            end
        else
            local lingqu = self:getAccumulatedAddLingqu(type, itemInfo.id)
            if money >= itemInfo.accType and lingqu == false then --无法领取
                red = true
            end
        end
    end
    RedManager.updateValue("V_ACTIVITY_" .. type, red)
end

function OperatingActivitiesModel:getAccumulatedAddMoney(type)
    local money = 0
    local serverGetstate = self.AccumulatedAddInfo[type].accChargeDay
    if type == GameDef.ActivityType.AccCharge then
        serverGetstate = self.AccumulatedAddInfo[type].accCharge
    elseif type == GameDef.ActivityType.WantCharge then
        serverGetstate = self.AccumulatedAddInfo[type].wantCharge
    elseif type == GameDef.ActivityType.AccChargeDayCopy then
        serverGetstate = self.AccumulatedAddInfo[type].accChargeDay
    elseif type == GameDef.ActivityType.FestivalRecharge then
        serverGetstate = self.AccumulatedAddInfo[type].accCharge
    end
    if not serverGetstate then
        return money
    end
    money = serverGetstate.count
    return money
end

function OperatingActivitiesModel:getAccumulatedAddLingqu(type, id)
    local stateIdex = true
    local serverGetstate = self.AccumulatedAddInfo[type].accChargeDay
    if type == GameDef.ActivityType.AccCharge then
        serverGetstate = self.AccumulatedAddInfo[type].accCharge
    elseif type == GameDef.ActivityType.WantCharge then
        serverGetstate = self.AccumulatedAddInfo[type].wantCharge
    elseif type == GameDef.ActivityType.AccChargeDayCopy then
        serverGetstate = self.AccumulatedAddInfo[type].accChargeDay
    elseif type == GameDef.ActivityType.FestivalRecharge then
        serverGetstate = self.AccumulatedAddInfo[type].accCharge
    end
    if serverGetstate.recvList and serverGetstate.recvList[id] ~= nil and serverGetstate.recvList[id].recvState ~= nil then
        stateIdex = serverGetstate.recvList[id].recvState
    end
    if stateIdex == false then --已领取
        return true
    else
        return false
    end
end

--累计充值和每日累充活动界面数据
function OperatingActivitiesModel:getAccumulatedAddInfo(type, isSort)
    local temp = {}
    local actData = ModelManager.ActivityModel:getActityByType(type)
    printTable(25, "asfdqdsaf>>>>>>>11", actData)
    if not actData then
        return temp, ""
    end
    local showContent = actData.showContent
    printTable(21, "asfdqdsaf>>>>>>>", actData)
    local configInfo = showContent.rewardList
    if not configInfo then
       return 
    end
    if not self.AccumulatedAddInfo[type] then
       return 
    end
    local serverGetstate = self.AccumulatedAddInfo[type].accChargeDay
    if type == GameDef.ActivityType.AccCharge then
        serverGetstate = self.AccumulatedAddInfo[type].accCharge
    elseif type == GameDef.ActivityType.WantCharge then
        serverGetstate = self.AccumulatedAddInfo[type].wantCharge
    elseif type == GameDef.ActivityType.AccChargeDayCopy then
        serverGetstate = self.AccumulatedAddInfo[type].accChargeDay
    elseif type == GameDef.ActivityType.FestivalRecharge then
        serverGetstate = self.AccumulatedAddInfo[type].accCharge
    end
    for key, value in pairs(configInfo) do
        if type == GameDef.ActivityType.WantCharge then--特殊处理任意充值
            if serverGetstate.recvList[key] then
                local stateIdex = self:getAccumulatedAddLingqu(type, key)
                if stateIdex == true then --已领取
                    value["getRewardIdex"] = 1
                else
                    value["getRewardIdex"] = 0
                end
                temp[#temp + 1] = value
            end 
        else
            local stateIdex = self:getAccumulatedAddLingqu(type, key)
            if stateIdex == true then --已领取
                value["getRewardIdex"] = 1
            else
                value["getRewardIdex"] = 0
            end
            temp[#temp + 1] = value
        end
    end
    if isSort == true then
        TableUtil.sortByMap(temp, {{key = "getRewardIdex", asc = false}, {key = "id", asc = false}})
    end
    return temp, showContent.titleBanner or ""
end

--特性觉醒
function OperatingActivitiesModel:setAwakeningCharacteristicsInfo(data)
    self.AwakeningCharacter = data
end

function OperatingActivitiesModel:AwakeningCharacteristicsred() --限时商城红点
    GlobalUtil.delayCallOnce(
        "OperatingActivitiesModel:AwakeningCharacteristicsred",
        function()
            self:updateAwakeningCharacteristicsRed()
        end,
        self,
        0.1
    )
end

function OperatingActivitiesModel:updateAwakeningCharacteristicsRed()
    local dayStr = DateUtil.getOppostieDays()
    local isShow = FileCacheManager.getBoolForKey("AwakeningCharacteristics_isShow" .. dayStr, false)
    local zeroLingqu = self:getAwakeningCharacterAllRed()
    RedManager.updateValue("V_ACTIVITY_" .. GameDef.ActivityType.Features, (not isShow) or zeroLingqu)
end

function OperatingActivitiesModel:getAwakeningCharacterAllRed()
    local configInfo = DynamicConfigData.t_FeaturesActivity
    local red = false
    for i = 1, #configInfo, 1 do
        local id = configInfo[i].id
        local limitCount = configInfo[i].number
        local count = self:getAwakeningCharacterCount(id)
        local lingqu = self:getAwakeningCharacterLingqu(id)
        if count >= limitCount and lingqu == false then --无法领取
            red = true
        end
    end
    return red
end

function OperatingActivitiesModel:getAwakeningCharacterCount(id)
    local count = 0
    local serverGetstate = self.AwakeningCharacter[id]
    if not serverGetstate then
        return count
    end
    count = serverGetstate.times
    return count
end

function OperatingActivitiesModel:getAwakeningCharacterLingqu(id)
    local stateIdex = false
    local serverGetstate = self.AwakeningCharacter[id]
    if not serverGetstate then
        return stateIdex
    end
    stateIdex = serverGetstate.state
    return stateIdex
end

function OperatingActivitiesModel:getAwakeningCharacteristicsInfo(isSort)
    local temp = {}
    local configInfo = DynamicConfigData.t_FeaturesActivity
    for key, value in pairs(configInfo) do
        local id = configInfo[key].id
        local limitCount = configInfo[key].number
        local count = self:getAwakeningCharacterCount(id)
        local stateIdex = self:getAwakeningCharacterLingqu(key)
        if stateIdex == true then --已领取
            value["getRewardIdex"] = 2
        elseif count < limitCount and stateIdex == false then --未达成
            value["getRewardIdex"] = 1
        elseif count >= limitCount and stateIdex == false then --可领取
            value["getRewardIdex"] = 0
        end
        temp[#temp + 1] = value
    end
    if isSort == true then
        TableUtil.sortByMap(temp, {{key = "getRewardIdex", asc = false}, {key = "id", asc = false}})
    end
    return temp
end

--在线礼包
function OperatingActivitiesModel:starOnlineCountTime(timeObj, i, type)
    if type == 1 then
        local activityModule = self.onlineGiftBagInfo.moduleId
        if not activityModule then
            return
        end
        local configInfo = DynamicConfigData.t_OnlineGift[activityModule]
        if not configInfo then
            return
        end
        local timeLeftValue = self.onlineGiftBagInfo.timeLeftValue
        if not timeLeftValue then
            timeLeftValue = 0
        end
        -- local passList= self.onlineGiftBagInfo.recvStateList
        for idex = 1, #configInfo, 1 do
            local countTime = 0
            local limitTime = configInfo[idex].time
            countTime = limitTime * 60 - math.floor(timeLeftValue / 1000)
            self.calltimerTime[idex] = countTime
            local lastTime = self.calltimerTime[idex] or 0
            if lastTime > 0 then
                if tolua.isnull(timeObj) ~= true then
                    timeObj:setText(TimeLib.formatTime(lastTime))
                end
                local function onCountDown(time)
                    self.calltimerTime[idex] = time
                    if tolua.isnull(timeObj) ~= true then
                        timeObj:setText(TimeLib.formatTime(time))
                    end
                end
                local function onEnd(...)
                    self.calltimerTime[idex] = 0
                    Dispatcher.dispatchEvent(EventType.activity_OnlineGiftTimeOverupdate, i)
                end
                if self.calltimer[idex] then
                    TimeLib.clearCountDown(self.calltimer[idex])
                end
                self.calltimer[idex] = TimeLib.newCountDown(lastTime, onCountDown, onEnd, false, false, false)
            end
        end
    end
    local lastTime = self.calltimerTime[i] or 0
    if lastTime > 0 then
        if tolua.isnull(timeObj) ~= true then
            timeObj:setText(TimeLib.formatTime(lastTime))
        end
        local function onCountDown(time)
            if i == 5 then
            --printTable(151,'>>>>>>>>>>',i,time)
            end
            self.calltimerTime[i] = time
            -- if self.calltimer[i] and time==0 then
            --     TimeLib.clearCountDown(self.calltimer[i])
            -- end
            -- printTable(12,'dsafdasfadsf',time)
            if tolua.isnull(timeObj) ~= true then
                timeObj:setText(TimeLib.formatTime(time))
            end
        end
        local function onEnd(...)
            self.calltimerTime[i] = 0
            if tolua.isnull(timeObj) ~= true then
                timeObj:setText(Desc.OperatingActivitiesModel_str110)
            end
            Dispatcher.dispatchEvent(EventType.activity_OnlineGiftTimeOverupdate, i)
        end
        if self.calltimer[i] then
            TimeLib.clearCountDown(self.calltimer[i])
        end
        self.calltimer[i] = TimeLib.newCountDown(lastTime, onCountDown, onEnd, false, false, false)
    else
        if tolua.isnull(timeObj) ~= true then
            timeObj:setText(Desc.OperatingActivitiesModel_str110)
        end
        if self.calltimer[i] then
            TimeLib.clearCountDown(self.calltimer[i])
        end
    end
end

function OperatingActivitiesModel:getState(i)
    local activityModule = self.onlineGiftBagInfo.moduleId
    if not activityModule then
        return 0
    end
    local configInfo = DynamicConfigData.t_OnlineGift[activityModule]
    if not configInfo then
        return 0
    end
    local timeLeftValue = self.onlineGiftBagInfo.timeLeftValue
    if not timeLeftValue then
        timeLeftValue = 0
    end
    local passList = self.onlineGiftBagInfo.recvStateList
    local countTime = 0
    countTime = self.calltimerTime[i]
    if countTime > 0 then
        --未开启
        return 0
    elseif countTime <= 0 and passList[i] == nil then
        --已开启未领取
        return 1
    elseif countTime <= 0 and passList[i] ~= nil then
        return 2
    --已开启已领取
    end
end

-- 获取数字的二进制形式的某个位的值，index从1开始
function OperatingActivitiesModel:GetBitByIndex(num, index)
    local b = bit.lshift(1, (index - 1))
    return bit.band(num, b)
end

function OperatingActivitiesModel:initData(data)
    self.eightDayInfo = data
    printTable(17, ">>>>>>>>>>", data)
    if not self.eightDayInfo then
        return
    end
    if not self.eightDayInfo.dayCount then
        self.eightDayInfo.dayCount = 1
    end

    if not self.eightDayInfo.recvMark then
        self.eightDayInfo.recvMark = 0
    end
    self:upEightDayActivityRed()
end

function OperatingActivitiesModel:upEightDayActivityRed()
    local red = false
    if not self.eightDayInfo or not self.eightDayInfo.dayCount then
        return
    end

    printTable(17, ">>>>>>>>>>1", self.eightDayInfo)
    for i = 1, self.eightDayInfo.dayCount, 1 do
        local index = self:GetBitByIndex(self.eightDayInfo.recvMark, i)
        if index == 0 then
            red = true
        end
    end
    RedManager.updateValue("V_ACTIVITY_" .. GameDef.ActivityType.EightDayLogin, red)
end

--#8日登录领取提示文字 活动开启
function OperatingActivitiesModel:getEightDayActivityDesc()
    local isActiveOpen = false
    local desc = ""
    local activeInfo = ActivityModel:getActityByType(GameDef.ActivityType.EightDayLogin)
    if
        activeInfo and ActivityModel:getActStatusAndLastTime(activeInfo.id) and
            ActivityModel:getActStatusAndLastTime(activeInfo.id) == 2
     then
        isActiveOpen = true
    end
    if not self.eightDayInfo then
        return
    end
    if isActiveOpen == true then
        local day = self.eightDayInfo.dayCount
        local index = self:GetBitByIndex(self.eightDayInfo.recvMark, day)
        if index == 0 then
            local configInfo = DynamicConfigData.t_EightdayLogin[1][day]
            if (configInfo) then
                -- local itemcode=configInfo.reward[1].code
                -- local itemtype=configInfo.reward[1].type
                -- local itemConfig=  ItemConfiger.getInfoByCode(itemcode, itemtype)
                -- desc="领"..itemConfig.name
                desc = configInfo.desc
            else
                desc = ""
            end
        else
            local nextconfigInfo = DynamicConfigData.t_EightdayLogin[1][day + 1]
            if not nextconfigInfo then
                desc = ""
            else
                desc = nextconfigInfo.desc
            end
        end
    end
    return isActiveOpen, desc
end

function OperatingActivitiesModel:clearTimeScheduler()
	if self.mainOnlinegiftTime  then
        TimeLib.clearCountDown(self.mainOnlinegiftTime)
        self.mainOnlinegiftTime = false
    end
end

--#在线礼包倒计时提示文字 活动开启
function OperatingActivitiesModel:getOnlineGifBagDesc(comItem, lingquLab)
    local isActiveOpen = false
    local activeInfo = ActivityModel:getActityByType(GameDef.ActivityType.OnlineReward)
    if
        activeInfo and ActivityModel:getActStatusAndLastTime(activeInfo.id) and
            ActivityModel:getActStatusAndLastTime(activeInfo.id) == 2
     then
        isActiveOpen = true
    end
    if isActiveOpen then
        printTable(151, ">>>>>>八日登录大厅的是", self.onlineGiftBagInfo)
        if not self.onlineGiftBagInfo then
            return
        end
        local lingqu = self:getOnlineGifLingqustate()
        local maxNum = self:getOnlineGifState()
        -- printTable(151,">>>>>>八日登录大厅的是",lingqu,maxNum)
        if lingqu then
            comItem:setText(Desc.activity_txt14)
            comItem:setVisible(true)
            lingquLab:setVisible(false)
        else
            comItem:setVisible(false)
            lingquLab:setVisible(true)
            local lastTime = self.calltimerTime[maxNum] or 0
            if lastTime > 0 then
                if tolua.isnull(lingquLab) ~= true then
                    lingquLab:setText(TimeLib.formatTime(lastTime))
                end
                local function onCountDown(time)
                    --  printTable(151,'asdfadsfdasf111',maxNum,time)
                    self.calltimerTime[maxNum] = time
                    if tolua.isnull(lingquLab) ~= true then
                        lingquLab:setText(TimeLib.formatTime(time))
                    end
                end
                local function onEnd(...)
                    self.calltimerTime[maxNum] = 0
                    lingquLab:setText(Desc.activity_txt14)
                end
                if self.mainOnlinegiftTime then
                    TimeLib.clearCountDown(self.mainOnlinegiftTime)
                end
                self.mainOnlinegiftTime = TimeLib.newCountDown(lastTime, onCountDown, onEnd, false, false, false)
            end
        end
    else
        comItem:setVisible(false)
        lingquLab:setVisible(false)
    end
    return isActiveOpen
end

function OperatingActivitiesModel:getOnlineGifState()
    local maxNum = 0
    local activityModule = self.onlineGiftBagInfo.moduleId
    if not activityModule then
        return maxNum
    end
    local configInfo = DynamicConfigData.t_OnlineGift[activityModule]
    if not configInfo then
        return maxNum
    end
    local timeLeftValue = self.onlineGiftBagInfo.timeLeftValue
    if not timeLeftValue then
        timeLeftValue = 0
    end
    local passList = self.onlineGiftBagInfo.recvStateList
    for idex = 1, #configInfo, 1 do
        local countTime = 0
        local limitTime = configInfo[idex].time
        countTime = limitTime * 60 - math.floor(timeLeftValue / 1000)
        if countTime > 0 and passList[idex] == nil then
            maxNum = idex
            break
        end
    end
    return maxNum
end

function OperatingActivitiesModel:getOnlineGifLingqustate()
    local lingqu = false
    local activityModule = self.onlineGiftBagInfo.moduleId
    if not activityModule then
        return lingqu
    end
    local configInfo = DynamicConfigData.t_OnlineGift[activityModule]
    if not configInfo then
        return lingqu
    end
    local timeLeftValue = self.onlineGiftBagInfo.timeLeftValue
    if not timeLeftValue then
        timeLeftValue = 0
    end
    local passList = self.onlineGiftBagInfo.recvStateList
    for idex = 1, #configInfo, 1 do
        local countTime = 0
        local limitTime = configInfo[idex].time
        countTime = limitTime * 60 - math.floor(timeLeftValue / 1000)
        if countTime <= 0 and passList[idex] == nil then
            lingqu = true
            break
        end
    end
    return lingqu
end

--#领取成就奖励
function OperatingActivitiesModel:RecieveReward(day)
    -- local function success(data)
    -- 	printTable(12, "领取成就奖励", data)
    -- 	self:upEightDayActivityRed()
    -- end
    local info = {
        day = day --0:integer #要领取的那天
    }
    printTable(12, "领取成就奖励", info)
    RPCReq.Activity_EightDayLogin_RecieveReward(info)
end

--设置在线礼包数据
function OperatingActivitiesModel:setOnlineGiftBag(data)
    self.onlineGiftBagInfo = data
    if not self.onlineGiftBagInfo.recvStateList then
        self.onlineGiftBagInfo.recvStateList = {}
    end
    if not self.onlineGiftBagInfo.timeLeftValue then
        self.onlineGiftBagInfo.timeLeftValue = 0
    end
    self:upOnlineGiftBagActivityRed()
end

--#在线礼包奖励
function OperatingActivitiesModel:RecieveOnlineReward(id)
    local info = {
        id = id --0:integer #要领取的那天
    }
    printTable(12, "领取在线礼包奖励", info)
    RPCReq.Activity_OnlineReward_RecvReward(info)
end

function OperatingActivitiesModel:upOnlineGiftBagActivityRed()
    local red = false
    local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.OnlineReward)
    -- local actId =actData.id
    if not actData then
        return RedManager.updateValue("V_ACTIVITY_" .. GameDef.ActivityType.OnlineReward, false)
    end
    local red = self:getOnlineGifLingqustate()
    RedManager.updateValue("V_ACTIVITY_" .. actData.type, red)
end

function OperatingActivitiesModel:getAngle(iSrcX, iSrcY, iTargetX, iTargetY)
    local x = math.abs(iSrcX - iTargetX)
    local y = math.abs(iSrcY - iTargetY)
    local z = math.sqrt(math.pow(x, 2) + math.pow(y, 2))
    local cos = y / z
    local radina = math.acos(cos) --用反三角函数求弧度
    local angle = math.floor(180 / (math.pi / radina)) --将弧度转换成角度
    if (iTargetX > iSrcX and iTargetY > iSrcY) then --鼠标在第四象限
        angle = 180 - angle
    elseif (iTargetX == iSrcX and iTargetY > iSrcY) then --鼠标在y轴负方向上
        angle = 180
    elseif (iTargetX > iSrcX and iTargetY == iSrcY) then --鼠标在x轴正方向上
        angle = 90
    elseif (iTargetX < iSrcX and iTargetY > iSrcY) then --鼠标在第三象限
        angle = 180 + angle
    elseif (iTargetX < iSrcX and iTargetY == iSrcY) then --鼠标在x轴负方向
        angle = 270
    elseif (iTargetX < iSrcX and iTargetY < iSrcY) then --鼠标在第二象限
        angle = 360 - angle
    end
    return angle
end

function OperatingActivitiesModel:setWarmakesActiveInfo(data)
    self.WarmakesActiveInfo["id"] = data["id"]
    self.WarmakesActiveInfo["commonRewardLv"] = data["commonRewardLv"]
    self.WarmakesActiveInfo["seniorRewardLv"] = data["seniorRewardLv"]
    self.WarmakesActiveInfo["isSenior"] = data["isSenior"]
    if not self.WarmakesActiveInfo then
        return
    end
    if not self.WarmakesActiveInfo.id then
        self.WarmakesActiveInfo.id = 1
    end
    if not self.WarmakesActiveInfo.commonRewardLv then --普通奖励等级
        self.WarmakesActiveInfo.commonRewardLv = 0
    end
    if not self.WarmakesActiveInfo.seniorRewardLv then --高阶奖励等级
        self.WarmakesActiveInfo.seniorRewardLv = 0
    end
    if not self.WarmakesActiveInfo.isSenior then --是否充值过
        self.WarmakesActiveInfo.isSenior = false
    end
    self:upWarmakesActiveRed()
end

function OperatingActivitiesModel:getWarmakesActiveRealType(id)
    local num = self.WarmakesActiveInfo.id or 0
    local type = num % (#DynamicConfigData.t_BpActive)
    if type == 0 then
        type = #DynamicConfigData.t_BpActive
    end
    return type
end

--更新战令红点
function OperatingActivitiesModel:upWarmakesActiveRed()
    local red = false
    local configInfo = DynamicConfigData.t_BpActiveUp
    local type = self:getWarmakesActiveRealType()
    local configreward = configInfo[type]
    if not configreward then
        return
    end
    local putonglingquLv = self.WarmakesActiveInfo.commonRewardLv or 0
    local teshulingquLv = self.WarmakesActiveInfo.seniorRewardLv or 0
    local curLv, curexp, nextExp = self:getWarmakesActiveLvAndExp()
    printTable(30, "更新战令红点qqqqqqqqqqqq", curLv)
    for i = 1, #configreward, 1 do
        local rewardItem = configreward[i]
        local limitLv = rewardItem.level
        local putongstate = self:getWarmakesActiveRewardState(putonglingquLv, limitLv, curLv)
        local tesustate = self:getWarmakesActiveRewardState(teshulingquLv, limitLv, curLv)
        local tesuRed = false
        if self.WarmakesActiveInfo.isSenior == true and tesustate == 1 then
            tesuRed = true
        end
        if putongstate == 1 or tesuRed then
            red = true
            break
        end
    end
    RedManager.updateValue("V_ACTIVITY_" .. GameDef.ActivityType.WarOrder, red)
end

function OperatingActivitiesModel:getWarmakesActiveRewardState(lingquLv, limitLv, curLv)
    local state = 0
    if limitLv > lingquLv and curLv >= limitLv and curLv > lingquLv then --可领取
        state = 1
    else
        if limitLv <= lingquLv then --已领取
            state = 2
        elseif curLv < limitLv then --不可领取
            state = 3
        end
    end
    return state
end

function OperatingActivitiesModel:getWarmakesActiveLvAndExp()
    local curLv = self.WarmakesActiveInfo.curLv or 0
    local curexp = self.WarmakesActiveInfo.curexp or 0
    local nextExp = self.WarmakesActiveInfo.nextExp or 50
    return curLv, curexp, nextExp
end

function OperatingActivitiesModel:setWarmakesActiveLvAndExp() --设置战令等级和经验
    local num = PlayerModel:getMoneyByType(GameDef.MoneyType.WarOrder)
    if not self.WarmakesActiveInfo.id then
        self.WarmakesActiveInfo.id = 1
    end
    if not self.WarmakesActiveInfo.curLv then --当前等级
        printTable(30, "当前等级ccccccccc", self.WarmakesActiveInfo.curLv)
        self.WarmakesActiveInfo.curLv = 0
    end
    if not self.WarmakesActiveInfo.curexp then --当前经验值
        self.WarmakesActiveInfo.curexp = 0
    end
    if not self.WarmakesActiveInfo.nextExp then --下一级经验值
        self.WarmakesActiveInfo.nextExp = 0
    end
    local moduId = self:getWarmakesActiveRealType()
    print(33, ">>>>>>>>>>>moduId>>>", moduId)
    if moduId == 0 then
        return
    end
    local configInfo = DynamicConfigData.t_BpActiveUp[moduId]
    if not configInfo then
        return
    end

    local max = #configInfo
    for i = 1, #configInfo, 1 do
        local cur = configInfo[i]
        local next = configInfo[i + 1]
        -- local oldvalue=self:getWarmakesActiveAllExp(i-1,configInfo)
        local curvalue = self:getWarmakesActiveAllExp(i, configInfo)
        local nextvalue = self:getWarmakesActiveAllExp(i + 1, configInfo)
        if i == 1 and num < curvalue then
            self.WarmakesActiveInfo.curLv = 0
            self.WarmakesActiveInfo.curexp = num
            self.WarmakesActiveInfo.nextExp = cur.needExp
        elseif num >= curvalue and num < nextvalue then
            self.WarmakesActiveInfo.curLv = cur.level
            self.WarmakesActiveInfo.curexp = num - curvalue
            self.WarmakesActiveInfo.nextExp = next.needExp
        elseif max == i and num >= nextvalue then
            self.WarmakesActiveInfo.curLv = cur.level
            self.WarmakesActiveInfo.curexp = cur.needExp
            self.WarmakesActiveInfo.nextExp = cur.needExp
        end
    end
    printTable(
        30,
        "wqqqqqqqqqqqqqqqqq1",
        num,
        self.WarmakesActiveInfo.curLv,
        self.WarmakesActiveInfo.curexp,
        self.WarmakesActiveInfo.nextExp
    )
    self:upWarmakesActiveRed()
end

function OperatingActivitiesModel:getWarmakesActiveAllExp(index, configInfo)
    local nextfigNum = 0
    for i = 1, index, 1 do
        local value = configInfo[i]
        if value then
            nextfigNum = nextfigNum + value.needExp
        end
    end
    return nextfigNum
end

function OperatingActivitiesModel:getWarmakesActiveAddNumLevel(addNum)
    local num = PlayerModel:getMoneyByType(GameDef.MoneyType.WarOrder)
    local moduId = self:getWarmakesActiveRealType()
    if moduId == 0 then
        return 1
    end
    local configInfo = DynamicConfigData.t_BpActiveUp[moduId]
    if not configInfo then
        return 1
    end
    local level=1
    local nextfigNum = 0
    for i = 1, #configInfo, 1 do
        local value = configInfo[i]
        if value then
            nextfigNum = nextfigNum + value.needExp
            if nextfigNum>= num+addNum then
                level=value.level
                break
            end
            if i==#configInfo and num+addNum>=nextfigNum then
                level=value.level
                break
            end
        end
    end
    return level
end

--精灵战令
function OperatingActivitiesModel:setWarmakesElfActiveInfo(actType,info)
    if info.records  then
        local data=info.records
        if self.WarmakesElfActiveInfo[actType]==nil then
            self.WarmakesElfActiveInfo[actType]={}
        end
        self.WarmakesElfActiveInfo[actType]["id"] = data["index"]
        self.WarmakesElfActiveInfo[actType]["commonRewardLv"] = data["commonRewardLv"]
        self.WarmakesElfActiveInfo[actType]["seniorRewardLv"] = data["seniorRewardLv"]
        self.WarmakesElfActiveInfo[actType]["isSenior"] = data["isSenior"]
        if not self.WarmakesElfActiveInfo[actType] then
            return
        end
        if not self.WarmakesElfActiveInfo[actType].id then
            self.WarmakesElfActiveInfo[actType].id = 1
        end
        if not self.WarmakesElfActiveInfo[actType].commonRewardLv then --普通奖励等级
            self.WarmakesElfActiveInfo[actType].commonRewardLv = 0
        end
        if not self.WarmakesElfActiveInfo[actType].seniorRewardLv then --高阶奖励等级
            self.WarmakesElfActiveInfo[actType].seniorRewardLv = 0
        end
        if not self.WarmakesElfActiveInfo[actType].isSenior then --是否充值过
            self.WarmakesElfActiveInfo[actType].isSenior = false
        end

        self.WarmakesElfActiveInfo[actType].curLv = info.records.curLevel or 0
        self.WarmakesElfActiveInfo[actType].curexp = info.records.curExp or 0
        local actData = ModelManager.ActivityModel:getActityByType(actType)
        if not actData then
            return
        end
        local moduId = actData.showContent.moduleId
        print(690, "-----------------------", moduId)
        self:setWarmakesElfActiveRealType(actType,moduId)
        local configInfo = DynamicConfigData.t_BpJlActiveUp[moduId][info.records.curLevel + 1]
        if not configInfo then
            self.WarmakesElfActiveInfo[actType].nextExp = info.records.curExp
        else
            self.WarmakesElfActiveInfo[actType].nextExp = configInfo.needExp
        end
    else
        self.WarmakesElfActiveInfo[actType]={}
    end
    self:upWarmakesElfActiveRed(actType)
end

function OperatingActivitiesModel:setWarmakesElfActiveRealType(actType,moduId)
    self.WarmakesElfActiveInfo[actType]["RealType"] =moduId
end

function OperatingActivitiesModel:getWarmakesElfActiveRealType(actType)
    -- local num = self.WarmakesElfActiveInfo[actType].id or 0
    -- local type = num % (#DynamicConfigData.t_BpJlActiveUp)
    -- if type == 0 then
    --     type = #DynamicConfigData.t_BpJlActiveUp
    -- end
    -- return type
    local type=1
    if not self.WarmakesElfActiveInfo[actType] then
       return  type
    end
    type=self.WarmakesElfActiveInfo[actType]["RealType"]
    if type then
        type=type
    end
    return type
end

--更新精灵战令红点
function OperatingActivitiesModel:upWarmakesElfActiveRed(actType)
    local red = false
    local configInfo = DynamicConfigData.t_BpJlActiveUp
    if actType==GameDef.ActivityType.ElfWarOrder or 
        actType==GameDef.ActivityType.BoundaryWarOrder or
        actType== GameDef.ActivityType.MazeWarOrder or 
        actType==  GameDef.ActivityType.EndlessRoadWarOrder or
        actType==  GameDef.ActivityType.HallowWarOrder  or
        actType==  GameDef.ActivityType.SmallElfWarOrder 
     then
        configInfo = DynamicConfigData.t_BpJlActiveUp
    end
    local type = self:getWarmakesElfActiveRealType(actType)
    local configreward = configInfo[type]
    if not configreward then
        return
    end
    local putonglingquLv = self.WarmakesElfActiveInfo[actType].commonRewardLv or 0
    local teshulingquLv = self.WarmakesElfActiveInfo[actType].seniorRewardLv or 0
    local curLv, curexp, nextExp = self:getWarmakesElfActiveLvAndExp(actType)
    for i = 1, #configreward, 1 do
        local rewardItem = configreward[i]
        local limitLv = rewardItem.level
        local putongstate = self:getWarmakesElfActiveRewardState(putonglingquLv, limitLv, curLv)
        local tesustate = self:getWarmakesElfActiveRewardState(teshulingquLv, limitLv, curLv)
        local tesuRed = false
        if self.WarmakesElfActiveInfo[actType].isSenior == true and tesustate == 1 then
            tesuRed = true
        end
        if putongstate == 1 or tesuRed then
            red = true
            break
        end
    end
    if actType==GameDef.ActivityType.ElfWarOrder or 
        actType==GameDef.ActivityType.BoundaryWarOrder or 
        actType==GameDef.ActivityType.MazeWarOrder or 
        actType==GameDef.ActivityType.EndlessRoadWarOrder or
        actType==  GameDef.ActivityType.HallowWarOrder  or
        actType==  GameDef.ActivityType.SmallElfWarOrder 
         then
        RedManager.updateValue("V_ACTIVITY_" .. actType, red)
    end
end

function OperatingActivitiesModel:getWarmakesElfActiveRewardState(lingquLv, limitLv, curLv)
    local state = 0
    if limitLv > lingquLv and curLv >= limitLv and curLv > lingquLv then --可领取
        state = 1
    else
        if limitLv <= lingquLv then --已领取
            state = 2
        elseif curLv < limitLv then --不可领取
            state = 3
        end
    end
    return state
end

function OperatingActivitiesModel:getWarmakesElfActiveLvAndExp(actType)
    local curLv = self.WarmakesElfActiveInfo[actType].curLv or 0
    local curexp = self.WarmakesElfActiveInfo[actType].curexp or 0
    local nextExp = self.WarmakesElfActiveInfo[actType].nextExp or 50
    return curLv, curexp, nextExp
end


function OperatingActivitiesModel:getWarmakesElfActiveAllExp(index, configInfo)
    local nextfigNum = 0
    for i = 1, index, 1 do
        local value = configInfo[i]
        if value then
            nextfigNum = nextfigNum + value.needExp
        end
    end
    return nextfigNum
end

function OperatingActivitiesModel:getWarmakesElfActiveAddNumLevel(actType,addNum)
    local num = 0
    local moduId = self:getWarmakesElfActiveRealType(actType)
    if moduId == 0 then
        return 1
    end
    local configInfo = false
    if actType==GameDef.ActivityType.ElfWarOrder or
        actType==  GameDef.ActivityType.BoundaryWarOrder  or
        actType== GameDef.ActivityType.MazeWarOrder or 
        actType== GameDef.ActivityType.EndlessRoadWarOrder or
        actType==  GameDef.ActivityType.HallowWarOrder  or
        actType==  GameDef.ActivityType.SmallElfWarOrder 
        then
        configInfo=  DynamicConfigData.t_BpJlActiveUp[moduId]
    end
    if not configInfo then
        return 1
    end
    local curLv, curexp, nextExp = self:getWarmakesElfActiveLvAndExp(actType)
    if actType==GameDef.ActivityType.ElfWarOrder or
        actType== GameDef.ActivityType.BoundaryWarOrder or
        actType== GameDef.ActivityType.MazeWarOrder or 
        actType== GameDef.ActivityType.EndlessRoadWarOrder or
        actType==  GameDef.ActivityType.HallowWarOrder  or
        actType==  GameDef.ActivityType.SmallElfWarOrder 
        then
        for i = 1, curLv, 1 do
            num= num+configInfo[i].needExp
        end
        num=num+curexp
    end
    local level=1
    local nextfigNum = 0
    for i = 1, #configInfo, 1 do
        local value = configInfo[i]
        if value then
            nextfigNum = nextfigNum + value.needExp
            if nextfigNum>= num+addNum then
                level=value.level
                break
            end
            if i==#configInfo and num+addNum>=nextfigNum then
                level=value.level
                break
            end
        end
    end
    return level
end


--设置集星数据
function OperatingActivitiesModel:setPolestarActive(data)
    self.polestarActiveInfo = data
    if not self.polestarActiveInfo then
        return
    end
    if not self.polestarActiveInfo.recvMark then
        self.polestarActiveInfo.recvMark = 0
    end
    if not self.polestarActiveInfo.privilegeMark then
        self.polestarActiveInfo.privilegeMark = 0
    end
    if not self.polestarActiveInfo.topUp then
        self.polestarActiveInfo.topUp = 0
    end
    self:upPolestarActiveRed()
end

function OperatingActivitiesModel:upPolestarActiveRed()
    local hasStar = self.polestarActiveInfo.starTotal or 0
    local hasMoney = false
    if self.polestarActiveInfo.topUp ~= 0 then
        hasMoney = true
    end
    local ordinaryRed = false
    local speciaRed = false
    local configInfo = DynamicConfigData.t_ActiveCollectStar
    for key, value in pairs(configInfo) do
        local index = self:GetBitByIndex(self.polestarActiveInfo.recvMark, tonumber(key))
        if hasStar >= value.starNum and index == 0 then
            ordinaryRed = true
            break
        end
        if hasMoney == true and index ~= 0 then
            local speciaIndex = self:GetBitByIndex(self.polestarActiveInfo.privilegeMark, tonumber(key))
            if speciaIndex == 0 then
                speciaRed = true
                break
            end
        end
    end
    if ordinaryRed == true or speciaRed == true then
        RedManager.updateValue("V_ACTIVITY_" .. GameDef.ActivityType.CollectStar, true)
    else
        RedManager.updateValue("V_ACTIVITY_" .. GameDef.ActivityType.CollectStar, false)
    end
end

--集星活动界面数据
function OperatingActivitiesModel:getcollectStarconfigInfo(isSort)
    local temp = {}
    local configInfo = DynamicConfigData.t_ActiveCollectStar
    for key, value in pairs(configInfo) do
        local index = self:GetBitByIndex(self.polestarActiveInfo.recvMark, tonumber(key))
        local speciaIndex = self:GetBitByIndex(self.polestarActiveInfo.privilegeMark, tonumber(key))
        if index ~= 0 and speciaIndex ~= 0 then
            value["getRewardIdex"] = 1
        else
            value["getRewardIdex"] = 0
        end
        temp[#temp + 1] = value
    end
    if isSort == true then
        TableUtil.sortByMap(temp, {{key = "getRewardIdex", asc = false}, {key = "id", asc = false}})
    end
    return temp
end


function OperatingActivitiesModel:setLimitedmarkeActiveInfo(info)
    self.LimitedmarkeActiveInfo = info
    self:Limitedmarkered()
end

function OperatingActivitiesModel:Limitedmarkered() --限时商城红点
    GlobalUtil.delayCallOnce(
        "OperatingActivitiesModel:Limitedmarkered",
        function()
            self:updateLimitedmarkeRed()
        end,
        self,
        0.1
    )
end

function OperatingActivitiesModel:updateLimitedmarkeRed()
    local dayStr = DateUtil.getOppostieDays()
    local isShow = FileCacheManager.getBoolForKey("LimitedmarketView_isShow" .. dayStr, false)
    local zeroLingqu = self:getLimitedmarkeLingquState()
    RedManager.updateValue("V_ACTIVITY_" .. GameDef.ActivityType.LimitGift, (not isShow) or zeroLingqu)
end

function OperatingActivitiesModel:getLimitedmarkeLingquState()
    local red = false
    local activeInfo = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.LimitGift)
    if activeInfo and activeInfo.showContent and activeInfo.showContent.data then
        local rewardInfo = activeInfo.showContent.data
        for key, value in pairs(rewardInfo) do
            local id = value.id
            local price = value.price
            local time = value.times
            if price == 0 then
                local lingquList = self.LimitedmarkeActiveInfo
                if not lingquList then
                    red = true
                end
                local useTime = 0
                if lingquList[id] and lingquList[id].times ~= nil then
                    useTime = lingquList[id].times
                end
                if lingquList[id] and useTime >= time then --已售罄
                    red = false
                else
                    red = true
                end
            end
        end
    end
    return red
end

function OperatingActivitiesModel:getEightDayAnim(com, pos) --八日登录可领取特效
    local animation = false
    if not pos then
        pos = Vector2.zero
    end
    animation =
        SpineUtil.createSpineObj(
        com,
        {x = 0, y = 0},
        "biankuang",
        "Effect/UI",
        "qiriqiandao_wupinkuang",
        "qiriqiandao_wupinkuang",
        false
    )
    animation:setAnimation(0, "biankuang", true)
    return animation
end

--限时商城界面数据
function OperatingActivitiesModel:getLimitedmarkeConfigInfo(isSort)
    local temp = {}
    local activeInfo = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.LimitGift)
    if activeInfo.showContent and activeInfo.showContent.data then
        local configInfo = activeInfo.showContent.data
        for key, value in pairs(configInfo) do
            local lingqu = false
            local id = value.id
            local time = value.times
            local lingquList = self.LimitedmarkeActiveInfo
            if not lingquList then
                lingqu = false
            end
            local useTime = 0
            if lingquList[id] and lingquList[id].times ~= nil then
                useTime = lingquList[id].times
            end
            if lingquList[id] and useTime >= time then
                lingqu = true --已售罄
            end
            if lingqu then
                --已售罄
                value["getRewardIdex"] = 1
            else
                value["getRewardIdex"] = 0
            end
            temp[#temp + 1] = value
        end
        if isSort == true then
            TableUtil.sortByMap(temp, {{key = "getRewardIdex", asc = false}, {key = "id", asc = false}})
        end
    end
    return temp
end

--#获取集星状态
function OperatingActivitiesModel:getServerCollectStarInfo()
    printTable(12, "获取集星状态")
    local function success(params)
        printTable(12, "获取集星状态请求返回", params)
        if params then
            ModelManager.OperatingActivitiesModel:setPolestarActive(params)
        end
        Dispatcher.dispatchEvent(EventType.activity_PolestarActiveupdate)
    end
    local info = {}

    RPCReq.Activity_CollectStar_Info(info, success)
end

--#集星奖励
function OperatingActivitiesModel:collectStarRecieveReward(gear, type)
    local info = {
        gear = gear, --0:integer #要领取档位
        type = type --1:integer #1普通奖励 , 2 特权
    }
    printTable(12, "领取集星奖励", info)
    RPCReq.Activity_CollectStar_RecieveReward(info)
end

--#领取每日累充奖励
function OperatingActivitiesModel:AccChargeDayRecieveReward(activityType,id)
    local info = {
        id = id,    --				0:integer #领取的序号
        activityType=activityType
    }
    printTable(21, "领取领取每日累充奖励", info)
    RPCReq.Activity_AccChargeDay_RecvReward(info)
end

--#领取任意充值奖励
function OperatingActivitiesModel:wantChargeRecvReward(activityType,id)
    local info = {
        activityType= activityType,           --0:integer   #玩法类型
        id =id             --1:integer   #奖励id
    }
    printTable(21, "领取任意充值奖励奖励", info)
    RPCReq.Activity_WantCharge_RecvReward(info)
end

--#领取累充奖励
function OperatingActivitiesModel:AccChargeRecieveReward(id)
    local info = {
        id = id
        --				0:integer #领取的序号
    }
    printTable(21, "领取累充奖励", info)
    RPCReq.Activity_AccCharge_RecvReward(info)
end

--#领取战令领取奖励
function OperatingActivitiesModel:WarOrderGetReward()
    print(69,"WarOrderGetReward==========================")
    local info = {}
    printTable(21, "领取战令领取奖励", info)
    RPCReq.Activity_WarOrder_GetReward(info)
end

--#领取精灵战令奖励
function OperatingActivitiesModel:ewWarOrder_GetReward(actType)
    local info = {
        activityType =actType		--1:integer #活动类型 
    }
    printTable(69, "领取精灵战令奖励", info)
    RPCReq.Activity_NewWarOrder_GetReward(info)
end

--#领取限时商城0元奖励
function OperatingActivitiesModel:getActivityLimitGiftReward(id)
    local info = {
        id = id
    }
    printTable(152, "领取限时商城0元奖励", info)
    RPCReq.Activity_LimitGift_Reward(info)
end

--#特性觉醒奖励
function OperatingActivitiesModel:FeaturesRecieveReward(id)
    local info = {
        id = id
        --				0:integer #领取的序号
    }
    printTable(21, "领取累充奖励", info)
    RPCReq.Activity_Features_Reward(info)
end

--##领取聂隐降临奖励
function OperatingActivitiesModel:HeroComeRecieveReward(activityId, id)
    local info = {
        activityId = activityId, --1:integer	#活动id
        id = id --2:integer	#领取任务id
    }
    printTable(21, "领取聂隐降临奖励", info)
    RPCReq.Activity_HeroCome_RecieveReward(info)
end

--##领取新手任务奖励
function OperatingActivitiesModel:primaryTaskRecieveReward(activityId, id)
    local info = {
        activityId = activityId, --1:integer	#活动id
        id = id --2:integer	#领取任务id
    }
    printTable(21, "领取新手任务奖励", info)
    RPCReq.Activity_PrimaryTask_RecieveReward(info)
end

--##精灵收集
function OperatingActivitiesModel:ElvestoCollectRecieveReward(activityId, id)
    local info = {
        activityId = activityId, --1:integer	#活动id
        id = id
    }
    printTable(21, "领取精灵收集任务奖励", info)
    RPCReq.Activity_ElfCollection_GetRewardReq(info)
end

--##精灵召唤
function OperatingActivitiesModel:ElvesCalledRecieveReward(activityId, id)
    local info = {
        activityId = activityId, --1:integer	#活动id
        id = id --2:integer	#领取任务id
    }
    printTable(21, "领取精灵召唤任务奖励", info)
    RPCReq.Activity_ElfSummon_GetRewardReq(info)
end

--#领取精灵商城0元奖励
function OperatingActivitiesModel:getElfGiftGetRewardReq(activityId, id)
    local info = {
        activityId = activityId, --1:integer	#活动id
        id = id --2:integer	#礼包id
    }
    printTable(152, "领取精灵商城0元奖励", info)
    RPCReq.Activity_ElfGift_GetRewardReq(info)
end

--#团购礼包0元奖励
function OperatingActivitiesModel:getUpBuyGiftOneBuyGift(isPrebuy)
    local info = {
        isPrebuy = isPrebuy, --1:integer	#活动id
    }
    printTable(152, "领取团购礼包0元奖励", info)
    RPCReq.Activity_upBuyGift_oneBuyGift(info)
end

function OperatingActivitiesModel:updateRedPointCollectMap()
    local data = self.collectMap
    local state = false
    for key, value in pairs(data.boxTimesReward) do
        if value == 1 then
            state = true
            break
        end
    end
    for key, value in pairs(data.boxReward) do
        if value == 1 then
            state = true
            break
        end
    end
    for key = 1, 9 do
        local value = data.records[key + data.mapId * 9 - 9]
        if value and value.finish and not value.got then
            state = true
            break
        end
    end
    RedManager.updateValue("V_ACTIVITY_" .. GameDef.ActivityType.CollectMap, state)
end
--集图夺宝
function OperatingActivitiesModel:setCollectMap(data)
    self.collectMap = data
end
function OperatingActivitiesModel:getCollectMap()
    return self.collectMap
end
function OperatingActivitiesModel:CollectMapRedFirst() --活动出现红点
    GlobalUtil.delayCallOnce(
        "OperatingActivitiesModel:CollectMapRedFirst",
        function()
            local dayStr = DateUtil.getOppostieDays()
            local isShow = FileCacheManager.getBoolForKey("CollectMapRedFirst_isShow" .. dayStr, false)
            if not isShow then
                RedManager.updateValue("V_ACTIVITY_" .. GameDef.ActivityType.CollectMap, true)
            else
                self:updateRedPointCollectMap()
            end
        end,
        self,
        0.1
    )
end

--聂隐降临
function OperatingActivitiesModel:setNieYinComingMap(data)
    if data.records then
        self.NieYinComingMap = data.records
    else
        self.NieYinComingMap = {}
    end
    self.NieYinComingServerTime = data.startMs or 0
    self:setNieYinComingRed()
end
--聂隐降临任务
function OperatingActivitiesModel:setTaskNieYinComingMap(data)
    if data then
        if not self.NieYinComingMap[data.recordId] then
            self.NieYinComingMap[data.recordId] = {}
        end
        if data.acc ~= nil then
            self.NieYinComingMap[data.recordId]["acc"] = data.acc
        end
        if data.finish then
            self.NieYinComingMap[data.recordId]["finish"] = data.finish
        else
            self.NieYinComingMap[data.recordId]["finish"] = self.NieYinComingMap[data.recordId].finish
        end
        if data.got then
            self.NieYinComingMap[data.recordId]["got"] = data.got
        else
            self.NieYinComingMap[data.recordId]["got"] = self.NieYinComingMap[data.recordId].got
        end
    end
    self:setNieYinComingRed()
    Dispatcher.dispatchEvent(EventType.activity_nieYingComingUpdate)
end

--聂隐降临红点
function OperatingActivitiesModel:setNieYinComingRed()
    local red = false
    local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.HeroCome)
    if not actData then
        return
    end
    local configInfo = DynamicConfigData.t_HeroCome[actData.showContent.moduleId]
    if not configInfo then
        return
    end
    for i = 1, #configInfo, 1 do
        local itemConfig = configInfo[i]
        local taskId = itemConfig.id
        local num, lingqu = self:getNieYinComingLingquState(taskId)
        if lingqu == 1 then --可领取
            red = true
        end
    end
    RedManager.updateValue("V_ACTIVITY_" .. GameDef.ActivityType.HeroCome, red)
end

function OperatingActivitiesModel:getNieYinComingLingquState(taskId)
    local num = 0 --进度
    local lingqu = 0 --未完成
    if not self.NieYinComingMap or not self.NieYinComingMap[taskId] then
        return num, lingqu
    end
    local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.HeroCome)
    if not actData then
        return num, lingqu
    end
    local starInfo = DynamicConfigData.t_HeroCome[actData.showContent.moduleId]
    local configInfo = starInfo[taskId]
    if not configInfo then
        return num, lingqu
    end
    local taskInfo = self.NieYinComingMap[taskId]
    num = taskInfo.acc or 0
    local finish = {0}
    if taskInfo.finish ~= nil then
        finish = taskInfo.finish
    end
    local finishIndex = self:GetBitByIndex(finish[1], 1)
    local got = {0}
    if finishIndex ~= 0 and configInfo.reward == "" then --策划要求前两个格子特殊 只能有2种状态
        taskInfo["got"] = {1}
    end
    if taskInfo.got ~= nil then
        got = taskInfo.got
    end
    local gotIndex = self:GetBitByIndex(got[1], 1)
    if finishIndex == 0 then
        lingqu = 0
    elseif finishIndex ~= 0 and gotIndex == 0 then
        --可领取
        lingqu = 1
    elseif finishIndex ~= 0 and gotIndex ~= 0 then
        --已领取
        lingqu = 2
    else
        lingqu = 1
    end
    return num, lingqu
end

--开服福利
function OperatingActivitiesModel:setOpenTakeWelfareMap(data)
    if data.records then
        self.OpenTakeWelfare = data.records
    else
        self.OpenTakeWelfare = {}
    end
    self:setOpenTakeWelfareRed()
end
--开服福利任务
function OperatingActivitiesModel:setOpenTakeWelfareTaskMap(data)
    if data then
        if not self.OpenTakeWelfare[data.recordId] then
            self.OpenTakeWelfare[data.recordId] = {}
        end
        if data.acc ~= nil then
            self.OpenTakeWelfare[data.recordId]["acc"] = data.acc
        end
        if data.finish then
            self.OpenTakeWelfare[data.recordId]["finish"] = data.finish
        else
            self.OpenTakeWelfare[data.recordId]["finish"] = self.OpenTakeWelfare[data.recordId].finish
        end
        if data.got then
            self.OpenTakeWelfare[data.recordId]["got"] = data.got
        else
            self.OpenTakeWelfare[data.recordId]["got"] = self.OpenTakeWelfare[data.recordId].got
        end
    end
    self:setOpenTakeWelfareRed()
    Dispatcher.dispatchEvent(EventType.activity_OpenTakeWelfareTaskUpdate)
end

--开服福利红点
function OperatingActivitiesModel:setOpenTakeWelfareRed()
    local red = false
    local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.PrimaryTask)
    if not actData then
        return
    end
    local configInfo = DynamicConfigData.t_LotteryTicket[actData.showContent.moduleId]
    if not configInfo then
        return
    end
    for key, value in pairs(configInfo) do
        local taskId = configInfo[key].id
        local num, lingqu = self:getOpenTakeWelfareTaskState(taskId)
        if lingqu == 1 then
            red = true
        end
    end
    RedManager.updateValue("V_ACTIVITY_" .. GameDef.ActivityType.PrimaryTask, red)
end

function OperatingActivitiesModel:getOpenTakeWelfareMapInfo(isSort)
    local temp = {}
    local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.PrimaryTask)
    if not actData then
        return temp
    end
    local configInfo = DynamicConfigData.t_LotteryTicket[actData.showContent.moduleId]
    for key, value in pairs(configInfo) do
        local taskId = configInfo[key].id
        local num, lingqu = self:getOpenTakeWelfareTaskState(taskId)
        if lingqu == 2 then --已领取
            value["getRewardIdex"] = 2
        elseif lingqu == 0 then --未达成
            value["getRewardIdex"] = 1
        elseif lingqu == 1 then --可领取
            value["getRewardIdex"] = 0
        end
        temp[#temp + 1] = value
    end
    if isSort == true then
        TableUtil.sortByMap(temp, {{key = "getRewardIdex", asc = false}, {key = "id", asc = false}})
    end
    return temp
end

function OperatingActivitiesModel:getOpenTakeWelfareTaskState(taskId)
    local num = 0 --进度
    local lingqu = 0 --未完成
    if not self.OpenTakeWelfare or not self.OpenTakeWelfare[taskId] then
        return num, lingqu
    end
    local taskInfo = self.OpenTakeWelfare[taskId]
    num = taskInfo.acc or 0
    local finish = {0}
    if taskInfo.finish ~= nil then
        finish = taskInfo.finish
    end
    local finishIndex = self:GetBitByIndex(finish[1], 1)
    local got = {0}
    if taskInfo.got ~= nil then
        got = taskInfo.got
    end
    local gotIndex = self:GetBitByIndex(got[1], 1)
    if finishIndex == 0 then
        lingqu = 0
    elseif finishIndex ~= 0 and gotIndex == 0 then
        --可领取
        lingqu = 1
    elseif finishIndex ~= 0 and gotIndex ~= 0 then
        --已领取
        lingqu = 2
    else
        lingqu = 1
    end
    return num, lingqu
end

--精灵奇遇(精灵收集精灵召唤)
function OperatingActivitiesModel:setElvestoCollectActiveInfo(activityType, data)
    if data.records then
        self.spriteActivityInfo[activityType] = data.records
    else
        self.spriteActivityInfo[activityType] = {}
    end
end

--精灵奇遇(精灵收集精灵召唤)任务
function OperatingActivitiesModel:setElvestoCollectActiveTaskMap(activityType, data)
    if data then
        if not self.spriteActivityInfo[activityType] then
            self.spriteActivityInfo[activityType] = {}
        end
        if not self.spriteActivityInfo[activityType][data.recordId] then
            self.spriteActivityInfo[activityType][data.recordId] = {}
        end
        if data.acc ~= nil then
            self.spriteActivityInfo[activityType][data.recordId]["acc"] = data.acc
        end
        if data.finish then
            self.spriteActivityInfo[activityType][data.recordId]["finish"] = data.finish
        else
            self.spriteActivityInfo[activityType][data.recordId]["finish"] =
                self.spriteActivityInfo[activityType][data.recordId].finish
        end
        if data.got then
            self.spriteActivityInfo[activityType][data.recordId]["got"] = data.got
        else
            self.spriteActivityInfo[activityType][data.recordId]["got"] =
                self.spriteActivityInfo[activityType][data.recordId].got
        end
    end
    if activityType == GameDef.ActivityType.ElfCollection then
        Dispatcher.dispatchEvent(EventType.activity_ElvestoCollectUpdate)
    elseif activityType == GameDef.ActivityType.ElfSummon then
        Dispatcher.dispatchEvent(EventType.activity_ElvestoElfSummontUpdate)
    end
    self:elvestoCollectActiveRed(activityType)
end

function OperatingActivitiesModel:elvestoCollectActiveRed(activityType) -- 精灵收集精灵召唤
    if activityType == GameDef.ActivityType.ElfCollection then --精灵收集
        GlobalUtil.delayCallOnce(
            "OperatingActivitiesModel:elvestoCollectActiveRed1",
            function()
                self:updateElvestoCollectActiveRed(activityType)
            end,
            self,
            0.1
        )
    elseif activityType == GameDef.ActivityType.ElfSummon then --精灵召唤
        GlobalUtil.delayCallOnce(
            "OperatingActivitiesModel:elvestoCollectActiveRed2",
            function()
                self:updateElvestoCollectActiveRed(activityType)
            end,
            self,
            0.1
        )
    end
end

function OperatingActivitiesModel:updateElvestoCollectActiveRed(type)
    local dayStr = DateUtil.getOppostieDays()
    local isShow = false
    local zeroLingqu = false
    if type == GameDef.ActivityType.ElfCollection then
        isShow = FileCacheManager.getBoolForKey("ElvestoCollectActiveView_isShow" .. dayStr, false)
        zeroLingqu = self:getElvestoCollectActiveRed(type)
    elseif type == GameDef.ActivityType.ElfSummon then
        zeroLingqu = self:getElvestoCollectActiveRed(type)
        isShow = FileCacheManager.getBoolForKey("ElvesCalledActiveView_isShow" .. dayStr, false)
    end
    RedManager.updateValue("V_ACTIVITY_" .. type, (not isShow) or zeroLingqu)
end

function OperatingActivitiesModel:getElvestoCollectActiveRed(type)
    local red = false
    local configInfo = {}
    if type == GameDef.ActivityType.ElfCollection then
        configInfo = DynamicConfigData.t_ElfCollectActivity
    elseif type == GameDef.ActivityType.ElfSummon then
        configInfo = DynamicConfigData.t_ElfRecallActivity
    end
    for key, value in pairs(configInfo) do
        local taskId = configInfo[key].id
        local num, lingqu = self:getElvestoCollectActiveState(type,taskId)
        if lingqu == 1 then
            red = true
        end
    end
    return red
end

function OperatingActivitiesModel:getElvestoCollectActiveMapInfo(actType, isSort)
    local temp = {}
    local configInfo = {}
    if actType == GameDef.ActivityType.ElfCollection then
        configInfo = DynamicConfigData.t_ElfCollectActivity
    elseif actType == GameDef.ActivityType.ElfSummon then
        configInfo = DynamicConfigData.t_ElfRecallActivity
    end
    for key, value in pairs(configInfo) do
        local taskId = configInfo[key].id
        local num, lingqu = self:getElvestoCollectActiveState(actType, taskId)
        if lingqu == 2 then --已领取
            value["getRewardIdex"] = 2
        elseif lingqu == 0 then --未达成
            value["getRewardIdex"] = 1
        elseif lingqu == 1 then --可领取
            value["getRewardIdex"] = 0
        end
        temp[#temp + 1] = value
    end
    if isSort == true then
        TableUtil.sortByMap(temp, {{key = "getRewardIdex", asc = false}, {key = "id", asc = false}})
    end
    return temp
end

function OperatingActivitiesModel:getElvestoCollectActiveState(activityType, taskId)
    local num = 0 --进度
    local lingqu = 0 --未完成
    if not self.spriteActivityInfo[activityType] or not self.spriteActivityInfo[activityType][taskId] then
        return num, lingqu
    end
    local taskInfo = self.spriteActivityInfo[activityType][taskId]
    num = taskInfo.acc or 0
    local finish = {0}
    if taskInfo.finish ~= nil then
        finish = taskInfo.finish
    end
    local finishIndex = self:GetBitByIndex(finish[1], 1)
    local got = {0}
    if taskInfo.got ~= nil then
        got = taskInfo.got
    end
    local gotIndex = self:GetBitByIndex(got[1], 1)
    if finishIndex == 0 then
        lingqu = 0
    elseif finishIndex ~= 0 and gotIndex == 0 then
        --可领取
        lingqu = 1
    elseif finishIndex ~= 0 and gotIndex ~= 0 then
        --已领取
        lingqu = 2
    else
        lingqu = 1
    end
    return num, lingqu
end


--符文商城
--function OperatingActivitiesModel:setRuneActivelInfo(info)
	--if info.records then
		--self.RuneActivelInfo = info.records
	--else
		--self.RuneActivelInfo={}
	--end
--end

--精灵商城
function OperatingActivitiesModel:setElvesmalActivelInfo(info,activityType)
    if info then
        self.ElvesmalActivelInfo[activityType] = info
    else
        self.ElvesmalActivelInfo[activityType]={}
    end
end



function OperatingActivitiesModel:ElvesmalActiveRed(type) --限时商城红点
	local activityType =type or GameDef.ActivityType.ElfGift
    GlobalUtil.delayCallOnce(
        "OperatingActivitiesModel:ElvesmalActiveRed",
        function()
            self:updateElvesmalActivelRed(activityType)
        end,
        self,
        0.1
    )
end

function OperatingActivitiesModel:updateElvesmalActivelRed(activityType)
    local dayStr = DateUtil.getOppostieDays()
    local isShow = FileCacheManager.getBoolForKey(activityType.."ElvesmalActivelView_isShow" .. dayStr, false)
	printTable(5656,isShow,"isShow")
    local zeroLingqu = self:getElvesmalActiveState(activityType)
	printTable(5656,zeroLingqu,"zeroLingqu")
    RedManager.updateValue("V_ACTIVITY_" .. activityType, (not isShow) or zeroLingqu)
end

--精灵商城界面数据
function OperatingActivitiesModel:getElvesmalActiveConfigInfo(isSort,type)
    local temp = {}
	
	local activityType=type or GameDef.ActivityType.ElfGift
	
	--local receivedData=false
	
	--if activityType==GameDef.ActivityType.ElfGift then
		--receivedData=self.ElvesmalActivelInfo
	--end
	--if activityType==GameDef.ActivityType.RuneShop then
		--receivedData=self.RuneActivelInfo
	--end

    local activeInfo = ModelManager.ActivityModel:getActityByType(activityType)
    if activeInfo.showContent and activeInfo.showContent.data then
        local configInfo = activeInfo.showContent.data
        for key, value in pairs(configInfo) do
            local lingqu = false
            local id = value.id
            local time = value.times
            local lingquList = self.ElvesmalActivelInfo[activityType] 
            if not lingquList then
                lingqu = false
            end
            local useTime = 0
            if lingquList[id] and lingquList[id].count ~= nil then
                useTime = lingquList[id].count 
            end
            if lingquList[id] and useTime >= time then
                lingqu = true --已售罄
            end
            if lingqu then
                --已售罄
                value["getRewardIdex"] = 1
            else
                value["getRewardIdex"] = 0
            end
            temp[#temp + 1] = value
        end
        if isSort == true then
            TableUtil.sortByMap(temp, {{key = "getRewardIdex", asc = false}, {key = "id", asc = false}})
        end
    end
    return temp
end


function OperatingActivitiesModel:getElvesmalActiveState(activityType)
    local red = false
    local activeInfo = ModelManager.ActivityModel:getActityByType(activityType)
    if activeInfo and activeInfo.showContent and activeInfo.showContent.data then
        local rewardInfo = activeInfo.showContent.data
        for key, value in pairs(rewardInfo) do
            local id = value.id
            local price = value.price
            local time = value.times
            if price == 0 then
                local lingquList = self.ElvesmalActivelInfo[activityType]
                if not lingquList then
                    red = true
                end
                local useTime = 0
                if lingquList[id] and lingquList[id].count ~= nil then
                    useTime = lingquList[id].count
                end
                if lingquList[id] and useTime >= time then --已售罄
                    red = false
                else
                    red = true
                end
            end
        end
    end
    return red
end
--新英雄活动
function OperatingActivitiesModel:setHeroBossShopData(data)
    self.heroBossShopData = data
end
function OperatingActivitiesModel:getHeroBossShopData()
    return self.heroBossShopData
end
function OperatingActivitiesModel:setHeroBossData(data)
    self.heroBossData = data
	RedManager.updateValue("V_ACTIVITY_" .. GameDef.ActivityType.NewHeroCopy,self.heroBossData.leftTimes >= 1)
end
function OperatingActivitiesModel:getHeroBossData()
    return self.heroBossData
end
function OperatingActivitiesModel:setHeroBossRedFirst() --活动出现红点
	GlobalUtil.delayCallOnce(
	"OperatingActivitiesModel:setHeroBossRedFirst",
	function()
		local dayStr = DateUtil.getOppostieDays()
		local isShow = FileCacheManager.getBoolForKey("setHeroBossRedFirst_isShow" .. dayStr, false)
		if not isShow then
			RedManager.updateValue("V_ACTIVITY_" .. GameDef.ActivityType.NewHeroCopy, true)
		end
	end,self,0.1)
end
function OperatingActivitiesModel:setHeroBossShopRedFirst() --活动出现红点
	local t_NewHeroShop = DynamicConfigData.t_NewHeroShop
	local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.NewHeroShop)
	local moduleId = actData and actData.showContent.moduleId or 1
	local showData = t_NewHeroShop[moduleId]
	local showState = false
	for key,value in pairs(showData) do
		local count = 0
		if self.heroBossShopData.buyRecords and self.heroBossShopData.buyRecords[key] then
			count = self.heroBossShopData.buyRecords[key].count
		end
		local num = ModelManager.PlayerModel:getMoneyByType(value.price[1].code)
		if num > value.price[1].amount and value.reward[1].amount - count > 0 then
			showState = true
			break
		end
	end
	GlobalUtil.delayCallOnce(
	"OperatingActivitiesModel:setHeroBossShopRedFirst",
	function()
		local dayStr = DateUtil.getOppostieDays()
		local isShow = FileCacheManager.getBoolForKey("setHeroBossShopRedFirst_isShow" .. dayStr, false)
		RedManager.updateValue("V_ACTIVITY_" .. GameDef.ActivityType.NewHeroShop, not isShow and showState)
	end,self,0.1)
end




--团购礼包数据
function OperatingActivitiesModel:setGroupBuyInfo(type, data)
    self.groupBuyInfo[type] = data
    if not self.groupBuyInfo[type] then
        return
    end
    self:upGroupBuyRed(type)
end

function OperatingActivitiesModel:upGroupBuyRed(type)
    local isShow= GuildModel:getguildFirstLoginState(type.."GroupBuyRed")
    RedManager.updateValue("V_ACTIVITY_" .. type, isShow)
end

function OperatingActivitiesModel:getGroupBuyState(type)
    local state=0--0可预订1已预订但无法购买2可购买3已购买
    if not self.groupBuyInfo[type]  then
        return state
    end 
    local serverInfo=self.groupBuyInfo[type]
     if serverInfo.isPreBuy==true and serverInfo.hasPreBuy==false  then
        state=0
     elseif serverInfo.isPreBuy==true and serverInfo.hasPreBuy==true then
        state=1
    elseif serverInfo.isPreBuy==false and serverInfo.hasBuy==false  then
        state=2
    elseif serverInfo.isPreBuy==false and serverInfo.hasBuy==true  then
        state=3
    else
        state=0
     end   
    return state
end

-- 获取模板id
function OperatingActivitiesModel:getModuleId(type)
  local moduleId = 1
  local actData = ModelManager.ActivityModel:getActityByType(type)
  moduleId = actData and actData.showContent.moduleId or 1
  -- printTable(8848,">>actData>>",actData)
  return moduleId
end

function OperatingActivitiesModel:getGroupYudingState(type)--等到是够预定过
    local state=0
    if not self.groupBuyInfo[type]  then
        return 0
    end 
    local serverInfo=self.groupBuyInfo[type]
    if serverInfo and serverInfo.hasPreBuy==true then
        state= 1
    end
    return state
end

function OperatingActivitiesModel:getGroupYudingNum(type)
    local num=0
    if not self.groupBuyInfo[type]  then
        return 0
    end 
    local serverInfo=self.groupBuyInfo[type]
    num= serverInfo.PreBuyNum or 0
    return num
end

return OperatingActivitiesModel
