--Name : ElvesCalledActiveView.lua
--Author : generated by FairyGUI
--Date : 2020-5-29
--Desc : 精灵召唤

local ElvesCalledActiveView, Super = class("ElvesCalledActiveView", Window)
function ElvesCalledActiveView:ctor()
    LuaLog("ElvesCalledActiveView ctor")
    self._packName = "OperatingActivities"
    self._compName = "ElvesCalledActiveView"
    --self._rootDepth = LayerDepth.Window
    self.viewIndexTag = GameDef.ActivityType.ElfSummon
    self.starInfo = false
    self.bannerUrl = false
    self.calltimer = false
end

function ElvesCalledActiveView:_initEvent()
end

function ElvesCalledActiveView:_initVM()
    local vmRoot = self
    local viewNode = self.view
    ---Do not modify following code--------
    --{vmFields}:OperatingActivities.ElvesCalledActiveView
    vmRoot.list_item = viewNode:getChildAutoType("$list_item")
    --list
    vmRoot.txt_countDown = viewNode:getChildAutoType("$txt_countDown")
    --text
    vmRoot.bannerIconLoader = viewNode:getChildAutoType("bannerIconLoader")
    --loader
    --{vmFieldsEnd}:OperatingActivities.ElvesCalledActiveView
    --Do not modify above code-------------
end

function ElvesCalledActiveView:setActType(_args)
end

function ElvesCalledActiveView:_initUI()
    self:_initVM()
    local dayStr = DateUtil.getOppostieDays()
    FileCacheManager.setBoolForKey("ElvesCalledActiveView_isShow" .. dayStr, true)
    OperatingActivitiesModel:elvestoCollectActiveRed(self.viewIndexTag)
    local actData = ModelManager.ActivityModel:getActityByType(self.viewIndexTag)
    if not actData then
        return
    end
    self.bannerIconLoader:setURL("Elf/"..actData.showContent.modelId..".png")
    self:showView()
end

function ElvesCalledActiveView:showCountTime()
    local actData = ModelManager.ActivityModel:getActityByType(self.viewIndexTag)
    if not actData then
        return
    end
    local actId = actData.id
    local status, addtime = ModelManager.ActivityModel:getActStatusAndLastTime(actId)
    if not addtime then
        return
    end
    if status == 2 and addtime == -1 then
        self.txt_countDown:setText(Desc.activity_txt5)
    else
        local lastTime = addtime / 1000
        if lastTime == -1 then
            self.txt_countDown:setText(Desc.activity_txt5)
        else
            if not tolua.isnull(self.txt_countDown) then
                self.txt_countDown:setText(TimeLib.GetTimeFormatDay(lastTime, 2))
            end
            local function onCountDown(time)
                if not tolua.isnull(self.txt_countDown) then
                    self.txt_countDown:setText(TimeLib.GetTimeFormatDay(time, 2))
                end
            end
            local function onEnd(...)
                if not tolua.isnull(self.txt_countDown) then
                    self.txt_countDown:setText(Desc.activity_txt13)
                end
            end
            if self.calltimer then
                TimeLib.clearCountDown(self.calltimer)
                self.calltimer = false
            end
            self.calltimer = TimeLib.newCountDown(lastTime, onCountDown, onEnd, false, false, false)
        end
    end
end

function ElvesCalledActiveView:showView()
    self:showCountTime()
    self.starInfo = OperatingActivitiesModel:getElvestoCollectActiveMapInfo(self.viewIndexTag, true)
    if not self.starInfo then
        return
    end
    self.list_item:setVirtual()
    self.list_item:setItemRenderer(
        function(index, obj)
            local starInfo = self.starInfo
            local itemInfo = starInfo[index + 1]
            local taskId = itemInfo.id
            obj:getChild("$txt_desc"):setText(itemInfo.desc)
            local num, lingqu = OperatingActivitiesModel:getElvestoCollectActiveState(self.viewIndexTag, taskId)
            local ctrl = obj:getController("c1")
            ctrl:setSelectedIndex(lingqu)
            local ctr2 = obj:getController("c2")
            if lingqu == 2 then
                ctr2:setSelectedIndex(1)
            else
                ctr2:setSelectedIndex(0)
            end
            obj:getChild("txt_count"):setText(string.format("(%s/%s)", num, itemInfo.count))
            local list_prop = obj:getChild("$list_prop")
            list_prop:setItemRenderer(
                function(idx2, obj2)
                    local reewardItemC = obj2:getController("c1")
                    if lingqu == 2 then
                        reewardItemC:setSelectedIndex(1)
                    else
                        reewardItemC:setSelectedIndex(0)
                    end
                    obj2:removeClickListener(100)
                    --池子里面原来的事件注销掉
                    local itemMode = obj2:getChildAutoType("itemCell")
                    local itemcell1 = BindManager.bindItemCell(itemMode)
                    local award = itemInfo.reward[idx2 + 1]
                    itemcell1:setData(award.code, award.amount, award.type)
                end
            )
            list_prop:setNumItems(#itemInfo.reward)
            local btn = obj:getChild("$btn_get") -- 领取按钮
            local btn_imgred= btn:getChildAutoType("img_red")
            if lingqu==1 then
                btn_imgred:setVisible(true)
            else
                btn_imgred:setVisible(false)
            end
            btn:removeClickListener(100)
            btn:addClickListener(
                function()
                    local actData = ModelManager.ActivityModel:getActityByType(self.viewIndexTag)
                    if not actData then
                        return
                    end
                    OperatingActivitiesModel:ElvesCalledRecieveReward(actData.id, taskId)
                end,
                100
            )
            --ModuleUtil.openModule(ModuleId.Hero.id, true)
        end
    )
    self.list_item:setNumItems(#self.starInfo)
end

function ElvesCalledActiveView:activity_ElvestoElfSummontUpdate(...)
    self.starInfo = OperatingActivitiesModel:getElvestoCollectActiveMapInfo(self.viewIndexTag, true)
    self.list_item:setNumItems(#self.starInfo)
end

function ElvesCalledActiveView:_exit()
    if self.calltimer then
        TimeLib.clearCountDown(self.calltimer)
    end
end

return ElvesCalledActiveView
