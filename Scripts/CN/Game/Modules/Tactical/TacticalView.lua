--Name : TacticalView.lua
--Author : generated by FairyGUI
--Date : 2020-4-15
--Desc :
local TacticalView, Super = class("TacticalView", Window)
function TacticalView:ctor(args)
	self._packName = "Tactical"
	self._compName = "TacticalView"
	self._rootDepth = LayerDepth.PopWindow
	
	self.fightPos = false
	self.infoBoard = false
	self.list_choose = false
	self.btn_use = false
	self.btn_use = false
	self.btn_active = false
	self.btn_tab_upgrade = false
	self.c1 = false
	
	self.allSeat = {} --所有的seat
	
	self.upgradeCost = false
	self.lastChooseItem = false
	self.arrayType = args.arrayType or GameDef.BattleArrayType.Chapters --当前阵容id(从哪个玩法点进来就是哪个)
	self._curTactical = ModelManager.TacticalModel:getCurTactical(self.arrayType) --当前选中的阵法

	self.path = args.path or "Map/100016.jpg"
end


function TacticalView:_initUI( )
	--信息面板
	self.fightPos = self.view:getChildAutoType("fightPos")
	self.infoBoard = self.view:getChildAutoType("infoBoard")
	self.vocationBoard = self.view:getChildAutoType("vocationBoard")
	self.list_choose = self.view:getChildAutoType("list_choose")
	self.btn_use = self.view:getChildAutoType("btn_use")
	self.btn_active = self.view:getChildAutoType("btn_active")
	self.btn_tab_upgrade = self.view:getChildAutoType("btn_tab_upgrade")
	self.btn_tabChoose = self.view:getChildAutoType("btn_tabChoose")
	self.str_selectHead = self.view:getChildAutoType("str_selectHead")
	self.btn_upgrade = self.infoBoard:getChildAutoType("btn_upgrade")
	self.powerStr = self.view:getChildAutoType("powerStr")
	self.txt_power = self.view:getChildAutoType("txt_power")
	self.strController = self.view:getController("descState")
	self.effet = self.view:getChild("effet")
	self.effet.spine = SpineUtil.createSpineObj(self.effet, vertex2(300,18), "animation2", "Spine/ui/fightPoint", "Ef_zongshanghai", "Ef_zongshanghai",false)
	self.effet.spine:setScaleX(2)
	self.effet.spine:setScaleY(1.5)
	self.view:getChildAutoType("touchPanel"):addClickListener(function()
		self.infoBoard:setVisible(false)
	end)
	self.view:getChildAutoType("frame/fullScreen"):setTouchable(false)
	if self.path then
		self.view:getChildAutoType("frame/fullScreen"):setIcon(self.path)
	end
	self.c1 = self.view:getController("c1")

	local clickBg = self.vocationBoard:getChildAutoType("clickBg")
	clickBg:addClickListener(function()
		self.vocationBoard:setVisible(false)
	end)
	local layer = 0
	for i = 1,3,1 do 
		for k = 1,2,1 do 
			local seat = self.fightPos:getChildAutoType("seatItem"..k..i)
			--seat:setVisible(false)
			local seatCell = BindManager.bindSeatItem(seat)
			layer = layer + 1
			seatCell.zIndex = layer
			local heroInfo = {}
			heroInfo.heroId = 0
			heroInfo.star = 0
			heroInfo.level = 0

			seatCell:setTacticalInfo(heroInfo)

			local index = k*10 + i
			seatCell.dragRect.seatId = index
			self.allSeat[index] = seatCell
			seatCell.index = index
			seatCell:initItemCell(0,0,0)
			seatCell:setIsTactical(true)
		end
	end
	--RedManager.register("V_TACTICAL_UPGRADENEW", self.btn_tab_upgrade:getChild("img_red"))
	--self:onChooseTactical(self._curTactical)
	self:updateChooseList(self._curTactical)
	self:updatePosModel()
	--self:onChooseTactical(self._curTactical)
	RedManager.updateValue("V_TACTICAL_ACTIVE",false)
	--RedManager.updateValue("V_TACTICAL_HAS_NEW", false)

	
end

function TacticalView:_initEvent( )
	
	if self._args.isTrain then
		self:toTrainNingUse()
		return 
	end
	
	self.btn_tabChoose:addClickListener(
		function(...)
			self.vocationBoard:setVisible(true)
		end
	)
	self.btn_tab_upgrade:addClickListener(
		function(...)
			self:updateChooseList(self._curTactical)

			self.infoBoard:setVisible(true)
			local unlockInfo = DynamicConfigData.t_TacticalUnlock
			local info = unlockInfo[self._curTactical]
			self:onChooseTactical(info.tactical)
		end
	)


	self.btn_use:addClickListener(
		function(...)
			if ModelManager.TacticalModel:isCurUsing(self.arrayType, self._curTactical) then
				RollTips.show(Desc.tactical_desc1)
				return
			end
			local combat = TacticalModel:getTacticalCombat(self.arrayType)
			local params = {}
			 params.arrayType = self.arrayType
			 params.tactical = self._curTactical
			 params.onSuccess = function( res )
				print(69,"Tactical_UseTactical")
				--printTable(1,res)
				ModelManager.TacticalModel:setTactical(res.arrayType, res.tactical)
				Dispatcher.dispatchEvent(EventType.showTactial_event2,true)
				Dispatcher.dispatchEvent(EventType.update_AddTopShow)
				local newCombat = TacticalModel:getTacticalCombat(self.arrayType)
				local combatAdd = newCombat - combat
				if combatAdd > 0 then
					self.strController:setSelectedIndex(0)
					self:showDesc(combatAdd)
				else
					self.strController:setSelectedIndex(2)
					self:showDesc()
				end
				ModelManager.TacticalModel:redCheck()
				Dispatcher.dispatchEvent(EventType.tatical_change)
				if tolua.isnull(self.view) then return end
				self:onChooseTactical(res.tactical)
				
			 end
			 RPCReq.Tactical_UseTactical(params, params.onSuccess)
		end
	)
	
	self.btn_upgrade:addClickListener(
		function(...)
			local level = ModelManager.TacticalModel:getTacticalLevel(self._curTactical)
			local info = DynamicConfigData.t_Tactical[self._curTactical][level + 1]
			if(not info ) then
				RollTips.show(DescAuto[255]) -- [255]="已满级"
				return
			end
	
			local combat = TacticalModel:getTacticalCombat(self.arrayType)
			local params = {}
			 params.tactical = self._curTactical
			 params.onSuccess = function( res )
				print(69,"Tactical_UpgradeTacticalLevel")
				--printTable(1,res)
				ModelManager.TacticalModel:updateTactical(res.tactical, res.level)
				
				local newCombat = TacticalModel:getTacticalCombat(self.arrayType)
				local combatAdd = newCombat - combat
				if combatAdd > 0 then
					self.strController:setSelectedIndex(1)
					self:showDesc(combatAdd)
				else
					self.strController:setSelectedIndex(3)
					self:showDesc()
				end
				ModelManager.TacticalModel:redCheck()
				Dispatcher.dispatchEvent(EventType.tatical_change)
				if tolua.isnull(self.view) then return end
				self:onChooseTactical(res.tactical)
			 end
			
			if ModelManager.PlayerModel:isCostEnough(self.upgradeCost) then
				RPCReq.Tactical_UpgradeTacticalLevel(params, params.onSuccess)
			end
		end
	)

	self.btn_active:addClickListener(
		function(...)
			local unlockInfo = DynamicConfigData.t_TacticalUnlock[self._curTactical]
			RollTips.show(string.format(Desc.tactical_active, unlockInfo.unlock))
		end
	)
end


--训练营使用的阵法设置
function TacticalView:toTrainNingUse()
	print(5656,"训练营的阵法设置")
	self.btn_tab_upgrade:setVisible(false)
	self.btn_tabChoose:setVisible(false)
	self.btn_use:setVisible(true)
	self.btn_use:addClickListener(function ()
			Dispatcher.dispatchEvent(EventType.tatical_change,{id=self._curTactical})
			ViewManager.close("TacticalView")
	end,101)
	
	local unlockInfo = DynamicConfigData.t_TacticalUnlock
	self.list_choose:setItemRenderer(
		function(index, obj)
			local info = unlockInfo[index + 1]
			local level = 1
			obj:getChildAutoType("txt_lv"):setText(level)
			local taticalCell = BindManager.bindTacticalCell(obj:getChildAutoType("taticalCell"))
			taticalCell:setData(info.tactical)
			obj:getController("activeCtrl"):setSelectedIndex(0)
			local isActived = true
			obj:getController("showCtrl"):setSelectedIndex(isActived and 0 or 1)
			obj:getChildAutoType("taticalCell"):setGrayed(not isActived)
			obj:removeClickListener(100)
			obj:addClickListener(
				function(...)
					if self.lastChooseItem then
						self.lastChooseItem:getController("selectedCtrl"):setSelectedIndex(0)
					end
					obj:getController("selectedCtrl"):setSelectedIndex(1)
					self.lastChooseItem = obj
					self:onChooseTactical(info.tactical)
					self.btn_use:setVisible(true)
					self.btn_active:setVisible(false)
			end,100)
		end)
	self.list_choose:setNumItems(#unlockInfo)

	--选中当前项，让它滚动到可视范围
	local chooseIndex = 0
	for i,v in ipairs(unlockInfo) do
		if v.tactical == self._curTactical then
			chooseIndex = i - 1
		end
	end
	self.list_choose:setSelectedIndex(chooseIndex)
	self.list_choose:scrollToView(chooseIndex)
	self.lastChooseItem = self.list_choose:getChildAt(chooseIndex)
	self.lastChooseItem:getController("selectedCtrl"):setSelectedIndex(1)
	self:onChooseTactical(unlockInfo[chooseIndex + 1].tactical)
	
		
end



function TacticalView:showDesc(num)
	self.powerStr:setVisible(true)
	self.powerStr:displayObject():stopAllActions()
	if num then
		self.txt_power:displayObject():stopAllActions()
		self.txt_power:setText(0)
		local arr = {}
		local count = 18
		local time = 0.04
		for i = 1,count do
			table.insert(arr,cc.DelayTime:create(time))
			table.insert(arr,cc.CallFunc:create(function()
				local showNum = 0
				if num > 0 then
					showNum = "+" .. (time * i >= 1 and num or num * time * i)
				else
					showNum = time * i >= 1 and num or num * time * i
				end
				self.txt_power:setText(showNum)
			end))
		end
		self.txt_power:displayObject():runAction(cc.Sequence:create(arr))
	end
	local arr1 = {}
	table.insert(arr1,cc.DelayTime:create(1.2))
	table.insert(arr1,cc.CallFunc:create(function()
		self.powerStr:setVisible(false)
	end))
	self.powerStr:displayObject():runAction(cc.Sequence:create(arr1))

	self.effet.spine:setAnimation(0, "animation2", false)
end
function TacticalView:onChooseTactical(tactical)
	if tactical <= 0 then return end
	self._curTactical = tactical
	RedManager.register("V_TACTICAL_UPGRADE_"..tactical, self.btn_upgrade:getChild("img_red"))
	RedManager.register("V_TACTICAL_UPGRADE_"..tactical, self.btn_tab_upgrade:getChild("img_red"))
	self:updatePosAttrs(tactical)
	self:updateInfo(tactical)
	self.list_choose:setNumItems(self.list_choose:getNumItems())
	local info = DynamicConfigData.t_TacticalUnlock[self._curTactical]
	self.str_selectHead:setText(string.format("%s(%s)",info.name,info.describe))
end

--设置6个位置的属性, 这个只做展示，与阵法功能没太大关系
function TacticalView:updatePosModel()
	
	
	local heroInfos = ModelManager.TacticalModel:getSelfHeroList()
	for _,v in pairs(heroInfos) do
		local posItem = self.fightPos:getChildAutoType("seatItem"..v.seatId)
		local seatCell=BindManager.bindSeatItem(posItem)
		seatCell.dragRect.seatId = v.seatId
		seatCell.index = v.seatId
		seatCell:setTacticalInfo(v)
		self.allSeat[v.seatId] = seatCell
		local heroInfo = v
		if heroInfo then
			--posItem:setVisible(true)
			seatCell:initItemCell(heroInfo.heroId,heroInfo.star,heroInfo.level,nil,heroInfo.fashionId, heroInfo.uniqueWeaponLevel)
			seatCell.skeletonNode:setPosition({x = 0,y = 0})
		else
			--posItem:setVisible(false)
		end
				
	end
	require"Game.Modules.Tactical.TacticalDragManager".new(self.allSeat,self,self.arrayType)
end



--设置6个位置的属性
function TacticalView:updatePosAttrs(tactical)
	local level = ModelManager.TacticalModel:getTacticalLevel(tactical)
	local info = DynamicConfigData.t_Tactical[tactical][level]
	if(info) then
		for i = 1,6,1 do
			local obj = self.fightPos:getChildAutoType("posAttr"..i)
			local txt = obj:getChildAutoType("pos")
			txt:setText(info["standDescribe"..i])
			local index = obj:getChildAutoType("num"):setText(i)
		end
	end
end

--更新阵法选择列表
function TacticalView:updateChooseList(tactical)
	local unlockInfo = DynamicConfigData.t_TacticalUnlock
	self.list_choose:setItemRenderer(
        function(index, obj)
			local info = unlockInfo[index + 1]
			local level = ModelManager.TacticalModel:getTacticalLevel(info.tactical)
--			obj:getChildAutoType("txt_name"):setText(info.name)
--			obj:getChildAutoType("txt_type"):setText(info.describe)
			obj:getChildAutoType("txt_lv"):setText(level)
			local taticalCell = BindManager.bindTacticalCell(obj:getChildAutoType("taticalCell"))
			taticalCell:setData(info.tactical)
			RedManager.register("V_TACTICAL_UPGRADE_"..info.tactical, obj:getChildAutoType("img_red"))
--			obj:getController("usingCtrl"):setSelectedIndex(ModelManager.TacticalModel:isCurUsing(self.arrayType, info.tactical) and 1 or 0)
			obj:getController("activeCtrl"):setSelectedIndex(ModelManager.TacticalModel:isActived(info.tactical) and 0 or 1)
			
			local isActived = ModelManager.TacticalModel:isActived(info.tactical)
			obj:getController("showCtrl"):setSelectedIndex(isActived and 0 or 1)
			obj:getChildAutoType("taticalCell"):setGrayed(not isActived)

			obj:removeClickListener(100)
			obj:addClickListener(
				function(...)
					if self.lastChooseItem then
						self.lastChooseItem:getController("selectedCtrl"):setSelectedIndex(0)
					end
					obj:getController("selectedCtrl"):setSelectedIndex(1)
					self.lastChooseItem = obj
					self:onChooseTactical(info.tactical)
				end,100
			)
		end)
	self.list_choose:setNumItems(#unlockInfo)
	
	--选中当前项，让它滚动到可视范围
	local chooseIndex = 0
	for i,v in ipairs(unlockInfo) do
		if v.tactical == self._curTactical then
			chooseIndex = i - 1
		end
	end
	self.list_choose:setSelectedIndex(chooseIndex)
	self.list_choose:scrollToView(chooseIndex)
	self.lastChooseItem = self.list_choose:getChildAt(chooseIndex)
	self.lastChooseItem:getController("selectedCtrl"):setSelectedIndex(1)
	self:onChooseTactical(unlockInfo[chooseIndex + 1].tactical)
end

--更新信息面板
function TacticalView:updateInfo(tactical)
	if tactical <= 0 then return end
	if self.c1:getSelectedIndex() == 1 then
		--RedManager.updateValue("V_TACTICAL_UPGRADE_"..tactical, false)
	else
		if ModelManager.TacticalModel.lastActiveTactical == tactical then
--			RedManager.updateValue("V_TACTICAL_ACTIVE", false)
		end
	end
	local level = ModelManager.TacticalModel:getTacticalLevel(tactical)
	local unlockInfo = DynamicConfigData.t_TacticalUnlock[tactical]
	local allInfo = DynamicConfigData.t_Tactical[tactical]
	local info = allInfo[level + 1]
	local upgradeInfo = DynamicConfigData.t_TacticalUpgrade[tactical][level + 1]
	
	
	
	local txt_name = self.infoBoard:getChildAutoType("txt_name")
	local txt_desc = self.infoBoard:getChildAutoType("txt_desc")
	local list_attr = self.infoBoard:getChildAutoType("list_attr")
	local costBar = self.infoBoard:getChildAutoType("costBar")
	local maxCtrl = self.infoBoard:getController("maxCtrl")
	local loader_icon = self.infoBoard:getChildAutoType("icon_loader")
	local txt_zfPanel = self.infoBoard:getChildAutoType("txt_zfPanel")
	local infoBoardClose = self.infoBoard:getChildAutoType("btn_close")
	infoBoardClose:addClickListener(function()
		self.infoBoard:setVisible(false)
	end)
	loader_icon:setURL(PathConfiger.getTacticalBigIcon(tactical))	
	txt_name:setText(unlockInfo.name)

--	txt_desc:setText(string.format(Desc.tactical_desc, unlockInfo.describe, unlockInfo.describe1))
	txt_desc:setText(unlockInfo.describe1)
	txt_zfPanel:getChildAutoType("name"):setText(unlockInfo.describe)
	txt_zfPanel:getController("c1"):setSelectedIndex(tactical)
	local isUpgradeMode = self.c1:getSelectedIndex() == 1
	local isActived = ModelManager.TacticalModel:isActived(tactical)
	self.btn_use:setVisible(not isUpgradeMode and isActived)
	self.btn_active:setVisible(not isUpgradeMode and not isActived)
	self.btn_upgrade:setVisible(isActived)
	if ModelManager.TacticalModel:isCurUsing(self.arrayType, tactical) then
		self.btn_use:setTitle(DescAuto[313]) -- [313]="使用中"
	else
		self.btn_use:setTitle(DescAuto[314]) -- [314]="使  用"
	end

	--self.btn_use:setVisible(not isUpgradeMode and ModelManager.TacticalModel:isActived(tactical) and (not ModelManager.TacticalModel:isCurUsing(self.arrayType, tactical)))
	--self.btn_active:setVisible(not isUpgradeMode and not ModelManager.TacticalModel:isActived(tactical))
	
	--如果已经满级，显示当前等级的属性
	if not info then
		info = DynamicConfigData.t_Tactical[tactical][level]
		--self.btn_upgrade:setVisible(false)
		maxCtrl:setSelectedIndex(1)
	else
		--self.btn_upgrade:setVisible(ModelManager.TacticalModel:isActived(tactical))
		maxCtrl:setSelectedIndex(0)
	end
	list_attr:setItemRenderer(
        function(index, obj)
			local name = obj:getChildAutoType("name")
			name:setText(string.format(Desc.tactical_pos, (index)))
			local desc_txt =  obj:getChildAutoType("txt_desc")
			desc_txt:setText(allInfo[index].UpgradeDescribe)
			if index <= level then
				name:setColor(cc.c3b(16,151,23))
				desc_txt:setColor(cc.c3b(16,151,23))
			else
				name:setColor(cc.c3b(116,130,142))
				desc_txt:setColor(cc.c3b(116,130,142))
			end
		end)
	list_attr:setNumItems(6)
	--list_attr:scrollToView(level - 1)
	
	if upgradeInfo then
		local costBarItem = BindManager.bindCostBar(costBar)
		self.upgradeCost = upgradeInfo.prop
		costBarItem:setData(upgradeInfo.prop,false,false)
	end
end

function TacticalView:tatical_activeNew()
	self:updateChooseList(self._curTactical)
end
function TacticalView:_exit()
end
return TacticalView
