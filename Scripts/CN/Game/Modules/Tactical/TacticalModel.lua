--Name : TacticalModel.lua
--Author : generated by FairyGUI
--Date : 2020-4-15
--Desc : 


local TacticalModel = class("TacticalModel", BaseModel)


function TacticalModel:ctor()
	self.tacticalData = {}
	self.arrayTypeData = {}
	
	self.activeTactical = false --记录最后一个激活的阵法，如果这个不为空，需要出完奖励时显示激活窗口
	
	self.lastActiveTactical = false --记录最后一个激活的阵法,这个是给显示红点用的
	self.openFlag = false
	self.preOtherTacData = false
end

function TacticalModel:setPreOtherTacData(data)
	if data then
		self.preOtherTacData = data
	else
		self.preOtherTacData = false
	end
	Dispatcher.dispatchEvent(EventType.update_AddTopShow)
end

function TacticalModel:getPreOtherTacData()
    return self.preOtherTacData 
end

function TacticalModel:getOpenFlag()
	return self.openFlag
end

function TacticalModel:setOpenFlag(flag)
	self.openFlag = flag
end

function TacticalModel:init()

end

--获取阵法战力 
function TacticalModel:getTacticalCombat(arrayType)
	local tacticalId = self.arrayTypeData[arrayType]
	if tacticalId then
		local level = self.tacticalData[tacticalId]
		local info = DynamicConfigData.t_Tactical[tacticalId][level]
		if info then
			return info.combat
		end
	end
	return 0
end

--是否有已经激活的阵法
function TacticalModel:hasActivedTactical()
	for _,v in pairs(self.tacticalData) do
		return true
	end  
end

function TacticalModel:getCurTactical(arrayType)
	return self.arrayTypeData[arrayType] or 0
end

function TacticalModel:getTacticalLevel(tactical)
	return self.tacticalData[tactical] or 0
end

--是否当前使用中的
function TacticalModel:isCurUsing(arrayType, tactical)
	return self.arrayTypeData[arrayType] == tactical
end

--是否激活了
function TacticalModel:isActived(tactical)
	return self.tacticalData[tactical] ~= nil
end

--更新阵容使用的阵法
function TacticalModel:setTactical(arrayType, tactical)
	self.arrayTypeData[arrayType] = tactical
	Dispatcher.dispatchEvent(EventType.tactical_changeUseStatus)
end

--更新阵法等级
function TacticalModel:updateTactical(tactical, level)
	--改成升级是统一升级了
	for tactical,v in pairs(self.tacticalData) do
		self.tacticalData[tactical] = level	
	end
	self.tacticalData[tactical] = level  --可能有新激活的情况
end

function TacticalModel:upadteRedCondition()
	local redMap = {}
	for tactical,v in pairs(DynamicConfigData.t_TacticalUnlock) do
		table.insert(redMap, "V_TACTICAL_UPGRADE_"..tactical)
	end
	RedManager.addMap("V_TACTICAL_UPGRADENEW", redMap)
end


--登陆时的初始数据
function TacticalModel:setInitData(tacticalInfo)
	for _,v in pairs(tacticalInfo.tacticals) do
		self.tacticalData[v.tactical] = v.level
	end

	
	for _,v in pairs(tacticalInfo.arrays) do
		self.arrayTypeData[v.arrayType] = v.tactical
	end
	self:upadteRedCondition()
	self:redCheck(true)
end

--
function TacticalModel:getSelfHeroList()
	local heroCodeList={}
	for k, seat in pairs(BattleModel:getSeatInfos()) do
		if not seat.isEmpty then
			local heroInfo={}
			if seat.heroPos==BattleModel.HeroPos.player  and  not seat.isSub  then
				heroInfo.heroId=seat.heroId
				heroInfo.star=seat.star
				heroInfo.level=seat.level
				heroInfo.seatId=seat.seatId
				table.insert(heroCodeList,heroInfo)
			end
		end

	end
	return heroCodeList
end

function TacticalModel:redCheck(isInit)
	local state = false
	for tactical,level in pairs(self.tacticalData) do
		local nextLevelInfo = DynamicConfigData.t_TacticalUpgrade[tactical][level + 1]
		if nextLevelInfo then
			local enough = ModelManager.PlayerModel:isCostEnough(nextLevelInfo.prop, false) 
			RedManager.updateValue("V_TACTICAL_UPGRADE_"..tactical, enough)
			state = enough
		else
			RedManager.updateValue("V_TACTICAL_UPGRADE_"..tactical, false)
		end
	end
	if state then
		RedManager.updateValue("V_TACTICAL_UPGRADENEW", state)
	end
end

return TacticalModel
