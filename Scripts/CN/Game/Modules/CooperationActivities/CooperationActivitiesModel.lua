--Date :2021-01-16
--Author : generated by FairyGUI
--Desc : 协力活动数据

local CooperationActivitiesModel = class("CooperationActivities", BaseModel)

function CooperationActivitiesModel:ctor()
    self.CooperationInfo = {} -- 领地协战
    self.battleResult = {} --战斗结果
    self.CooperationShop = {}
    --兑换商城
    self.CooperationStore = {}
    --限时商城
end

function CooperationActivitiesModel:init()
end

function CooperationActivitiesModel:setCooperationRed(type)
    --领地协战与支援助力的红点
    local red = false
    local dayStr = DateUtil.getOppostieDays()
    local isShow = FileCacheManager.getBoolForKey("CooperationActivitieMainView_isShow" .. dayStr, false)
    local maininfo = self:getCooperationInfo(type) or {}
    local groupId = self:getActModuleId(type)
    local configInfo = DynamicConfigData.t_CooperationPersonalAward[groupId]
    local lingquMap = maininfo.scoreRewardMark or 0
    local mainRed = false
    local challengeTimes=0
    if maininfo.challengeTimes~=nil then
        challengeTimes=maininfo.challengeTimes
    end
    if  challengeTimes>0 then
        mainRed=true
    end
    for i = 1, 5, 1 do
        local limitValue = configInfo[i].min
        local score=0
        if maininfo.score~=nil then
            score=maininfo.score
        end
        local index = OperatingActivitiesModel:GetBitByIndex(lingquMap, configInfo[i].id)
        if  score>= limitValue and index == 0 then --可领取
            mainRed = true
            break
        end
    end
    local SupportRed = self:setCooperationSupportRed()
    if not isShow or mainRed or SupportRed then
        red = true
    end
    RedManager.updateValue("V_ACTIVITY_" .. type, red)
end

function CooperationActivitiesModel:setCooperationSupportRed()
    local red = false
    local info = self:getCooperationSupportInfo(GameDef.ActivityType.WorkTogetherAct) --得到支援助力数据
    local groupId = self:getActModuleId(GameDef.ActivityType.WorkTogetherAct)
    local configInfo = DynamicConfigData.t_CooperationHope[groupId]
    for key, value in pairs(configInfo) do
        local limitNum = value.num
        local helpNum = info.helpNum
        local lingquBit = info.helpRewardMark or 0
        local index = OperatingActivitiesModel:GetBitByIndex(lingquBit, value.id)
        if helpNum >= limitNum and index == 0 then --可领取
            red = true
            break
        end
    end
    if info and info.isHelped == false then
        red = true
    end
    RedManager.updateValue("V_CooperationActivitieCheatingRed", red)
    return red
end

function CooperationActivitiesModel:setCooperationLimitedShopRed(activeTag) --限时商店红点
    local red = false
    local groupId = self:getActModuleId(GameDef.ActivityType.WorkTogetherAct)
    local ConfigInfo = DynamicConfigData.t_CooperationShop[groupId]
    local goumaiMap = self:getStoreGoodsLingquList(activeTag)
    for key, value in pairs(ConfigInfo) do
        if value.price == 0 and goumaiMap and (not goumaiMap[value.id] or goumaiMap[value.id].num < value.buyLimit) then
            red = true
        end
    end
    RedManager.updateValue("V_ACTIVITY_" .. activeTag, red)
end

function CooperationActivitiesModel:getActModuleId(actType)
    local id = 1
    local actData = ModelManager.ActivityModel:getActityByType(actType)
    if not actData or not actData.showContent then
        return id
    end
    id = actData.showContent.moduleId
    return id
end

function CooperationActivitiesModel:setCooperationInfo(type, info)
    if not self.CooperationInfo[type] then
        self.CooperationInfo[type] = {}
    end
    self.CooperationInfo[type] = info
end

function CooperationActivitiesModel:setCooperationShop(type, info)
    if not self.CooperationShop[type] then
        self.CooperationShop[type] = {}
    end
    self.CooperationShop[type] = info
end

function CooperationActivitiesModel:setCooperationStore(type, info)
    if not self.CooperationStore[type] then
        self.CooperationStore[type] = {}
    end
    self.CooperationStore[type] = info
end

function CooperationActivitiesModel:setCommonUpdate(type, info)
    if not self.CooperationInfo[type] then
        self.CooperationInfo[type] = {}
    end
    self.CooperationInfo[type]["actDay"] = info.actDay
    self.CooperationInfo[type]["groupInfo"] = info.groupInfo
    self.CooperationInfo[type]["helpNum"] = info.helpNum
end

function CooperationActivitiesModel:getCooperationInfo(type) --得到领地协战数据
    local CooperationInfo = {}
    --领地协战
    if not self.CooperationInfo[type] or not next(self.CooperationInfo[type]) then
        return {}
    end
    CooperationInfo["actDay"] = self.CooperationInfo[type]["actDay"]
    --#活动的第X天
    CooperationInfo["score"] = self.CooperationInfo[type]["score"]
    --#领地协战积分
    CooperationInfo["challengeTimes"] = self.CooperationInfo[type]["challengeTimes"]
    --#剩余挑战次数
    CooperationInfo["scoreRewardMark"] = self.CooperationInfo[type]["scoreRewardMark"]
    -- #积分奖励,领奖位图标识
    CooperationInfo["groupInfo"] = self.CooperationInfo[type]["groupInfo"]
    --#关卡占领度信息
    CooperationInfo["useHeros"] = self.CooperationInfo[type]["useHeros"]
    --#已使用过的卡牌code列表
    return CooperationInfo
end

function CooperationActivitiesModel:getCooperationSupportInfo(type) --得到支援助力数据
    local CooperationSupport = {}
    --支援助力
    CooperationSupport["isHelped"] = self.CooperationInfo[type]["isHelped"]
    --#是否已助力
    CooperationSupport["helpRewardMark"] = self.CooperationInfo[type]["helpRewardMark"]
    --#助力奖励,领奖位图标识
    CooperationSupport["helpNum"] = self.CooperationInfo[type]["helpNum"]
    --#总助力值
    return CooperationSupport
end

function CooperationActivitiesModel:getCooperationShopInfo(type) --得到兑换商城已购买信息
    local CooperationShop = {}
    --兑换商城
    CooperationShop["actDay"] = self.CooperationShop[type]["actDay"]
    CooperationShop["itemList"] = self.CooperationShop[type]["itemList"] or {}
    --#兑换商城已购买信息
    return CooperationShop
end

function CooperationActivitiesModel:getCooperationStoreInfo(type) --得到限时商城信息
    local CooperationStore = {}
    --限时商城
    CooperationStore["actDay"] = self.CooperationStore[type]["actDay"] or 0
    CooperationStore["itemList"] = self.CooperationStore[type]["itemList"] or {}
    --#限时商城已购买信息
    return CooperationStore
end

function CooperationActivitiesModel:getCurGroupId(activeTag)
    local id = 1
    local maininfo = self:getCooperationInfo(activeTag)
    if maininfo and maininfo.groupInfo then
        id = maininfo.groupInfo.groupId
    end
    return id
end

function CooperationActivitiesModel:getGroupInfo(activeTag)
    local map = {}
    local maininfo = self:getCooperationInfo(activeTag)
    if maininfo and maininfo.groupInfo then
        map = maininfo.groupInfo
    end
    return map
end

function CooperationActivitiesModel:gettCooperationUseHeros(activeTag)
    return self:getCooperationInfo(activeTag).useHeros or {}
end

function CooperationActivitiesModel:getShopGoodsLingquList(activeTag)
    return self:getCooperationShopInfo(activeTag).itemList or {}
end

function CooperationActivitiesModel:gettCooperationUseHerosCodeList(activeTag)
    local map = {}
    local userCard = self:gettCooperationUseHeros(activeTag)
    for key, value in pairs(userCard) do
        map[value] = value
    end
    return map
end

function CooperationActivitiesModel:getShopGoodsInfo(activeTag) --兑换商店
    local temp = {}
    local groupId = self:getActModuleId(GameDef.ActivityType.WorkTogetherAct)
    local ConfigInfo = DynamicConfigData.t_CooperationExchange[groupId]
    local goumaiMap = self:getShopGoodsLingquList(activeTag)
    for key, value in pairs(ConfigInfo) do
        if goumaiMap and goumaiMap[value.id] and goumaiMap[value.id].num >= value.limit then
            value["getRewardIdex"] = 1
        else
            value["getRewardIdex"] = 0
        end
        temp[#temp + 1] = value
    end
    TableUtil.sortByMap(temp, {{key = "getRewardIdex", asc = false}, {key = "id", asc = false}})
    return temp
end

--限时商城界面数据

function CooperationActivitiesModel:getStoreGoodsLingquList(activeTag)
    return self:getCooperationStoreInfo(activeTag).itemList or {}
end

function CooperationActivitiesModel:getLimitedShopinfo(activeTag) --限时商城
    local temp = {}
    local groupId = self:getActModuleId(GameDef.ActivityType.WorkTogetherAct)
    local ConfigInfo = DynamicConfigData.t_CooperationShop[groupId]
    local goumaiMap = self:getStoreGoodsLingquList(activeTag)
    local actDay = self:getCooperationStoreInfo(activeTag).actDay
    for key, value in pairs(ConfigInfo) do
        if actDay >= value.sellDay[1] and actDay <= value.sellDay[2] then
            if goumaiMap and goumaiMap[value.id] and goumaiMap[value.id].num >= value.buyLimit then
                value["getRewardIdex"] = 1
            else
                value["getRewardIdex"] = 0
            end
            temp[#temp + 1] = value
        end
    end
    TableUtil.sortByMap(temp, {{key = "getRewardIdex", asc = false}, {key = "id", asc = false}})
    return temp
end

--协力大作战-挑战关卡
function CooperationActivitiesModel:WorkTogetherChallenge(groupId, id)
    local function success(data)
        printTable(5, "协力大作战挑战关卡返回成功", data)
        self.battleResult = data
    end
    local info = {
        groupId = groupId, --		1:integer #组id
        id = id --			2:integer #关卡id
    }
    printTable(5, "协力大作战", info)
    RPCReq.Activity_WorkTogether_Challenge(info, success)
end

--#协力大作战-保存挑战积分
function CooperationActivitiesModel:WorkTogetherSaveScore(type)
    local function success(data)
        printTable(5, "协力大作战-保存挑战积分成功", data)
        local servserInfo = self.CooperationInfo[type]
        servserInfo["score"] = data.score or 0 --#领地协战积分
        servserInfo["challengeTimes"] = data.challengeTimes or 0 --#剩余挑战次数
        servserInfo["groupInfo"] = data.groupInfo or {} --#关卡占领度信息
        servserInfo["useHeros"] = data.useHeros or {}
        --#已使用过的卡牌code列表
        Dispatcher.dispatchEvent(EventType.CooperationActivitie_refresh)
    end
    local info = {}
    printTable(5, "保存挑战积分", info)
    RPCReq.Activity_WorkTogether_SaveScore(info, success)
end

--#协力大作战-领取积分奖励
function CooperationActivitiesModel:WorkTogetherGetScoreReward(type, id)
    local function success(data)
        printTable(5, "协力大作战-领取积分奖励成功", data)
        if data.scoreRewardMark then
            self.CooperationInfo[type]["scoreRewardMark"]=data.scoreRewardMark
            Dispatcher.dispatchEvent(EventType.CooperationActivitie_gerenReward)
        end
    end
    local info = {
        id = id
    }
    printTable(5, "协力大作战-领取积分奖励", info)
    RPCReq.Activity_WorkTogether_GetScoreReward(info, success)
end

--#协力大作战-领取助力奖励
function CooperationActivitiesModel:WorkTogetherGetHelpReward(type, id)
    local function success(data)
        printTable(5, "协力大作战-领取助力奖励成功", data)
        self.CooperationInfo[type]["helpRewardMark"] = data.helpRewardMark --#助力奖励,领奖位图标识
        self:setCooperationSupportRed()
        --红点
        Dispatcher.dispatchEvent(EventType.CooperationActivitie_TogetherGetHelpReward)
    end
    local info = {
        id = id
    }
    printTable(5, "协力大作战-领取助力奖励", info)
    RPCReq.Activity_WorkTogether_GetHelpReward(info, success)
end

--#协力大作战-获取商城信息(预留接口)
function CooperationActivitiesModel:WorkTogetherGetMallInfo(type)
    local function success(data)
        printTable(5, "协力大作战-获取商城信息(预留接口)成功", data)
        --Dispatcher.dispatchEvent(EventType.CooperationActivitie_refresh)
    end
    local info = {}
    printTable(5, "协力大作战-获取商城信息(预留接口)", info)
    RPCReq.Activity_WorkTogether_GetMallInfo(info, success)
end

--##协力兑换商城 兑换
function CooperationActivitiesModel:WorkTogetherExchange(type, id, amount)
    local function success(data)
        if data then
            printTable(5, "#协力兑换商城 兑换成功", data)
            local itemList = self.CooperationShop[type]["itemList"] or {}
            itemList[data.id] = {id = data.id, num = data.num}
            self.CooperationShop[type]["itemList"] = itemList
            Dispatcher.dispatchEvent(EventType.CooperationActivitie_ShopRefresh)
        end
    end
    local info = {
        id = id,
        num = amount
    }
    printTable(5, "#协力兑换商城 兑换", info)
    RPCReq.Activity_WorkTogether_Exchange(info, success)
end

--##协力限时商城 购买
function CooperationActivitiesModel:WorkTogetherLimitTimeBuy(type, id)
    local function success(data)
        printTable(5, "#协力限时商城 购买成功", data)
        if data then
            local itemList = self.CooperationStore[type]["itemList"] or {}
            itemList[data.id] = {id = data.id, num = data.num}
            self.CooperationStore[type]["itemList"] = itemList
            self:setCooperationLimitedShopRed(type)
            Dispatcher.dispatchEvent(EventType.CooperationActivitie_Holpprefresh)
        end
    end
    local info = {
        id = id
    }
    printTable(5, "#协力限时商城 购买", info)
    RPCReq.Activity_WorkTogether_LimitTimeBuy(info, success)
end

--##协力大作战-助力
function CooperationActivitiesModel:WorkTogetherHelp(type)
    local function success(data)
        printTable(5, "#协力大作战-助力成功", data)
        RollTips.show("助力成功")
        self.CooperationInfo[type]["isHelped"] = data.isHelped --#是否已助力
        self.CooperationInfo[type]["helpRewardMark"] = data.helpRewardMark --#助力奖励,领奖位图标识
        self.CooperationInfo[type]["helpNum"] = data.helpNum --#总助力值
        self:setCooperationSupportRed()
        Dispatcher.dispatchEvent(EventType.CooperationActivitie_Helprefresh)
    end
    local info = {}
    printTable(5, "#协力大作战-助力", info)
    RPCReq.Activity_WorkTogether_Help(info, success)
end

return CooperationActivitiesModel
