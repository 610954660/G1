--Name : BattleBuffView.lua
--Author : generated by FairyGUI
--Date : 2020-3-30
--Desc :

local BattledataView,Super = class("BattledataView", Window)
local  HeroConfiger = require "Game.ConfigReaders.HeroConfiger"
function BattledataView:ctor()
	--LuaLog("BattleBuffView ctor")
	self._packName = "Battle"
	self._compName = "BattledataView"

	self._rootDepth = LayerDepth.PopWindow
	--self._rootDepth = LayerDepth.Window
	self.battleData=false
	self.playerList=false
	
	self.enemyList=false
	self.ReplayBtn=false
	self.dataList=false
	
	self.myItemArrs = {}
	self.otherItemArrs = {}
	
	self.BaseData={
		hurt=0,
		cure=0,
		beHurt=0
	}
	self.enemyBaseData={
		hurt=0,
		cure=0,
		beHurt=0
	}
	self.dataTitle=false
end

function BattledataView:_initEvent( )

end

function BattledataView:_initVM( )
	local vmRoot = self
	local viewNode = self.view
	---Do not modify following code--------
	--{vmFields}:Battle.BattledataView
	--{vmFieldsEnd}:Battle.BattledataView
	--Do not modify above code-------------
end

function BattledataView:_initUI( )
	self:_initVM()
	self:setBg("BattledataBg.jpg")
	self.playerList=self.view:getChildAutoType("playerList")
	self.enemyList=self.view:getChildAutoType("enemyList")
	self.closeBt=self.view:getChildAutoType("$closeBtn")
	self.dataList=self.view:getChildAutoType("dataList")
	self.dataList:setVisible(false)
	
	self.ReplayBtn=self.view:getChildAutoType("ReplayBtn")
	self.dataTitle=self.view:getChildAutoType("dataTitle")

	self.img_fighthuo1=self.view:getChildAutoType("img_fighthuo1")
	self.img_fighthuo2=self.view:getChildAutoType("img_fighthuo2")
	self.heroCell1=self.view:getChildAutoType("heroCell1")
	self.heroCell2=self.view:getChildAutoType("heroCell2")
	self.txt_playerName1=self.view:getChildAutoType("txt_playerName1")
	self.txt_playerName2=self.view:getChildAutoType("txt_playerName2")	
	self.txt_playerfight1=self.view:getChildAutoType("txt_playerfight1")
	self.txt_playerfight2=self.view:getChildAutoType("txt_playerfight2")
	
	for i = 1, 5 do
		self.myItemArrs[i] = self.view:getChildAutoType("my"..i)
		self.otherItemArrs[i] = self.view:getChildAutoType("other"..i)
		self.myItemArrs[i]:getController("c1"):setSelectedIndex(1)
		self.otherItemArrs[i]:getController("c1"):setSelectedIndex(1)
	end
	
	if self._args.isWin then
		self.view:getController("winner"):setSelectedPage("player")
	else
		self.view:getController("winner"):setSelectedPage("enemy")
	end	

	


	self.battleData=  self._args.battleData
	self:initData(self.battleData)
	local arrayType=self.battleData.gamePlayInfo.arrayType or 0
	
	local mapConfig = BattleModel:getMapConfig(arrayType)
	if self._args.isRecord then
		self.dataTitle:setText("")
	else
		--local mapConfig = BattleModel:getBattleConfig()
		if mapConfig and  mapConfig.title then
			self.dataTitle:setText(mapConfig.title)
		end
	end
	
	
	--isRecord
	self.ReplayBtn:addClickListener(function ()
		if not self.battleData then return  end
		if self.battleData.gamePlayInfo==nil then
				self.battleData.gamePlayInfo={}
		end
		 if not BattleModel:tryToBegin(arrayType) then
				return
		 end
	     ViewManager.close("BattledataView")
		 local  frontType=FightManager.frontArrayType()
		 if frontType then
				Dispatcher.dispatchEvent(EventType.battle_close,{arrayType=self._args.arrayType})
				ViewManager.showMainView()
		 end
	     Dispatcher.dispatchEvent(EventType.Battle_replayRecord,{isRecord=true,battleData=self.battleData})
	end)
	self.closeBt:addClickListener(function ()
			ViewManager.close("BattledataView")
	end)


end


--cure=1584,
--star=18,
--code=25001,
--id=111,
--addShield=0,
--hp=19800,
--buffs
--beHurt=815,
--hpMax=19800,
--type=1,
--level=200,
--hurt=16257

--#战斗分组站位信息
--.BattleGroupInfo {
	--side            0:integer   #1左边 2右边
	--playerId        1:integer   #玩家ID
	--serverId        2:integer   #服务器ID
--}

function  BattledataView:showTacticalItem(data,index)
	local obj = nil
	if index == 1 then
		self.myItemArrs[1]:getController("c1"):setSelectedIndex(0)
		obj = self.myItemArrs[1]
	else
		self.otherItemArrs[1]:getController("c1"):setSelectedIndex(0)
		obj = self.otherItemArrs[1]
	end
	local config = DynamicConfigData.t_TacticalUnlock[data.id]
	local iconLoader = obj:getChildAutoType("taticalCell"):getChildAutoType("iconLoader")
	local path = PathConfiger.getTacticalIcon(config.tactical)
	iconLoader:setURL(path)
	local levelLab = obj:getChildAutoType("level")
	levelLab:setText("Lv."..data.level)
	obj:removeClickListener(100)
	obj:addClickListener(function()
		ViewManager.open("ItemTipsTacticalView",{id= data.id})
	end)
end

function BattledataView:showSecretWeapon(data,index)
	local obj = nil
	if index == 1 then
		self.myItemArrs[2]:getController("c1"):setSelectedIndex(0)
		obj = self.myItemArrs[2]
	else
		self.otherItemArrs[2]:getController("c1"):setSelectedIndex(0)
		obj = self.otherItemArrs[2]
	end
	local equipurl = SecretWeaponsModel:getEquipById(data.code)
	local iconLoader = obj:getChildAutoType("taticalCell"):getChildAutoType("iconLoader")
	iconLoader:setURL(equipurl)
	-- obj:getChildAutoType("taticalCell"):setSize(50,50)
	local levelLab = obj:getChildAutoType("level")
	levelLab:setText("Lv."..data.level)
	obj:removeClickListener(100)
	obj:addClickListener(function()
		local lv = data.level
		local ConfigSkill = DynamicConfigData.t_godArms[data.code]
		local skillId = ConfigSkill[lv].skillId
		local conf = DynamicConfigData.t_skill[skillId]
		if conf then
			ViewManager.open("ItemTips", {codeType = CodeType.SKILL, id = skillId, data = conf})
		end
	end,100)
end

function BattledataView:showElf(data,index)
	local obj = nil
	if index == 1 then
		for i = 1, #data do
			self.myItemArrs[2+i]:getController("c1"):setSelectedIndex(0)
			self:showElfOne(self.myItemArrs[2+i],data[i])
		end
	else
		for i = 1, #data do
			self.otherItemArrs[2+i]:getController("c1"):setSelectedIndex(0)
			self:showElfOne(self.otherItemArrs[2+i],data[i])
		end
	end
end

function BattledataView:showElfOne( obj,data)
	local url = ItemConfiger.getItemIconByCode(data.code)
	local iconLoader = obj:getChildAutoType("taticalCell"):getChildAutoType("iconLoader")
	iconLoader:setURL(url)
	obj:getChildAutoType("taticalCell"):setScale(0.4,0.4)
	local levelLab = obj:getChildAutoType("level")
	levelLab:setText("Lv."..data.level)
	obj:removeClickListener(100)
	obj:addClickListener(function()
		local elvesData = {}
		elvesData = ElvesSystemModel:getElvesInfoByCode(data.code,data.star,data.level)
		ViewManager.open("ElvesSkillTipsInfoView",{data = elvesData})
	end)
end

function BattledataView:initData(battleData)
	local playerData={}
	local enemyData={}
	
	local battleObjSeqs=battleData.battleObjSeq
	local campAddDataSeq=battleData.campAddDataSeq
	local groupInfo=battleData.groupInfo
	local playerInfo=battleData.gamePlayInfo.playerInfo or {}
	local arrayType = battleData.gamePlayInfo.arrayType 

	for i = 1, #campAddDataSeq do
		if campAddDataSeq[i].side == 1  and campAddDataSeq[i].tacticalInfo then
			self:showTacticalItem(campAddDataSeq[i].tacticalInfo,campAddDataSeq[i].side)
		elseif  campAddDataSeq[i].side == 2 and campAddDataSeq[i].tacticalInfo then
			self:showTacticalItem(campAddDataSeq[i].tacticalInfo,campAddDataSeq[i].side)
		end
	end
	
	local myElf = {}
	local otherElf = {}
	for i = 1, #battleObjSeqs do
		if battleObjSeqs[i].type == 3 then
			if math.modf(battleObjSeqs[i].id/100) == 1 then
				self:showSecretWeapon(battleObjSeqs[i],1)
			else
				self:showSecretWeapon(battleObjSeqs[i],2)
			end
		elseif battleObjSeqs[i].type == 4 then
			if math.modf(battleObjSeqs[i].id/100) == 1 then
				table.insert(myElf,battleObjSeqs[i])
			else
				table.insert(otherElf,battleObjSeqs[i])
			end
		end
	end
	self:showElf(myElf,1)
	self:showElf(otherElf,2)
   
	local myId = tonumber(PlayerModel.userid)
	local isLeft = false
	for i = 1,2, 1 do
		local platerItemInfo=playerInfo[i]
		local heroCell=self["heroCell"..i]
		local heroItem = BindManager.bindPlayerCell(heroCell)
		local txt_playerName=self["txt_playerName"..i]
		local txt_playerfight=self["txt_playerfight"..i]
		local img_fighthuo=self["img_fighthuo"..i] 
		if platerItemInfo and platerItemInfo.playerId and (i == 2) and (platerItemInfo.playerId == myId) then
			isLeft = true
		end
		if platerItemInfo and platerItemInfo.head then
			img_fighthuo:setVisible(true)
			heroCell:setVisible(true)
			txt_playerName:setVisible(true)
			txt_playerfight:setVisible(true)
			heroItem:setHead(platerItemInfo.head, platerItemInfo.level, nil, nil,nil)
			txt_playerName:setText(platerItemInfo.name)
			txt_playerfight:setText(StringUtil.transValue(platerItemInfo.combat))	
		else
			img_fighthuo:setVisible(false)
			heroCell:setVisible(false)
			txt_playerName:setVisible(false)
			txt_playerfight:setVisible(false)
		end
	end
	local maxHurt = -1 	-- 最大伤害
	local flagMaxId = 0 -- 记录最大的id
	local enemyMaxHurt = -1
	local enemyFlagMaxId = 0
	for i, battleObjSeq in pairs(battleObjSeqs) do
		if battleObjSeq.type~=3 and battleObjSeq.type~=4 then
			if battleObjSeq.id>BattleModel.HeroPos.enemy.pos then
				if enemyMaxHurt < battleObjSeq.hurt then
					enemyMaxHurt = battleObjSeq.hurt
					enemyFlagMaxId = battleObjSeq.id
				end
				table.insert(enemyData,battleObjSeq)
				self.enemyBaseData.hurt=self.enemyBaseData.hurt+battleObjSeq.hurt
				self.enemyBaseData.cure=self.enemyBaseData.cure+battleObjSeq.cure
				self.enemyBaseData.beHurt=self.enemyBaseData.beHurt+battleObjSeq.beHurt
			else
				if maxHurt < battleObjSeq.hurt then
					maxHurt = battleObjSeq.hurt
					flagMaxId = battleObjSeq.id
				end
				self.BaseData.hurt=self.BaseData.hurt+battleObjSeq.hurt
				self.BaseData.cure=self.BaseData.cure+battleObjSeq.cure
				self.BaseData.beHurt=self.BaseData.beHurt+battleObjSeq.beHurt
				table.insert(playerData,battleObjSeq)
			end	
		end
		TableUtil.sortByMap( enemyData , {{key="id",asc=false}})	
		TableUtil.sortByMap( playerData , {{key="id",asc=false}})	
	end
	printTable(5656,enemyData,"enemyData")
	
	self.playerList:setItemRenderer(function(index,child)
		   local data=	playerData[index+1]
	       self:setBattleBar(child,data,self.BaseData)
		   local headObj=child:getChildAutoType("heroCell")
		   local showMvp = child:getController("showMvp")
		   showMvp:setSelectedIndex(flagMaxId == data.id and 1 or 0)
			if isLeft then
				showMvp:setSelectedIndex(0)
			end
		   local heroCell = BindManager.bindHeroCell(headObj)
		 
		--    local heroInfo=HeroConfiger.getHeroInfoByID(data.code)
		   --if heroInfo  then
				--data.category=heroInfo.category
				heroCell:setData(data)
				if  data.finalHp then--数据统计界面需求
					if data.finalHp<=0 then
						heroCell.grayCtrl:setSelectedIndex(1)
					else
						heroCell.grayCtrl:setSelectedIndex(0)
					end
				end
				child:getController("bgType"):setSelectedIndex(index%2)
				
				if groupInfo then
					local params = {
						playerInfo = groupInfo[1],
						heroArray ={data.uuid}
					}
					headObj:addClickListener(function ()
							Dispatcher.dispatchEvent(EventType.HeroInfo_Show, params);
					end)
				end

		   --end

	end)
	self.playerList:setData(playerData)
	self.enemyList:setItemRenderer(function(index,child)
			local data=	enemyData[index+1]
		    self:setBattleBar(child,data,self.enemyBaseData)
			local headObj=child:getChildAutoType("heroCell")
			local heroCell = BindManager.bindHeroCell(headObj)
			local monster=DynamicConfigData.t_monster[data.code]
			local showMvp = child:getController("showMvp")
			showMvp:setSelectedIndex(0)
			if isLeft then
				showMvp:setSelectedIndex(enemyFlagMaxId == data.id and 1 or 0)
			end
				--data.category=monster.category
				heroCell:setData(data)
				if  data.finalHp then--数据统计界面需求
					if data.finalHp<=0 then
						heroCell.grayCtrl:setSelectedIndex(1)
					else
						heroCell.grayCtrl:setSelectedIndex(0)
					end
				end
				child:getController("bgType"):setSelectedIndex(index%2)
				
				if groupInfo then		
					headObj:addClickListener(function ()
							if groupInfo[2] then
								local params = {
									playerInfo = groupInfo[2],
									heroArray ={data.uuid}
								}
								Dispatcher.dispatchEvent(EventType.HeroInfo_Show, params);
							else
								RollTips.show(Desc.battle_DataStr)
							end
					end)
				end
			--end

	end)
	self.enemyList:setData(enemyData)
	Scheduler.schedule(function()
			if tolua.isnull(self.view) then
				return
			end
			self.dataList:setVisible(true)
	end,0.01,1)
	
end

function BattledataView:setBattleBar(item,battleObjSeq,hurtData)
	
	local hurtBar=item:getChildAutoType("hurtBar")
	local cureBar=item:getChildAutoType("cureBar")
	local beHurtBar=item:getChildAutoType("beHurtBar")
	hurtBar:setValue(math.floor(battleObjSeq.hurt/hurtData.hurt*100+0.5))
	cureBar:setValue(math.floor(battleObjSeq.cure/hurtData.cure*100+0.5))
	beHurtBar:setValue(math.floor(battleObjSeq.beHurt/hurtData.beHurt*100+0.5))
	if battleObjSeq.hurt==0 then
		hurtBar:setValue(2)
		hurtBar:getChildAutoType("title"):setText("0%")
	end
	if battleObjSeq.cure==0 then
		cureBar:setValue(2)
		cureBar:getChildAutoType("title"):setText("0%")
	end
	if battleObjSeq.beHurt==0 then
		beHurtBar:setValue(2)
		beHurtBar:getChildAutoType("title"):setText("0%")
	end
	
	hurtBar:getChildAutoType("value"):setText(battleObjSeq.hurt)
	cureBar:getChildAutoType("value"):setText(battleObjSeq.cure)
	beHurtBar:getChildAutoType("value"):setText(battleObjSeq.beHurt)
	cureBar:getChildAutoType("bar"):setIcon(PathConfiger.getBarImage("greenBar"))
	beHurtBar:getChildAutoType("bar"):setIcon(PathConfiger.getBarImage("blueBar"))
end




return BattledataView