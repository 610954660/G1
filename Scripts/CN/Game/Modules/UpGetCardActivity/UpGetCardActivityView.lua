--Name : UpGetCardActivityView.lua
--Author : generated by FairyGUI
--Date : 2020-9-3
--Desc : 精英招募

local UpGetCardActivityView,Super = class("UpGetCardActivityView", Window)

function UpGetCardActivityView:ctor()
	--LuaLog("UpGetCardActivityView ctor")
	self._packName = "UpGetCardActivity"
	self._compName = "UpGetCardActivityView"
	--self._rootDepth = LayerDepth.Window
	self.calltimer = false
	self.gj_lastTime_lab = false
	self.costItemLeft = false
	self.costItemRight = false
	self.lihuiDisplayObj1 = false
	self.lihuiDisplayObj2 = false
	self.lihuiDisplayObj3 = false
	self.costItemObj1 = false
	self.costItemObj2 = false
	self.viewData = {}
    self.lotteryIdList = {}
    self.data = false
	self.luckType = false
end

function UpGetCardActivityView:_initEvent( )
	self.lihuiDisplayObj1 = BindManager.bindLihuiDisplay(self.lihuiDisplay1)
	self.lihuiDisplayObj2 = BindManager.bindLihuiDisplay(self.lihuiDisplay2)
	self.lihuiDisplayObj3 = BindManager.bindLihuiDisplay(self.lihuiDisplay3)

	self.costItemObj1 = BindManager.bindCostItem(self.costItemLeft)
	self.costItemObj2 = BindManager.bindCostItem(self.costItemRight)
	self.costItemObj1:setUseMoneyItem(true);
	self.costItemObj2:setUseMoneyItem(true);
	self.view:getChildAutoType("playImg"):setURL("UI/activity/jyzm_img.png")
	self:updatePanel()

    self.btn1:addClickListener(function ( ... )
    	local code = self.viewData.showContent.uphero[1]
		local category = DynamicConfigData.t_hero[code].category
    	local categoryHeros = DynamicConfigData.t_HeroTotems[category]
		local _cardInfoList = {}
		for _,v in pairs(categoryHeros) do
			if  tonumber(code)==v.hero then
				table.insert(_cardInfoList, v)
			end
		end
		ViewManager.open("HeroInfoView",{index = 1,heroId =tonumber(code),heroList = _cardInfoList })
    end)

    self.btn2:addClickListener(function ( ... )
    	local code = self.viewData.showContent.uphero[2]
		local category = DynamicConfigData.t_hero[code].category
    	local categoryHeros = DynamicConfigData.t_HeroTotems[category]
		local _cardInfoList = {}
		for _,v in pairs(categoryHeros) do
			if  tonumber(code)==v.hero then
				table.insert(_cardInfoList, v)
			end
		end
		ViewManager.open("HeroInfoView",{index = 1,heroId =tonumber(code),heroList = _cardInfoList })
    end)

    self.btn3:addClickListener(function ( ... )
    	local code = self.viewData.showContent.uphero[3]
		local category = DynamicConfigData.t_hero[code].category
    	local categoryHeros = DynamicConfigData.t_HeroTotems[category]
		local _cardInfoList = {}
		for _,v in pairs(categoryHeros) do
			if  tonumber(code)==v.hero then
				table.insert(_cardInfoList, v)
			end
		end
		ViewManager.open("HeroInfoView",{index = 1,heroId =tonumber(code),heroList = _cardInfoList })
    end)

    self.btn_view:addClickListener(function ( ... )
		ViewManager.open("UpGetAwardView")
    end)
	self.btn_help:removeClickListener()
	 self.btn_help:addClickListener(function( ... )
		local actiInfo = ActivityModel:getActityByType( GameDef.ActivityType.SpecialSummon )
		if not actiInfo then --没数据 活动可能关了
			return
		end
	 	ViewManager.open("UpGetHelpView")
	 end)
	self.leftbtn:removeClickListener(100)
	self.leftbtn:addClickListener(function ( ... )
		if  not self.lotteryIdList[1] then
			return 
		end
		if not self.viewData then
			RollTips.show(Desc.shop_activityEnd)
			return
		end
		local idArr = {self.lotteryIdList[1],self.lotteryIdList[3]}
		local cost = DynamicConfigData.t_heroLottery[idArr[1]].cost 
		local cost2 = DynamicConfigData.t_heroLottery[idArr[2]].cost 
	 	local itemCode = cost[1].code --道具需要
	 	local xhnum = cost2[1].amount --钻石消耗
	    if self.data.freeTimes>=1 then --如果是免费
	 		local params = {}
	 		params.id = self.lotteryIdList[5]
			params.activityId = self.viewData.id
	 		params.onSuccess = function (res )
	 		    local data = {}
	 		    data.resultList = res.resultList
	 		    local temp = PackModel:getItemsFromAllPackByCode(itemCode)
                if temp >=cost[1].amount then --有道具 成功页显示道具
	 		       data.id = idArr[1]
	 		       data.xhType = 1
	 		       data.itemCode = itemCode
	 		       data.cost = cost
	 		    else --没有道具 显示钻石
	 		    	data.id =  idArr[2]
	 		    	data.xhType = 2
	 		    	data.itemCode = cost2[1].code
	 		        data.cost = cost2
	 		    end
				data.activityId = self.viewData.id
				data.lotteryIdList = self.lotteryIdList 
	 			ViewManager.open("GetSuccess1View",data)
	 		end
	 		RPCReq.HeroLottery_ActivityDraw(params, params.onSuccess)
	 	elseif PackModel:getItemsFromAllPackByCode(itemCode) >=cost[1].amount then
	 		local num = PackModel:getItemsFromAllPackByCode(itemCode)
 			local params = {}
	        params.id = idArr[1]
	        params.activityId = self.viewData.id
	 		params.onSuccess = function (res )
	 			local data = {}
	 		    data.resultList = res.resultList
	 		    local temp = num -cost[1].amount
	 		    if temp >=cost[1].amount then --道具还足够
	 		       data.id = idArr[1]
	 		       data.xhType = 1
	 		       data.itemCode = itemCode
	 		       data.cost = cost
	 		    else  --道具刚好用完
	 		    	data.id = idArr[2]
	 		    	data.xhType = 2
	 		    	data.itemCode = cost2[1].code
	 		        data.cost = cost2
	 		    end
				 data.activityId = self.viewData.id
				 data.lotteryIdList = self.lotteryIdList 
	 			ViewManager.open("GetSuccess1View",data)
	 		end
	 		RPCReq.HeroLottery_ActivityDraw(params, params.onSuccess)
	 	elseif PlayerModel:getMoneyByType(GameDef.MoneyType.Diamond)>=xhnum then --钻石消耗足够
	 		local params = {}
 		    params.id = idArr[2]
 		    params.activityId = self.viewData.id
	 		params.onSuccess = function (res )
	 			local data = {}
	 		    data.resultList = res.resultList
	 		    data.itemCode = cost2[1].code
	 		    data.id = idArr[2]
	 		    data.xhType = 2
	 		    data.cost = cost2
				 data.activityId = self.viewData.id
				 data.lotteryIdList = self.lotteryIdList 
	 			ViewManager.open("GetSuccess1View",data)
	 		end
	 		RPCReq.HeroLottery_ActivityDraw(params, params.onSuccess)
		else
            ModelManager.PlayerModel:isCostEnough(cost, true)
	 	end
	end)

	self.rightbtn:removeClickListener(100)
	self.rightbtn:addClickListener(function ( ... )
			if  not self.lotteryIdList[2] then
				return 
			end

			if not self.viewData then
				RollTips.show(Desc.shop_activityEnd)
				return
			end

			local idArr = {self.lotteryIdList[2],self.lotteryIdList[4]}
			local cost = DynamicConfigData.t_heroLottery[idArr[1]].cost
			local cost2 = DynamicConfigData.t_heroLottery[idArr[2]].cost 
		 	local itemCode =cost[1].code --道具消耗
		 	local num = PackModel:getItemsFromAllPackByCode(itemCode)
		 	local xhnum = cost2[1].amount --钻石消耗
		 	if num >=cost[1].amount then  --道具足够
		 		local params = {}
	 		    params.id = idArr[1]
	 		    params.activityId = self.viewData.id
		 		params.onSuccess = function (res )
		 			local data = {}
		 		    data.resultList = res.resultList
					data.resultList = TableUtil.randomSortArray(data.resultList)
		 		    
		 		    local temp = num - cost[1].amount
		 		    if num>=cost[1].amount then --道具还足够
		 		    	data.id =idArr[1]
		 		    	data.xhType = 1
		 		    	data.itemCode = itemCode
		 		    	data.cost = cost
		 		    else --道具不足
		 		    	data.id = idArr[2]
		 		    	data.xhType = 2
		 		    	data.itemCode = cost2[1].code
		 		    	data.cost = cost2
		 		    end
					 data.activityId = self.viewData.id
					 data.lotteryIdList = self.lotteryIdList 
					printTable(1,"打开十连钱",data)
		 			ViewManager.open("GetSuccess2View",data)
		 		end

		 		RPCReq.HeroLottery_ActivityDraw(params, params.onSuccess)
		 	elseif PlayerModel:getMoneyByType(GameDef.MoneyType.Diamond)>=xhnum then --钻石消耗足够
		 		local params = {}
	 		    params.id = idArr[2]
	 		    params.activityId = self.viewData.id
		 		params.onSuccess = function (res )
		 			local data = {}
		 		    data.resultList = res.resultList
					data.resultList = TableUtil.randomSortArray(data.resultList)
		 		    data.itemCode = cost2[1].code
		 		    data.id = idArr[2]
		 		    data.xhType = 2
		 		    data.cost = cost2
					data.activityId = self.viewData.id
					data.lotteryIdList = self.lotteryIdList 
					printTable(1,"打开十连钱",data)
		 			ViewManager.open("GetSuccess2View",data)
		 		end
		 		RPCReq.HeroLottery_ActivityDraw(params, params.onSuccess)
		 	else
                ModelManager.PlayerModel:isCostEnough(cost, true)
		 	end
	end)
	
end

function UpGetCardActivityView:update_upgetCard(  )
	self:updatePanel()
end

function UpGetCardActivityView:update_cardListTime( ... )
	local timeLimit = DynamicConfigData.t_heroLottery[self.lotteryIdList[1]].timesLimit
	local temp = timeLimit - self.data.count

	if tolua.isnull(self.view) then
		return
	end

	self.gj_lastTime_lab:setText(temp)
	self.count:setText(self.data.protectiveCount) --再抽多少次
end

function UpGetCardActivityView:update_getCardsView( ... )
	print(1,"UpGetCardActivityView update_getCardsView")
	self:updatePanel()
end

function UpGetCardActivityView:initData()
end

--更新
function UpGetCardActivityView:updatePanel( ... )
	
	local actiInfo = ActivityModel:getActityByType( GameDef.ActivityType.SpecialSummon )
	if not actiInfo then --没数据 活动可能关了
		return
	end
	self.viewData = actiInfo
	printTable(1,"self.viewData",self.viewData)
	self.lotteryIdList = self.viewData.showContent.lotteryIdList
	self.data = UpGetCardActivityModel:getData(  )
	if self.viewData.showContent.countReward then
		self.luckType = self.viewData.showContent.countReward
	else
		self.luckType = DynamicConfigData.t_heroLottery[self.lotteryIdList[1]].type
	end

	if tolua.isnull(self.view) then
		return
	end

	if self.viewData.showContent.uphero then
		-- self.lihuiDisplayObj1:setData(self.viewData.showContent.uphero[1],nil,true)
		-- self.lihuiDisplayObj2:setData(self.viewData.showContent.uphero[2],nil,true)
		-- self.lihuiDisplayObj3:setData(self.viewData.showContent.uphero[3],nil,true)

		self.btn1:setTitle(DynamicConfigData.t_hero[self.viewData.showContent.uphero[1]].heroName)
		self.btn2:setTitle(DynamicConfigData.t_hero[self.viewData.showContent.uphero[2]].heroName)
		self.btn3:setTitle(DynamicConfigData.t_hero[self.viewData.showContent.uphero[3]].heroName)
	end

    self:checkUpTime()
    self:update_cardListTime()
    local config = UpGetCardActivityModel:getConfigByNextId( self.luckType,self.data.count)
    if config then
    	self.hadNextCtrl:setSelectedIndex(0)
    	local itemcellObj = BindManager.bindItemCell(self.itemCell)
		itemcellObj:setIsBig(false)
		local itemData = ItemsUtil.createItemData({data = config.reward[1]})
		itemcellObj:setItemData(itemData,CodeType.ITEM)

		self.progressBar:setMax(config.num)
		self.progressBar:setValue(self.data.count)
	    self.protxt:setText(self.data.count.."/"..config.num)
    else
    	self.hadNextCtrl:setSelectedIndex(1)
    end
    
	local idArr = self.lotteryIdList
	local cost = DynamicConfigData.t_heroLottery[idArr[1]].cost[1] 
	local cost2 = DynamicConfigData.t_heroLottery[idArr[2]].cost[1] 
	local cost3 = DynamicConfigData.t_heroLottery[idArr[3]].cost[1] 
	local cost4 = DynamicConfigData.t_heroLottery[idArr[4]].cost[1] 

    local itemCode = DynamicConfigData.t_heroLottery[idArr[1]].cost[1].code --高级道具消耗
 	local hadFreeNum = self.data.freeTimes
 	local hadItemNum = PackModel:getItemsFromAllPackByCode(itemCode)
 	local img_red_left  = self.leftbtn:getChildAutoType("img_red")
 	local img_red_right  = self.rightbtn:getChildAutoType("img_red")
 	if hadFreeNum>=1 then --有免费次数
 		self.timeShowCtrl:setSelectedIndex(1)
        img_red_left:setVisible(true)
 	else
 		self.timeShowCtrl:setSelectedIndex(0)
 		if hadItemNum>=cost.amount then --召唤券足够
 			self.costItemObj1:setData(cost.type, cost.code, cost.amount, true, false, false)
			self:__setColorForCostItem(false, self.costItemLeft, cost.type, cost.code, cost.amount)
 			img_red_left:setVisible(true)
 		else
 			self.costItemObj1:setData(cost3.type, cost3.code, cost3.amount, true, false, false)
			self:__setColorForCostItem(false, self.costItemLeft, cost3.type, cost3.code, cost3.amount)
 			img_red_left:setVisible(false)
 		end
 	end

    if hadItemNum>=cost2.amount then --道具数量足够
		img_red_right:setVisible(true)
    	self.costItemObj2:setData(cost2.type, cost2.code, cost2.amount, true, false, false)
		self:__setColorForCostItem(false, self.costItemRight, cost2.type, cost2.code, cost2.amount)
    else
    	img_red_right:setVisible(false)
    	--道具不足 检测钻石
	    self.costItemObj2:setData(cost4.type, cost4.code, cost4.amount, true, false, false)
		self:__setColorForCostItem(false, self.costItemRight, cost4.type, cost4.code, cost4.amount)
    end

 	--当前拥有
 	local url = ItemConfiger.getItemIconByCode(itemCode)	
 	self.itemicon:setURL(url)
    self.itemnum:setText(hadItemNum)
end

function UpGetCardActivityView:__setColorForCostItem(specific, costItem, type, code, amount)
	--costItem:setData(type, code, amount, true, false, true)
	if code == 4 then
		print()
	end

	local hasNum = 0
	if type == CodeType.ITEM then
		hasNum = ModelManager.PackModel:getItemsFromAllPackByCode(code)
	elseif type == CodeType.MONEY then
		hasNum = ModelManager.PlayerModel:getMoneyByType(code)
	end
	local colorController = costItem:getController("color")
	if specific then
		if hasNum >= amount then
			colorController:setSelectedPage("specificEnough")
		else
			colorController:setSelectedPage("specificNotEnough")
		end
	else
		if hasNum >= amount then
			colorController:setSelectedPage("enough")
		else
			colorController:setSelectedPage("notEnough")
		end
	end
end

function UpGetCardActivityView:checkUpTime( ... )
	local time = self.viewData.realEndMs/1000 -  ModelManager.ServerTimeModel:getServerTime()
	if time>0 then
		if self.calltimer then
			TimeLib.clearCountDown(self.calltimer)
		end
	    self.atime:setText(TimeLib.GetTimeFormatDay(time,2))
	    local function onCountDown( time )
	    	if  tolua.isnull(self.atime) then
	    		return
	    	end
	    	self.atime:setText(TimeLib.GetTimeFormatDay(time,2))
	    end
	    local function onEnd( ... )
	    	self.atime:setText(Desc.common_txt1)
	    end
	    self.calltimer = TimeLib.newCountDown(time, onCountDown, onEnd, false, false,false)
	end
end

function UpGetCardActivityView:_initVM( )
	local vmRoot = self
	local viewNode = self.view
	---Do not modify following code--------
	--{vmFields}:UpGetCardActivity.UpGetCardActivityView
		vmRoot.atime = viewNode:getChildAutoType("$atime")--text
		vmRoot.costItemRight = viewNode:getChildAutoType("$costItemRight")--
		vmRoot.lihuiDisplay3 = viewNode:getChildAutoType("$lihuiDisplay3")--Button
		vmRoot.progressBar = viewNode:getChildAutoType("$progressBar")--ProgressBar
		vmRoot.itemtxt = viewNode:getChildAutoType("$itemtxt")--text
		vmRoot.leftbtn = viewNode:getChildAutoType("$leftbtn")--Button
		vmRoot.itemCell = viewNode:getChildAutoType("$itemCell")--Button
		vmRoot.rightbtn = viewNode:getChildAutoType("$rightbtn")--Button
		vmRoot.itemicon = viewNode:getChildAutoType("$itemicon")--loader
		vmRoot.costItemLeft = viewNode:getChildAutoType("$costItemLeft")--
		vmRoot.protxt = viewNode:getChildAutoType("$protxt")--text
		vmRoot.count = viewNode:getChildAutoType("$count")--text
		vmRoot.lihuiDisplay2 = viewNode:getChildAutoType("$lihuiDisplay2")--Button
		vmRoot.itemnum = viewNode:getChildAutoType("$itemnum")--text
		vmRoot.lihuiDisplay1 = viewNode:getChildAutoType("$lihuiDisplay1")--Button
		vmRoot.gj_lastTime_lab = viewNode:getChildAutoType("$gj_lastTime_lab")--text
		vmRoot.btn1 = viewNode:getChildAutoType("$btn1")
		vmRoot.btn2 = viewNode:getChildAutoType("$btn2")
		vmRoot.btn3 = viewNode:getChildAutoType("$btn3")
	--{vmFieldsEnd}:UpGetCardActivity.UpGetCardActivityView
	--Do not modify above code-------------
	self.timeShowCtrl = self.view:getController("timeShowCtrl")
	self.btn_view = self.view:getChildAutoType("btn_view")
	self.hadNextCtrl = self.view:getController("hadNextCtrl")
	self.btn_help = self.view:getChildAutoType("btn_help")
	self.view:getChildAutoType("bg"):setURL("Bg/upget_bg.png")
end

function UpGetCardActivityView:_initUI( )
	self:_initVM()
	RedManager.register("V_SUBACTIVITY_JY", self.view:getChildAutoType("img_red"))
end

function UpGetCardActivityView:_exit( ... )
	TimeLib.clearCountDown(self.calltimer)
end


return UpGetCardActivityView