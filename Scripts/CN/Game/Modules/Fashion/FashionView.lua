--Date :2020-12-11
--Author : generated by FairyGUI
--Desc : 
local FashionConfiger = require "Game.ConfigReaders.FashionConfiger"
local FashionView,Super = class("FashionView", Window)

function FashionView:ctor()
	--LuaLog("FashionView ctor")
	self._packName = "Fashion"
	self._compName = "FashionView"
	--self._rootDepth = LayerDepth.Window
	self.btn_help = false
	self.btn_leftArrow = false
	self.btn_rightArrow = false
	self.btn_set = false
	self.btn_travel = false
	self.playerIcon = false
	self.skinList = false
	self.attrDesc = false
	self.txt_leftTIme = false
	self.txt_fashionDec = false
	self.txt_fashionName = false
	self.playerQIcon = false
	self.effectLoader = false
	self.btn_hide = false
	self.btn_back = false
	self.btn_rotation = false
    self.heroList = {} --英雄列表
    self.fashionList = {} --时装列表
    self.fashionPackData = {} --时装背包数据
   	self.heroData = {} --该英雄的数据
    self.heroId = false    --英雄id
    self.heroUid = false --英雄Uid
    self.fashionId = false    --时装id
    self.fashionData = false    --时装数据
    self.seletedHeroIndex = 1 --选中英雄列表id
    self.seletedFahionIndex = 1 --选中皮肤列表id
    self.timerKey = false --定时器
end

function FashionView:_initEvent( )
	self.btn_leftArrow:removeClickListener(6)
    self.btn_leftArrow:addClickListener(function()
        self:onClickBtnLeftArrow()
    end,6)

    self.btn_rightArrow:removeClickListener(6)
    self.btn_rightArrow:addClickListener(function()
        self:onClickBtnRightArrow()
    end,6)

    self.btn_dress:removeClickListener(6)  
    self.btn_dress:addClickListener(function()
    	local params = {}
		params.uuid = self.heroUid
		params.itemUuid = self.fashionData:getUuid()
		params.onSuccess = function()
			self.skinList:setNumItems(#self.fashionList)
			Dispatcher.dispatchEvent(EventType.cardView_updateInfo)
		end
    	RPCReq.Fashion_Wear(params,params.onSuccess)
    end,6)

    self.btn_get:removeClickListener(6)
    self.btn_get:addClickListener(function()
    	local jump = self.fashionList[self.seletedFahionIndex].jump
    	if jump ~= "" then 
	    	local itemInfo = ItemConfiger.getInfoByCode(jump)
			local itemData = ItemsUtil.createItemData({data = {type = itemInfo.type, code = itemInfo.code, amount = 1}})
			ViewManager.open("ItemTips", {codeType = itemInfo.type, id = itemInfo.code, data = itemData})
		end
    end,6)

    self.btn_demount:removeClickListener(6)   
    self.btn_demount:addClickListener(function()
    	local params = {}
		params.uuid = self.heroUid
    	RPCReq.Fashion_TakeOff(params)
    end,6)
    self.btn_hide:removeClickListener(6)   
    self.btn_hide:addClickListener(function()
    	self.view:getTransition("t1"):play(function( ... )
        end);
    	self.view:getController("showViewCtr"):setSelectedIndex(1)
    end,6)
    self.btn_back:removeClickListener(6)   
    self.btn_back:addClickListener(function()
    	self.view:getTransition("t0"):play(function( ... )
        end);
    	self.view:getController("showViewCtr"):setSelectedIndex(0)
    	if self.view:getController("rotationCtr"):getSelectedIndex() == 1 then
			self.view:getController("rotationCtr"):setSelectedIndex(0)
		end
		self.skinList:setNumItems(#self.fashionList)
    end,6)
    self.btn_rotation:removeClickListener(6)   
  	self.btn_rotation:addClickListener(function(  )
		if self.view:getController("rotationCtr"):getSelectedIndex() == 0 then
			self.view:getController("rotationCtr"):setSelectedIndex(1)
		else
			self.view:getController("rotationCtr"):setSelectedIndex(0)
		end
	end,6)
end

function FashionView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:FashionSuit.FashionView
	self.btn_leftArrow = viewNode:getChildAutoType('btn_leftArrow')--GButton
	self.btn_rightArrow = viewNode:getChildAutoType('btn_rightArrow')--GButton
	self.btnState = viewNode:getChildAutoType('btnState')
	-- self.btnState:setVisible(false)
	self.btn_get = viewNode:getChildAutoType('btn_get')--GButton
	self.btn_dress = viewNode:getChildAutoType('btn_dress')--GButton
	self.btn_demount = viewNode:getChildAutoType('btn_demount')--GButton
	self.frame = viewNode:getChildAutoType('frame')--GLabel
	local playerIcon = viewNode:getChildAutoType('lihuiDisplay')--GButton
	self.playerIcon = BindManager.bindLihuiDisplay(playerIcon)
	self.playerIcon:setScale(0.45,0.45)
	self.skinList = viewNode:getChildAutoType('skinList/list_skin')--GList
	self.attrDesc = viewNode:getChildAutoType('attrDesc')--GList
	self.txt_checkSkinTitle = viewNode:getChildAutoType('txt_checkSkinTitle')--GTextField
	self.txt_leftTIme = viewNode:getChildAutoType('txt_leftTIme')--GTextField
	self.txt_fashionDec = viewNode:getChildAutoType('txt_fashionDec')--GTextField
	self.txt_fashionName = viewNode:getChildAutoType('txt_fashionName')--GTextField
	self.fashionAttr = viewNode:getChildAutoType('fashionAttr')
	self.playerQIcon = viewNode:getChildAutoType('playerIcon')
	self.playerQIcon = self.playerQIcon:displayObject()
	self.effectLoader = viewNode:getChildAutoType('effectLoader')
	self.btn_hide = viewNode:getChildAutoType('btn_hide')
	self.btn_back = viewNode:getChildAutoType('btn_back')
	self.btn_rotation = viewNode:getChildAutoType('btn_rotation')
	--{autoFieldsEnd}:FashionSuit.FashionView
	--Do not modify above code-------------
end

function FashionView:_initUI( )
	self:_initVM()
   	self:setBg("bg_fashion.jpg")
	self.heroList = self._args.heroList
	self.heroId = self._args.heroId
	self.heroUid = self._args.heroUid
	for i,v in ipairs(self.heroList) do
		if v.uuid == self.heroUid then 
			self.seletedHeroIndex = i
			break
		end
	end
	self.heroData = ModelManager.CardLibModel:getHeroByUid(self.heroUid)
	self.fashionList = FashionModel:getFashionList(self.heroId)
	self.fashionPackData = ModelManager.PackModel:getFashionBag():getFashionPackDataByHeroId(self.heroId)
	--动效
	local x1 = self.effectLoader:getWidth() / 2
    local y1 = self.effectLoader:getHeight() / 2
    self.effectLoader:displayObject():removeAllChildren()
  	SpineUtil.createSpineObj(self.effectLoader, cc.p(x1, y1), "animation", "Effect/UI", "efx_shizhuang", "efx_shizhuang", true)
	self:initBtnArrow()
	self:setSkinList()
end

function FashionView:pack_fashion_change()
	self.skinList:setNumItems(#self.fashionList)
	self.fashionData = ModelManager.PackModel:getFashionBag():getIsHaveFashion(self.fashionList[self.seletedFahionIndex].code)
	self:setLeftTime()
	self:setBtnState(self.fashionList[self.seletedFahionIndex])
	RedManager.updateValue("V_FASHION"..self.fashionList[self.seletedFahionIndex].heroCode..self.fashionList[self.seletedFahionIndex].code, false)
end

function FashionView:cardView_CardAddAndDeleInfo(_,data)
	self.heroData = ModelManager.CardLibModel:getHeroByUid(self.heroUid)
	self.fashionData = ModelManager.PackModel:getFashionBag():getIsHaveFashion(self.fashionList[self.seletedFahionIndex].code)
	self:setBtnState(self.fashionList[self.seletedFahionIndex])
end

function FashionView:setSkinList()
	self.skinList:setItemRenderer(function(idx,obj)
        local index = idx + 1
        if index == 1 or index == #self.fashionList then
            obj:setVisible(false)
        else
            obj:setVisible(true)
       		local data  = self.fashionList[index]
        	local skinCtrl  = obj:getController("skinCtrl")
        	local tagLoader = obj:getController("tagLoader")
       		local noGet  = obj:getChildAutoType("noGet")
       		local label  = obj:getChildAutoType("label")
       		local fashionName  = obj:getChildAutoType("fashionName")
       		local redDot = obj:getChildAutoType("redDot")
       		fashionName:setText(data.name)
            local lhicon = BindManager.bindLihuiDisplay(obj:getChild("heroIconItem/lihuiDisplay"))
			lhicon:setData(data.heroCode,{x=-90,y=-60},nil,data.code)
			lhicon:pause()
       		if data.label == -1 then --默认时装
       			noGet:setVisible(false) 
       			redDot:setVisible(false)
       		else
       			local isHaveFashion = ModelManager.PackModel:getFashionBag():getIsHaveFashion(data.code)
       			noGet:setVisible(not isHaveFashion) 
				RedManager.register("V_FASHION"..self.heroId..data.code, redDot)
       		end
       		if data.label == -1 or data.label == 0 then 
       			label:setVisible(false) 
       		else
       			label:setVisible(true)
           		skinCtrl:setSelectedIndex(data.label)
       		end
       		obj:removeClickListener(6)
			obj:addClickListener(
				function()
					self.seletedFahionIndex = index
					local scrollIndex = self.skinList:getSelectedIndex()+1
					self.skinList:scrollToView(scrollIndex-2,true,true)
					self:doSpecialEffect(true);
				end,6)
        end
    end)
    self.skinList:setData(self.fashionList)
    self.skinList:addEventListener(FUIEventType.Scroll, function(  )
		self:doSpecialEffect(false);
	end)
	self.skinList:addEventListener(FUIEventType.ScrollEnd, function(  )
		self:doSpecialEffect(true);
    end)
    Scheduler.scheduleNextFrame(function()
        self:doSpecialEffect(true);
    end)
end

function FashionView:doSpecialEffect(isEnd)
    if tolua.isnull(self.skinList) then return end
    local  midX = self.skinList:getScrollPane():getPosX() + self.skinList:getViewWidth() / 2;
    local cnt = self.skinList:numChildren();
    for  i = 0,cnt-1 do 
        local obj = self.skinList:getChildAt(i);
        local t_dist = midX - obj:getX() - obj:getWidth() / 2;
        local dist = math.abs(t_dist);
        local ss = (1-math.abs((1.0*dist / 2100)))
        local seleted = obj:getChildAutoType("seleted")
        local mask = obj:getChildAutoType("mask")
        obj:setScale(ss,ss)
        seleted:setVisible(false)
        mask:setVisible(true)
        if dist > obj:getWidth()-2 then --no intersection (不在中间的)
           
        else
            local index = self.skinList:childIndexToItemIndex(i) + 1
            if index == 0 then 
                index = TableUtil.GetTableLen(self.fashionList - 1)
            end
            if isEnd then
       			seleted:setVisible(true)
        		mask:setVisible(false)
            	self.seletedFahionIndex = index
                local data = self.fashionList[index]
                self.fashionData = ModelManager.PackModel:getFashionBag():getIsHaveFashion(data.code)
                self:setFashionDesc(data.skinDesc)
                self:setPlayerQIcon(data.heroCode,data.code)
                self:setPlayerIcon(data.heroCode,data.code)
                self:setAttrDesc(data.attrDesc)
                self:setBtnState(data)
                self:setLeftTime()
                RedManager.updateValue("V_FASHION"..data.heroCode..data.code, false)
            end
        end
    end
end

function FashionView:setLeftTime()
	local expireMS = self.fashionData and self.fashionData:getExpireMS()
	if self.timerKey then
	    TimeLib.clearCountDown(self.timerKey)
	end
	if expireMS then 
		local itemInfo = ItemConfiger.getInfoByCode(self.fashionData:getItemCode()) 
		if itemInfo.existTime > 0 then 
			local timems = math.floor((expireMS - ServerTimeModel:getServerTimeMS()) / 1000)
		 	local function onCountDown(time)
		        if not tolua.isnull(self.txt_leftTIme) then
		        	local str = TimeLib.formatTime(time,true,false)
					self.txt_leftTIme:setText(string.format(Desc.FashionView_LeftTime,str))
		        end
		    end
		    local function onEnd(...)
		        if not tolua.isnull(self.txt_leftTIme) then
		      	 	self.txt_leftTIme:setText(DescAuto[107]) -- [107]="已过期"
		        end
		    end
	   		self.timerKey = TimeLib.newCountDown(timems, onCountDown, onEnd, false, false, false)
		else
			self.txt_leftTIme:setText("")
		end
	else
		self.txt_leftTIme:setText("")
	end
end

function FashionView:setPlayerIcon(heroCode, fashionId)
	self.playerIcon:setData(heroCode,nil,nil,fashionId)
end

function FashionView:setPlayerQIcon(heroCode,fashionId)
	local skeletonNode = SpineMnange.createSprineById(heroCode,true,nil,nil,fashionId)
	skeletonNode:setAnimation(0, "stand", true);
	self.playerQIcon:removeAllChildren()
	self.playerQIcon:addChild(skeletonNode)
end

function FashionView:setFashionDesc(desc)
	if desc == "" then
		self.txt_fashionDec:setVisible(false)
	else
		self.txt_fashionDec:setVisible(true)
		self.txt_fashionDec:setText(desc)
	end
end

function FashionView:setAttrDesc(attrDesc)
	self.attrDesc:setText(attrDesc)
	if attrDesc ~= "" then
		self.fashionAttr:setVisible(true)
	else
		self.fashionAttr:setVisible(false)
	end

	-- if next(attr) ~= nil then
	-- 	self.attrList:setItemRenderer(function(idx,obj)
 --      	  	local index = idx + 1
 --       		local data  = attr[index]
	-- 		local attrName =  Desc["common_fightAttr"..data.type]
	-- 		local attrValue = data.value
	-- 		obj:getChildAutoType("txt_attr"):setText(string.format(Desc.FashionView_Atttr,attrName,attrValue))
	--     end)
	--     self.attrList:setData(attr)
	-- 	self.fashionAttr:setVisible(true)
	-- else
	-- 	self.fashionAttr:setVisible(false)
	-- end
end

function FashionView:setBtnState(fashionData)
	local btnStateCtrl = self.view:getController("btnStateCtrl")     -- 0 未拥有皮肤,1 已拥有皮肤但未穿戴, 2 已拥有皮肤且穿戴
	local wearFashionCode = self.heroData.fashion and self.heroData.fashion.code or false
	local fashionCode = fashionData.code
	if fashionData.label == -1 then --默认皮肤，显示穿戴，卸下穿戴的皮肤
		if wearFashionCode then --卸下
			self.btnState:setVisible(true)
			btnStateCtrl:setSelectedIndex(3)
		else
			self.btnState:setVisible(false)
		end
	else
		self.btnState:setVisible(true)
	    if self.fashionData and (wearFashionCode and wearFashionCode == fashionCode) then   -- 已拥有皮肤且穿戴
	        btnStateCtrl:setSelectedIndex(2)   
	    elseif self.fashionData and (not wearFashionCode or (wearFashionCode and wearFashionCode ~= fashionCode)) then --已拥有皮肤但未穿戴
	        btnStateCtrl:setSelectedIndex(1)
	    else  -- 未拥有皮肤
	        btnStateCtrl:setSelectedIndex(0)
	    end
	end
end


function FashionView:onClickBtnLeftArrow()
	if self.seletedHeroIndex > 1 then 
		self.seletedHeroIndex = self.seletedHeroIndex - 1
		self.heroId = self.heroList[self.seletedHeroIndex].heroId
		self.heroUid = self.heroList[self.seletedHeroIndex].uuid
		self.fashionList = FashionModel:getFashionList(self.heroId)
		self.heroData = ModelManager.CardLibModel:getHeroByUid(self.heroUid)
		self:setSkinList()
		if self.seletedHeroIndex <= 1 then 
			self.btn_leftArrow:setVisible(false) 
			self.btn_rightArrow:setVisible(true) 
		else
			self.btn_rightArrow:setVisible(true) 
			self.btn_leftArrow:setVisible(true) 
		end
	end
end

function FashionView:onClickBtnRightArrow()
	if self.seletedHeroIndex < #self.heroList then 
		self.seletedHeroIndex = self.seletedHeroIndex + 1
		self.heroId = self.heroList[self.seletedHeroIndex].heroId
		self.heroUid = self.heroList[self.seletedHeroIndex].uuid
		self.fashionList = FashionModel:getFashionList(self.heroId)
		self.heroData = ModelManager.CardLibModel:getHeroByUid(self.heroUid)
		self:setSkinList()
		if self.seletedHeroIndex >= #self.heroList then 
			self.btn_rightArrow:setVisible(false) 
			self.btn_leftArrow:setVisible(true) 
		else
			self.btn_rightArrow:setVisible(true) 
			self.btn_leftArrow:setVisible(true) 
		end
	end
end

function FashionView:initBtnArrow()
	if #self.heroList == 1 then
		self.btn_leftArrow:setVisible(false) 
		self.btn_rightArrow:setVisible(false) 
	elseif self.seletedHeroIndex <= 1 then 
		self.btn_leftArrow:setVisible(false) 
		self.btn_rightArrow:setVisible(true) 
	elseif self.seletedHeroIndex >= #self.heroList then 
		self.btn_leftArrow:setVisible(true) 
		self.btn_rightArrow:setVisible(false) 
	else
		self.btn_leftArrow:setVisible(true) 
		self.btn_rightArrow:setVisible(true) 
	end
end

function FashionView:_exit()
    TimeLib.clearCountDown(self.timerKey)
end

return FashionView
