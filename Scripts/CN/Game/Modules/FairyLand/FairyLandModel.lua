--Name : FairyLandModel.lua
--Author : generated by FairyGUI
--Date : 2020-4-15
--Desc : 


local FairyLandModel = class("FairyLandModel", BaseModel)


function FairyLandModel:ctor()
	self.floor = 1 --当前在第几层
	self.floorFlag = 1 	-- 显示层数用
	self.grid = 1 --当前在第几格
	self.moveNum = 0 --还可以移动的步数
	self.status = 0 --状态 1磁铁
	self.gridInfo = false --当前格子数据
	self.gotRewards = {} --已经领取奖励的格子
	self.reward = false --当前格的奖励
	self.records = {} --当前层的奖励

	self.forWardTime = 0  -- 今日剩余免费随机前进次数
	self.luckEventTimes = 0 -- 每日剩余幸运事件次数
	self.sieveTimes 	= 0 -- 本层掷筛子次数
	self.isGetSieveReward = false
	self.moving 	= false -- 是否在移动中

	self.mapIndex 	= 1 	-- 地图选择
	self.autoNext 	= false 	-- 是否自动滚动
end


function FairyLandModel:addGetRewardGrid()
	if not self.gotRewards[self.floor] then
		self.gotRewards[self.floor] = {}
	end
	table.insert(self.gotRewards[self.floor], self.grid)
	Dispatcher.dispatchEvent(EventType.fairyLand_gotRewardUpdate, {floor = self.floor, grid = self.grid})
end

-- 秘境寻宝次数达到后自动弹出奖励
function FairyLandModel:tipsReward()
	local floor 	= self.floorFlag
	local sieveTimes = self.sieveTimes
	floor = floor > 7 and 7 or floor
	local data 		=  DynamicConfigData.t_times[floor]
	if not data then return end
	local info = {data=data,sieveTimes = sieveTimes}
	if sieveTimes >= data.timeslimit and  (not self.isGetSieveReward)then
		RPCReq.FairyLand_GetTimesReward({},function(param)
			self.isGetSieveReward = true
			FileCacheManager.setIntForKey("FairyLand_floor",ModelManager.FairyLandModel.floorFlag)
			FileCacheManager.setBoolForKey("FairyLand_reward",true)
		end)
	end
end


--这个是更新信息
function FairyLandModel:updateInfo(info)
	--printTable(8848,"info",info)
	if(not info) then return end
	if info and info.floor and FileCacheManager.getIntForKey("FairyLand_floor",0) >= info.floor then
		FileCacheManager.setBoolForKey("FairyLand_reward",false)
	end
	self.floor = info.floor
	self.floorFlag = info.floor
	self.mapIndex = ((self.floor%4) == 0) and 4 or (self.floor % 4)
	if self.mapIndex == 1 then 
		self.mapIndex = 2 
	elseif self.mapIndex == 2 then
		self.mapIndex = 1
	end
	local rewardLen = TableUtil.GetTableLen(DynamicConfigData.t_fairyLand)
	self.floor = ((self.floor % rewardLen) == 0) and rewardLen or (self.floor % rewardLen)
	self.grid = info.grid
	self.moveNum = info.moveNum
	self.sieveTimes = info.sieveTimes ~= nil and info.sieveTimes or 0
	self.status = info.status ~= nil and info.status or 0
	self.gridInfo = info.gridInfo ~= nil and info.gridInfo or false
	self.reward = info.reward ~= nil and info.reward or false
	self.isGetSieveReward = info.isGetSieveReward ~= nil and info.isGetSieveReward or false
	if info.records then self.records = info.records end
	self.forWardTime = info.freeRunTimes
	self.luckEventTimes = info.luckEventTimes
	if self.moveNum == 0 and (not info.reward) and (not info.gridInfo) then
		self:tipsReward()
	end

	Dispatcher.dispatchEvent(EventType.fairyLand_updateInfo)
	Dispatcher.dispatchEvent(EventType.fairyLand_refresh)
end

--这个是登陆时获取到的信息
function FairyLandModel:initData(info)
	-- printTable(8848,"info",info)
	if not info then return end
	if info and info.floor and FileCacheManager.getIntForKey("FairyLand_floor",0) >= info.floor then
		FileCacheManager.setBoolForKey("FairyLand_reward",false)
	end
	self.floor = info.floor
	self.floorFlag = info.floor
	self.mapIndex =  ((self.floor%4) == 0) and 4 or (self.floor % 4)
	if self.mapIndex == 1 then 
		self.mapIndex = 2 
	elseif self.mapIndex == 2 then
		self.mapIndex = 1
	end
	local rewardLen = TableUtil.GetTableLen(DynamicConfigData.t_fairyLand)
	self.floor = ((self.floor % rewardLen) == 0) and rewardLen or (self.floor % rewardLen)
	self.grid = info.grid
	self.moveNum = info.moveNum
	self.sieveTimes = info.sieveTimes ~= nil and info.sieveTimes or 0
	self.status = info.status ~= nil and info.status or 0
	self.gridInfo = info.gridInfo ~= nil and info.gridInfo or false
	self.gotRewards[self.floor] = info.gotRewards
	self.records = info.records ~= nil and info.records or {}
	self.forWardTime = info.freeRunTimes
	self.luckEventTimes = info.luckEventTimes
	self.isGetSieveReward = info.isGetSieveReward ~= nil and info.isGetSieveReward or false
	print(1,ModelManager.FairyLandModel.gridInfo)
	
	Dispatcher.dispatchEvent(EventType.fairyLand_updateInfo)
	Dispatcher.dispatchEvent(EventType.fairyLand_gotRewardUpdate,{floor = self.floor, grid = self.grid})
end
 
-- 获取每日剩余免费随机前进次数
function FairyLandModel:getFreeForwardTime()
 	return self.forWardTime
end

function FairyLandModel:setFreeForwardTime(time)
	self.forWardTime = time
end

-- 每日剩余幸运事件次数
function FairyLandModel:getLuckEventTimes()
	return self.luckEventTimes
end


--是否奖励已领取
function FairyLandModel:isRewardGot(floor, grid)
	if self.gotRewards[floor] then
		for _,v in pairs(self.gotRewards[floor]) do
			if(v == grid) then
				return true
			end
		end
	end
	return false
end

--是否达到最小次数了(次数配置一共七层，如果大于七层，拿第七层的配置)
function FairyLandModel:reachTimesLimit()
	local floor = self.floorFlag
	if floor >= #DynamicConfigData.t_times then
		floor = #DynamicConfigData.t_times
	end
	local data = DynamicConfigData.t_times[floor]
	return ModelManager.FairyLandModel.sieveTimes >= data.timeslimit
end

function FairyLandModel:redCheck()
	RedManager.updateValue("V_FAIRYLAND", ModelManager.PackModel:getItemsFromAllPackByCode(10000023) > 0)
	-- RedManager.updateValue("V_FAIRYLAND_EX", ModelManager.PackModel:getItemsFromAllPackByCode(10000024) > 0)
end

function FairyLandModel:init()

end


return FairyLandModel
