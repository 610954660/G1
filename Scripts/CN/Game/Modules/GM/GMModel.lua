--Name : GMModel.lua
--Author : generated by FairyGUI
--Date : 2020-3-17
--Desc : 

--local xml = require("Game.Modules.GM.xmlSimple").newParser()
local GMModel = class("GMModel", BaseModel)
local lfs
if CC_TARGET_PLATFORM == CC_PLATFORM_WIN32 then
	lfs = require "lfs"
end



function GMModel:ctor()
	self.currentFolder = "D:\\work\\TrunkClient\\Resources\\Scripts\\CN"
	self.currentAssets = false
	self.gameStartTime = 0
	self.changeLuaFile = {}
	self.Folderlen = string.len(self.currentFolder)
	self.logData = {}
	
	self.lastOpenView = {}
	self.gameSpeed = 1
	--self.xmltest = xml:ParseXmlText(io.readfile("D:\\work\\TrunkClient\\FGUIProject\\G1\\FGUIProject\\assets\\common\\package.xml"))
end

function GMModel:init()
	self.gameStartTime = os.time()
	print(33,"gameStartTime = ",self.gameStartTime)
	local directoryType = gy.GYScriptManager:getInstance():getScriptFolderName()
	local Language = gy.GYScriptManager:getInstance():getLanguageBase()
	local path = cc.FileUtils:getInstance():getWritablePath()
	path = string.gsub (path, "/","\\")
	self.currentAssets = string.gsub (path, "Runtime\\Win\\whale","Resources")
	path = string.gsub (path, "Runtime\\Win\\whale","Resources\\"..directoryType.."\\"..Language)
	
	self.currentFolder = path
	self.Folderlen = string.len(self.currentFolder)
	-- self:findChangeLua();
	--self:find_rgd()
	
end

function GMModel:findindir (path, wefind,time, r_table, intofolder)
	for file in lfs.dir(path) do
		--print(33,file)
		if file ~= "." and file ~= ".." then
			local f = path..'\\'..file
			--print (33,file)
			local attr = lfs.attributes (f)
			assert (type(attr) == "table")
			if attr.mode == "directory" and intofolder then
				self:findindir (f, wefind, time,r_table, intofolder)
			else
				if string.find(f, wefind) then

				--print(33,"attr.modification ",attr.modification,time)
					if time and attr.modification and tonumber(attr.modification) > tonumber(time) then
						local str = f
						--print(33,"sdd ",self.Folderlen,string.len(f))
						str = str.sub(str,self.Folderlen + 2 , -5)
						str = string.gsub (str, "\\",".")
						table.insert(r_table, str)
					end
				end
			end
		end
	end
end

function GMModel:findChangeLua(reLoad,callback)
	print(1,"findChangeLua")
	self.changeLuaFile = {}
	
	self:findindir(self.currentFolder, "%.lua",self.gameStartTime, self.changeLuaFile, true)--查找lua文件
	
	self.gameStartTime = os.time()
	if  #self.changeLuaFile<=0 then
		-- LuaLogE("无差异lua脚本文件")
	end
	for i = 1, #self.changeLuaFile do
		if reLoad and package.loaded[self.changeLuaFile[i]] then
			LuaLogE("==========================reload lua:",self.changeLuaFile[i])
			package.loaded[self.changeLuaFile[i]] = nil
			local cls = require(self.changeLuaFile[i])
			if string.find(self.changeLuaFile[i],"Controller") then
	    		ControllerManager.reloadController(self.changeLuaFile[i], cls)
	    	end
			
		end
	end 
	--for k, v in pairs(package.loaded["GMModel"]) do
		--print(33,"PlayerModel:",k, v)
	--end
	if callback then
		callback(self.changeLuaFile)
	end
	return self.changeLuaFile
end


function GMModel:find_rgd()
	print(1,"findChangeLua")
	local _rgdFiles = {}
	
	
	local function findimage (path, wefind, r_table, intofolder)
		for file in lfs.dir(path) do
			--print(33,file)
			if file ~= "." and file ~= ".." then
				local f = path..'\\'..file
				--print (33,file)
				local attr = lfs.attributes (f)
				assert (type(attr) == "table")
				--print(33,f)
				if attr.mode == "directory" and intofolder then
					findimage (f, wefind,r_table, intofolder)
				else
					
					--print(33,string.sub(f,string.len(f)-3,string.len(f)),wefind)
					--if string.sub(f,string.len(f)-5,string.len(f)) == wefind then
						--table.insert(r_table, f)
						----break
					--end
					if string.find(file,wefind)then
						table.insert(r_table, f)
						--print(33,file)
						--break
					end
					--print(33,"attr.modification ",attr.modification,time)
					
					
					
				end
			end
		end
	end
	
	findimage("D:\\work\\TrunkClient\\Resources\\Assets_rgd", "_rgd", _rgdFiles, true)--查找lua文件
	

	for i = 1, #_rgdFiles do
		--print(33,string.sub(_rgdFiles[i],1,-5))
		print(33,_rgdFiles[i])
		os.rename(_rgdFiles[i],string.sub(_rgdFiles[i],1,-5))
	end 

	return _rgdFiles
end

function GMModel:getLuaFileTime (file)
	local ft = string.split(file,".")
	
	local path = self.currentFolder..table.concat(ft, "\\")..".lua"
	
	local attr = lfs.attributes (path)
	if attr then
		return attr.modification
	end
	
	return 0
end


function GMModel:getData(fmt,num,showfun,searText)

	local fmt_type = type(fmt);

	if fmt_type =="table" then
		local listData = {};
		local function getKeyValue(k,v)
			--print(33,k,v)
			local d = {}
			d.k = k
			if num < 1 then
				d.v = tostring(v)
			elseif self.isG then
				d.v = tostring(v)
			else
				d.v = self:getData(v,num-1,showfun,searText)
			end

			if v and type(v) == "table" then
				d.vn = "["..#d.v.."]"..tostring(v)
			end
			if d.v then
				if searText == false then
					table.insert(listData,d)
				else
					if string.find(string.lower(tostring(k)),string.lower(searText)) or
						string.find(string.lower(tostring(v)),string.lower(searText)) then
						table.insert(listData,d)
					end

				end

			end


		end

		for k,v in pairs(fmt) do
			xpcall(getKeyValue,__G__TRACKBACK__,k,v)
		end
		return listData
	elseif fmt_type =="nil" then
		return "nil"
	elseif fmt_type =="number" then
		return tostring(fmt)
	elseif fmt_type =="string" then
		if fmt == "" then
			return fmt..'""'
		else
			return fmt
		end

	elseif fmt_type =="boolean" then
		if fmt then
			return "true"
		else
			return "false"
		end
	elseif fmt_type =="function" then
		if not showfun then
			return
		else
			return fmt_type
		end
	else
		return fmt_type
	end
end

function GMModel:doTest (keyCode)
	if keyCode == cc.KeyCode.KEY_F3 then
		--ViewManager.open("HerobookView",{page="ActivationCodeView"})
		--Alert.show("sss")
		--RollTips.show("sss")
		--ModuleUtil.openModule(4)
		--cc.TextureCache:getInstance():setAliasTexParameters()
		--ViewManager.open("GetHeroCardShowView",{data = {type=4,code=35002,acount=1}})
		--ViewManager.backToMainView()
		--ViewManager.open("TestView")
		--(?<=%[)(.*?)(?=%])
		ViewManager.open("PveStarTempleCardResultView",{myCard = 2,targetCard = 1,result = 0})
		--ViewManager.open("PveStarTempleSelectView")
		--ViewManager.open("PveStarTempleMainView")

	elseif keyCode == cc.KeyCode.KEY_F7 then
		if self.gameSpeed >-2 and self.gameSpeed < 2 then
			self.gameSpeed = self.gameSpeed - 0.1
		else
			self.gameSpeed = self.gameSpeed - 0.4
		end
		cc.Director:getInstance():getScheduler():setTimeScale(self.gameSpeed)
		local str = "游戏速度：%.1f"
		RollTips.show(str:format(self.gameSpeed))
	elseif keyCode == cc.KeyCode.KEY_F8 then
		if self.gameSpeed >-2 and self.gameSpeed < 2 then
			self.gameSpeed = self.gameSpeed + 0.1
		else
			self.gameSpeed = self.gameSpeed + 0.4
		end
		cc.Director:getInstance():getScheduler():setTimeScale(self.gameSpeed)
		local str = "游戏速度：%.1f"
		RollTips.show(str:format(self.gameSpeed))
	end
	
end

function  GMModel:addView( viewInfo )
	if CC_TARGET_PLATFORM == CC_PLATFORM_WIN32  then
		table.insert(self.lastOpenView,viewInfo)
	end
end

function  GMModel:removeView( viewName )
	if CC_TARGET_PLATFORM == CC_PLATFORM_WIN32  then
		for k,v in pairs(self.lastOpenView) do
			if v.name == viewName then
				table.remove(self.lastOpenView,k)
				break
			end
		end
	end
end

function  GMModel:closeLastView( )
	local curN = #self.lastOpenView
	print(33,"findLastView ",curN)
	if  curN > 0 then
		local view = self.lastOpenView[curN]
		if view and view.window and not tolua.isnull(view.window.view) then
			
			if view.name == "MainUIView" then
				local info = {}
				info.text = Desc.login_changetips
				info.type = "yes_no"
				info.onYes = function()
					FlowManager.backToLogin()
				end
				Alert.show(info)
			elseif view.name == "LoginView" then

			else
				print(33,"close view "..view.name)
				local viewInfo = ViewManager.getViewInfo(view.name)
				if viewInfo and viewInfo.window then
					viewInfo.window:closeView()   --有部分view重写了closeView的，有的话，要调它的closeView(例如GetSuccess1View)
				else
					ViewManager.close(view.name)
				end
			end
		else
			self.lastOpenView[curN] = nil
		end
	end
end

function GMModel:regOpenWay()
	local view = ViewManager.getParentLayer(LayerDepth.UIEffect)
	local layer = cc.Layer:create()
	view:displayObject():addChild(layer)
	
	local obj = view:displayObject()

	local function checkTouch(point,rect)
		if cc.rectContainsPoint(rect,cc.p(point.x, point.y)) then
			return true
		end
		return false
	end
	
	local rectArr = {cc.rect(0, display.height-100, 100, 100),cc.rect(0, display.height-100, 100, 100)
		,cc.rect(display.width-100, 0, 100, 100),cc.rect(display.width-100, 0, 100, 100),cc.rect(display.width-100, display.height-100, 100, 100),cc.rect(0, display.height-100, 100, 100)}
	local clickStep = 1
	local beginPos = false
	local checkIng = false
	
	local listener = cc.EventListenerTouchOneByOne:create()
	listener:setSwallowTouches(false)
	listener:registerScriptHandler(function (touch,event)
			DeviceUtil.screenPowerCheckUpdate()
			local point = touch:getLocation()
			--printTable(33,"touch begin = ",point)
			if checkTouch(point,rectArr[clickStep]) then
				print(33,"clickStep = ",clickStep)
				clickStep = clickStep + 1
				if clickStep > #rectArr then
					beginPos = point
					checkIng = true
					clickStep = 1
					print(33,"move begin = ",clickStep)
					return true
				end
			else
				clickStep = 1
			end
			
			checkIng = false
			return false
		end, cc.Handler.EVENT_TOUCH_BEGAN)
	listener:registerScriptHandler(function (touch,event)
			local point = touch:getLocation()
			if checkIng and beginPos.x-5 <= point.x and beginPos.y+5 >= point.y then
				beginPos = point
			else
				checkIng = false
			end
			--print(33,"checkIng = ",checkIng,beginPos.x,beginPos.y,point.x,point.y)
		end, cc.Handler.EVENT_TOUCH_MOVED)
	listener:registerScriptHandler(function (touch,event)
			local point = touch:getLocation()
			--printTable(33,"touch end = ",point)
			
			if checkIng and checkTouch(point,rectArr[3]) then
				GMView.staticCall("open")
			end
			clickStep = 1
		end, cc.Handler.EVENT_TOUCH_ENDED)
	obj:getEventDispatcher():addEventListenerWithSceneGraphPriority(listener, obj)
	
end

--// The Save Function
function GMModel:saveTableToFile(  tbl,filename,sort_parent, sort_child)
	local str = self:serialize(tbl,sort_parent,sort_child)
	self:writefile(str,filename)
end

function GMModel:serialize(t, sort_parent, sort_child)
	local mark={}
	local assign={}

	local function ser_table(tbl,parent)
		mark[tbl]=parent
		local tmp={}
		local sortList = {};
		for k,v in pairs(tbl) do
			sortList[#sortList + 1] = {key=k, value=v};
		end

		if tostring(parent) == "ret" then
			if sort_parent then table.sort(sortList, sort_parent); end
		else
			if sort_child then table.sort(sortList, sort_child); end
		end

		for i = 1, #sortList do
			local info = sortList[i];
			local k = info.key;
			local v = info.value;
			local key= type(k)=="number" and "["..k.."]" or k;
			if tostring(parent) == "ret" then
				
			else
				key = "\t"..key
			end
			if type(v)=="table" then
				local dotkey= parent..(type(k)=="number" and key or "."..key)
				if mark[v] then
					table.insert(assign,dotkey.."="..mark[v])
				else
					table.insert(tmp, "\n"..key.."="..ser_table(v,dotkey))
				end
			else
				if type(v) == "string" then
					table.insert(tmp, key..'="'..v..'"');
				else
					table.insert(tmp, key.."="..tostring(v));
				end
			end
		end

		return "{\n\t"..table.concat(tmp,",\n\t").."\n\t}";
	end

	return "return \n"..ser_table(t,"ret")..table.concat(assign," ").."\n"
end

function GMModel:writefile(str, file)
	os.remove(file);
	local file=io.open(file,"ab");

	local len = string.len(str);
	local tbl = string.split(str, "\n");
	for i = 1, #tbl do
		file:write(tbl[i].."\n");
	end
	file:close();
end

return GMModel
