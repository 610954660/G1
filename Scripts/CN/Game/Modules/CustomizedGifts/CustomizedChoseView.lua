--Date :2020-11-11
--Author : generated by FairyGUI
--Desc : 

local CustomizedChoseView,Super = class("CustomizedChoseView", Window)

function CustomizedChoseView:ctor()
	--LuaLog("CustomizedChoseView ctor")
	self._packName = "CustomizedGifts"
	self._compName = "CustomizedChoseView"
	self._rootDepth = LayerDepth.PopWindow
	
end

function CustomizedChoseView:_initEvent( )
	
end

function CustomizedChoseView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:CustomizedGifts.CustomizedChoseView
	self.blackbg = viewNode:getChildAutoType('blackbg')--GLabel
	self.choseGiftFrame = viewNode:getChildAutoType('choseGiftFrame')--choseGiftFrame
		self.choseGiftFrame.btn_yes = viewNode:getChildAutoType('choseGiftFrame/btn_yes')--GButton
		self.choseGiftFrame.choseList = viewNode:getChildAutoType('choseGiftFrame/choseList')--GList
		self.choseGiftFrame.frame = viewNode:getChildAutoType('choseGiftFrame/frame')--GLabel
		self.choseGiftFrame.gradeList = viewNode:getChildAutoType('choseGiftFrame/gradeList')--GList
	self.dfsf = viewNode:getController('dfsf')--Controller
	--{autoFieldsEnd}:CustomizedGifts.CustomizedChoseView
	--Do not modify above code-------------
end

function CustomizedChoseView:_initUI( )
	self:_initVM()
	local choseData = clone(self._args.choseItem)
	local selectId = self._args.index and self._args.index - 1 or 0
	local c1 = self.choseGiftFrame:getController("c1")
	c1:setSelectedIndex(0)
	if #choseData > 2 then
		c1:setSelectedIndex(#choseData-2)
	end
	local gradeList = DynamicConfigData.t_CLGiftChonse[self._args.grade[selectId+1]]
	
	self.choseGiftFrame.choseList:setItemRenderer(function(idx2,obj2)
			local reward = choseData[idx2+1]
			obj2:getController("c1"):setSelectedIndex(1)
			local itemCell = BindManager.bindItemCell(obj2:getChildAutoType("itemcell"))
			obj2.itemcells = itemCell
			if reward.code ~= 0 then
				obj2:getController("state"):setSelectedIndex(2)
				itemCell:setData(reward.code,reward.amount,reward.type)
				obj2:getChildAutoType("itemcell"):removeClickListener(33)
			else
				obj2:getController("state"):setSelectedIndex(0)
				
			end
			obj2:addClickListener(function()
					for k = 1, #gradeList do
						if gradeList[k].item[1].id == choseData[idx2+1].id then
							gradeList[k].objs:getChildAutoType("gou"):setVisible(true)
						else
							gradeList[k].objs:getChildAutoType("gou"):setVisible(false)
						end
					end
					selectId = idx2
					gradeList = DynamicConfigData.t_CLGiftChonse[self._args.grade[idx2+1]]
					self.choseGiftFrame.gradeList:setData(gradeList)
				end,33)
			
			local remove = obj2:getChildAutoType("remove")
			remove:addClickListener(function()
					obj2:getController("state"):setSelectedIndex(0)
					obj2:getChildAutoType("itemcell"):removeClickListener(33)
					choseData[idx2+1] = {type=0,code=0,amount=0,id = 0}
					for k = 1, #gradeList do
						gradeList[k].objs:getChildAutoType("gou"):setVisible(false)
					end
				end,33)
			
		end)
	self.choseGiftFrame.choseList:setData(choseData)
	if selectId then
		self.choseGiftFrame.choseList:setSelectedIndex(selectId)
	end
	
	
	self.choseGiftFrame.gradeList:setItemRenderer(function(idx2,obj2)
			local reward = self.choseGiftFrame.gradeList._dataTemplate[idx2+1].item[1]
			gradeList[idx2+1].objs = obj2
			reward.id = idx2+1
			local itemCell = BindManager.bindItemCell(obj2:getChildAutoType("itemcell"))
			itemCell:setData(reward.code,reward.amount,reward.type)
			obj2:getController("state"):setSelectedIndex(3)
			obj2:getChildAutoType("gou"):setVisible(false)

			if choseData[selectId+1].id == reward.id then
				obj2:getChildAutoType("gou"):setVisible(true)
			end

			obj2:getChildAutoType("itemcell"):addClickListener(function(context)
					local selectIndex = self.choseGiftFrame.choseList:getSelectedIndex()
					local childIndex = self.choseGiftFrame.choseList:itemIndexToChildIndex(selectIndex)
					local itemObj = self.choseGiftFrame.choseList:getChildAt(childIndex)
					itemObj:getController("state"):setSelectedIndex(2)
					itemObj.itemcells:setData(reward.code,reward.amount,reward.type)
					itemObj:getChildAutoType("itemcell"):removeClickListener(33)
					choseData[selectIndex+1] = reward
					
					for k = 1, #gradeList do
						gradeList[k].objs:getChildAutoType("gou"):setVisible(false)
					end
					obj2:getChildAutoType("gou"):setVisible(true)
				end,33)

		end)
	self.choseGiftFrame.gradeList:setData(gradeList)
	
	
	self.choseGiftFrame.btn_yes:addClickListener(function()
			local data = {}
			data.id = self._args.id
			data.activityType = GameDef.ActivityType.CustomLimitGift
			data.setItems = {}
			for i = 1, #choseData do
				
				if choseData[i].id == 0 then
					printTable(33,"choseData",choseData)
					RollTips.show(Desc.CustomizedGifts_nofull)
					return
				end
				local info = {}
				info.index = i
				info.chosenId = choseData[i].id
				table.insert(data.setItems,info)
			end
			printTable(33,"Activity_CustomLimitGift_SetReward",data)
			RPCReq.Activity_CustomLimitGift_SetReward(data)
			--function()
				--CustomizedGiftsModel.giftData[data.id].citem = choseData
				--if tolua.isnull(self.view) then return end

				--RollTips.show("保存成功")
			--end
			self:closeView()
	end)
	self.choseGiftFrame.frame:getChildAutoType("closeButton"):addClickListener(function()
			self:closeView()
		end)
	
end




return CustomizedChoseView