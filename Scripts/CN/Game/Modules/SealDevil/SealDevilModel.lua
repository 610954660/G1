--Date :2020-12-29
--Author : generated by FairyGUI
--Desc : 

local SealDevilModel = class("SealDevil", BaseModel)

function SealDevilModel:ctor()
	
	self.mapGridList={}
	self.mapData={}
	self.gate=1  --关卡
	self.openGrids={}
	
	self.mapGrids={}
	
	
	self.playerGrid=false
	
	self.gridResult=false
	
	self.curGate=1
	self.gateInfo={}
	self.curBuffs={}
	
	self.showTip=true
	self.haveShowRed=false
	
	
end

function SealDevilModel:init()

end

function SealDevilModel:setMapGridInfo(mapGrids)
	self.mapGrids=mapGrids
end

function SealDevilModel:initData(data)
	--self.mapData=data

	--self.gateData.gateInfo= data
	if not data then
		return 
	end
	self.curGate=data.curGate 
	self.gateInfo=data.gateInfo
	
	local allGate=DynamicConfigData.t_DevilRoadGate
	local lockNext=true
	for k, v in ipairs(allGate) do		
		if self.gateInfo[k] then
			self.gateInfo[k].unLock=true
	    else
			self.gateInfo[k]={unLock= k==1 or self.gateInfo[k-1].pass}
			break;
		end	
	end
	
	printTable(5656,"封魔之路关卡数据",data)
	self:redCheck()
	
	--for k, v in pairs(data.gateInfo) do
		--if v.pass then
			
		--end
		--table.insert()
	--end
	
	--if gateInfo then
		--self:setMapData(gateInfo)
	--else
		--self:setPlayerGrid(self.mapData[1])
	--end

end



--选择关卡
function SealDevilModel:chooseGate(gateId,finished)
	self.gate=gateId
	self.curGate=gateId
	local params={
		gateId=self.gate
		
	}
	
	local function success (fightInfo)
		printTable(5656,"关卡选择信息---",fightInfo)
		self:setMapData(fightInfo.data)
		if finished then
		   finished()
		end	
	end
	RPCReq.DevilRoad_PickGate(params,success)
end

--设置当前关卡通关
function SealDevilModel:setCurGatePass()
	self.gateInfo[self.curGate].pass=true
	self:initData({curGate=self.curGate,gateInfo=self.gateInfo})
	Dispatcher.dispatchEvent(EventType.DevilRoad_unLockLevel)
	self:updateRed()
	
end




--获取地图信息
function SealDevilModel:getMapData()
	return self.mapData
end



function SealDevilModel:getMapConfig()
	return DynamicConfigData.t_DevilRoad[self.gate]
end

function SealDevilModel:getPlayerGrid()
	return self.playerGrid
end


function SealDevilModel:setPlayerGrid(gridInfo)
	
	local mapConfig=self:getMapConfig()
	self.playerGrid=gridInfo
end


function SealDevilModel:checkCanMeve(id)
    return self.openGrids[id]
end



function SealDevilModel:setMapGrid(list)
	self.mapGridList=list
end



function SealDevilModel:devilRoad_challege(gridInfo,finished)
	Dispatcher.dispatchEvent(EventType.battle_requestFunc,function(eventName)
			if eventName == "begin" then
				RPCReq.DevilRoad_Challenge({id=gridInfo.id})
			elseif eventName == "end" then
				self:devilRoad_ChooseResult(2,function(data)
					 Dispatcher.dispatchEvent(EventType.DevilRoad_MoveGrid,gridInfo.point[1])
					 if finished then
						 finished(data)	
					 end
					 
				end)
			end
	end,{fightID = gridInfo.fightId,configType = GameDef.battleArrayType.DevilRoad,index=gridInfo.id})

	--RPCReq.DevilRoad_Challenge
end



--选择结果
function SealDevilModel:devilRoad_ChooseResult(value,finished)

	
	RewardModel:setSkipBattleData(RewardModel:getArrayType())
	local function success(res)
		if value==1 then
			if finished then
				finished()
			end
			return 
		end
		if res.result==false then
			ViewManager.open("ReWardView",{page=0,isWin=false,showLose=true})
		else
			self.gridResult=res
			--local gridInfo=res.data.gridInfo
			if finished then
				finished(res.data)
				Dispatcher.dispatchEvent(EventType.DevilRoad_updateGrid,res.data)
			end
		end
	end
	local params={
		value=value
	}
	
	RPCReq.DevilRoad_ChooseResult(params,success)
end


--重置关卡
function SealDevilModel:devilRoad_Reset()
	local function success(res)
		printTable(5656,res,"重置后的数据")
		self:setMapData(res.data)
		self.gateInfo[self.curGate].grids=res.data.grids
		self:updateRed()
		Dispatcher.dispatchEvent(EventType.DevilRoad_Reset)
	end
	local params={
		

	}
	RPCReq.DevilRoad_Reset(params,success)
end



--移动跳到那个格子
function SealDevilModel:devilRoad_Jump(gridInfo,finished)
	local function success(res)
		printTable(5656,"跳到格子返回",res)
		Dispatcher.dispatchEvent(EventType.DevilRoad_MoveGrid,gridInfo.point[1])
		if res.data.gridInfo.status==0 then
			Dispatcher.dispatchEvent(EventType.DevilRoad_updateGrid,res.data)
		end
		--Dispatcher.dispatchEvent(EventType.DevilRoad_updateGrid,res.data)
		if finished then
			finished(res)
		end
	end
	local params={
		id=gridInfo.id
	}
	RPCReq.DevilRoad_Jump(params,success)
end


--格子上有道具的操作事件
function SealDevilModel:devilRoad_Action(value,finished)
	local function success(res)
		printTable(5656,"格子事件操作",res)
		if finished then
			finished()
		end	
		if res.data.gridInfo then
			if not self.gateInfo[self.curGate].grids then
				self.gateInfo[self.curGate].grids={}
			end
			self.gateInfo[self.curGate].grids[res.data.gridInfo.id]=res.data.gridInfo
			self:updateRed()
		end
		Dispatcher.dispatchEvent(EventType.DevilRoad_updateGrid,res.data)
	end
	local params={
		value=value
	}
	RPCReq.DevilRoad_Action(params,success)
end



function SealDevilModel:setMapData(gateInfo)

	self.curBuffs=gateInfo.buffs
	self.mapData=self:getMapConfig()
	self.openGrids={}
	for k, v in pairs(self.mapData) do
		if k==1 then
			v.status=1
			self:setNextOpen(v)--出生点
		else
			v.status=-1
		end

	end
	
	self:setPlayerGrid(self.mapData[gateInfo.curGrid])
	
	
	if not gateInfo.grids then
		return
	end
	
	if next(gateInfo.grids)~=nil then
		for k, v in pairs(gateInfo.grids) do
			self.mapData[v.id].status=v.status 
			if v.status and v.status~=2 and v.status~=-1 then --已联通的路线
				self:setNextOpen(self.mapData[v.id])
			end
		end
	end
end



--打开一个开放点
function SealDevilModel:setNextOpen(gridInfo)
	self.openGrids[gridInfo.id]=gridInfo
	for k, v in pairs(gridInfo.nextId) do
		local noOpen=false

		if next(gridInfo.nextId2)~=nil and gridInfo.type==GameDef.DevilRoadGridType.Pass then --泉水未传送的时候不能开发传送通道
			for k, v2 in pairs(gridInfo.nextId2) do
				if v==v2 then
					noOpen=true
				end
			end
		end
		if self.mapData[v] and not noOpen then
			self.openGrids[v]=self.mapData[v]
		end
	end
end

function SealDevilModel:getMapGrid(id)
	return self.mapGridList[id]
end


--设置关卡被打开
function SealDevilModel:setGateOpen(gate)
	FileCacheManager.setBoolForKey(PlayerModel.userid..GameDef.battleArrayType.DevilRoad.."_"..gate,true,false,false)
end

--检查关卡是否已经打开过
function SealDevilModel:getGateOpen(gate)
	return FileCacheManager.getBoolForKey(PlayerModel.userid..GameDef.battleArrayType.DevilRoad.."_"..gate,false,false,false)
end

function SealDevilModel:redCheck()
	GlobalUtil.delayCallOnce("FullsrGiftModel:redCheck",function()
			self:updateRed()
		end, self, 0.2)
end


function SealDevilModel: updateRed()
	local towerLayer = ModelManager.PataModel:getPataFloor(GameDef.GamePlayType.NormalTower)
	local allGate=DynamicConfigData.t_DevilRoadGate
	local haveRed=false

	for k, v in ipairs(self.gateInfo) do
		local gateConfig=allGate[k]
		local hadOpen=towerLayer>gateConfig.openCondt[1].level
		local hadChall=false
		if self.gateInfo[k].grids  then
			for k1, v1 in pairs(self.gateInfo[k].grids) do
				if k1~=1 then --有其它数据 显示红点
					hadChall=true
				end
			end
		end
		if hadOpen and self.gateInfo[k].unLock and not self.gateInfo[k].pass and (not hadChall or not self.haveShowRed)  then --如果没有挑战过或者重置了就显示红点
			haveRed=true
		end
	end

	RedManager.updateValue("V_DEVILROAdRED", haveRed )
	-- RedManager.updateValue("V_RELICCOPYRED", false)
end


function SealDevilModel:setCheckTips(isCheck)
	local dayStr = DateUtil.getOppostieDays()
	index = isCheck  and  1 or 0
	FileCacheManager.setIntForKey("batteReset_isCheckTips" .. dayStr,index)
end



function SealDevilModel:getCheckTips()
	local dayStr = DateUtil.getOppostieDays()
	return FileCacheManager.getIntForKey("batteReset_isCheckTips" .. dayStr,0)==1
end

----设置关卡被打开
--function SealDevilModel:setGateOpen()
	--return FileCacheManager.getBoolForKey(PlayerModel.userid..GameDef.battleArrayType.DevilRoad.."_boss")
--end


return SealDevilModel
