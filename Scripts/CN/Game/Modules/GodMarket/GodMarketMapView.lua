--Date :2021-01-14
--Author : generated by FairyGUI
--Desc : 

local GodMarketMapView,Super = class("GodMarketMapView", View)

function GodMarketMapView:ctor()
	--LuaLog("GodMarketMapView ctor")
	self._packName = "GodMarket"
	self._compName = "GodMarketMapView"
	--self._rootDepth = LayerDepth.Window
	self.playerObj = {}  	--其他玩家模型
	self.myObj = {}			--我的人物模型
	self.gridObj = {}		--格子
	self.gridBoxObj = {}	--宝箱
	self.schedulerGridID = false --格子分布生成定时器
	self.schedulerPlayerID = false --玩家模型分步生成定时器

	self.schedulerPosID = false --使用定时器延迟更新自己位置信息
	self.isChangePos = false

	self.flags = false
end

function GodMarketMapView:_initEvent( )
	
end

function GodMarketMapView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:GodMarket.GodMarketMapView
	self.bg = viewNode:getChildAutoType('bg')--GLoader
	self.girdLayer = viewNode:getChildAutoType('girdLayer')--GComponent
	--{autoFieldsEnd}:GodMarket.GodMarketMapView
	--Do not modify above code-------------
end

function GodMarketMapView:_initListener( )
	
end

function GodMarketMapView:_initUI( )
	self:_initVM()
	self:_initListener()
	self.bg:setURL("UI/GodMarket/map.png")
	self.bg:setWidth(3708)
	self.bg:setHeight(2532)

	self.minimap = self._parentWin.minimap
	if self.minimap then
		self.view:setWidth(self.minimap:getWidth()*2)
		self.view:setHeight(self.minimap:getHeight()*2)
		--self.view:getScrollPane():setPosX(self.bg:getWidth() - display.width)
		--self.view:getScrollPane():setPosY(self.bg:getHeight() - display.height)
		--self.bg:setScale(0.5,0.5)
		self.view:setScale(0.5,0.5)
	else
		local posZero =  self.view:globalToLocal(Vector2(0, 0))
		self.view:setPosition(posZero.x,posZero.y)
		self.view:setWidth(display.width)
		self.view:getScrollPane():setPosX(self.bg:getWidth() - display.width)
		self.view:getScrollPane():setPosY(self.bg:getHeight() - display.height)
	end
	--self.view:getScrollPane():scrollBottom(false)
	--self.view:getScrollPane():setPageY(1)
	-- local fullPath = cc.FileUtils:getInstance():fullPathForFilename("test5.tmx")
	-- local map = cc.TMXTiledMap:create(fullPath)
	-- self.view:displayObject():addChild(map)
	-- map:setPositionX(-500)
	-- map:setRotation(18)
	self:_initBaseData( )
	self:_initMap( )
end

function GodMarketMapView:_initBaseData( )
	self.beginX =  51-22 - 13*86  	--地图初始x位置
	self.beginY = 35  	--地图初始y位置
	self.lineNumX = #GodMarketModel.mapPos[1]   --列数
	self.lineNumY = #GodMarketModel.mapPos   --行数
	self.girdLayer:setRotation(-26.8)   --地图旋转
	self.girdLayerX = self.girdLayer:getPosition().x
	self.girdLayerY = self.girdLayer:getPosition().y
	self.gridItem = {}
	
end

--初始化地图
function GodMarketMapView:_initMap( )
	--local mapPos = GodMarketModel.mapPos
	-- local bx = 0
	--  for y = 1,self.lineNumY do
		
	-- 	for x = 1,self.lineNumX do
	-- 		if mapPos[y][x] ~= 0 then
	-- 			local obj = UIPackageManager.createObject("GodMarket", "grid")
	-- 			self.girdLayer:addChild(obj)
	-- 			obj:setPosition(self.beginX+x*85.6+bx ,self.beginY - y*69.1)
	-- 			--obj:getController("c1"):setSelectedIndex()
	-- 			mapPos[y][x] = obj
	-- 		end
	-- 	end
	-- 	bx = bx - 51
	-- end

	-- for m,n in pairs(GodMarketModel.eventId) do
	-- 	for k,v in pairs(n) do
	-- 		table.insert(self.gridItem,v)
    --     end
	-- end
	local function finishCall()
		self:_initPlayer( )
	end
	self:createGridObject( finishCall )
end

--初始化玩家信息
function GodMarketMapView:_initPlayer( )

	--self.myObj = self:createModel(13,1,{head = HandbookModel.heroOpertion})
	--self.myObj:setLocalZOrder(2)
	--插入个人模型信息
	local model = HandbookModel.heroOpertion or PlayerModel.head
	local myData = {leader = GodMarketModel.leader,pos = 130001,playerId  = PlayerModel.userid,name = PlayerModel.username,head = model,fashionCode  = HandbookModel.fashionCode}
	if not GodMarketModel.PlayerIdMap[PlayerModel.userid] then
		if not GodMarketModel.PlayerInfo[130001] then
			GodMarketModel.PlayerInfo[130001] = {pos = 130001,playerData = {myData}}
		else
			table.insert(GodMarketModel.PlayerInfo[130001].playerData,myData)
		end
		GodMarketModel.PlayerIdMap[PlayerModel.userid] = myData
	end

	--遍历所有玩家模型
	for k,v in pairs(GodMarketModel.PlayerIdMap) do
		v.x,v.y = GodMarketModel:getXY(v.pos)
		table.insert(self.playerObj,v)
	end

	local function finishCall()
		
	end
	self:_initGridBox( )
	self:createPlayer(finishCall)
end

--分步创建玩家模型
function GodMarketMapView:createPlayer( finishCall )
	local index = 0
	if self.schedulerPlayerID then
		Scheduler.unschedule(self.schedulerPlayerID)
	end
	self.schedulerPlayerID = Scheduler.schedule(function()
		--判断view是否还存在
		if not tolua.isnull(self.view) then
			index = index + 1
			local data =  self.playerObj[index]
			if not data then 
				if finishCall then finishCall() end
				Scheduler.unschedule(self.schedulerPlayerID) 
				return 
			end

			self:godmarket_createModel("",data.x,data.y,data)
			
		end
	end,0,0)
	
end


--初始化宝箱信息
function GodMarketMapView:_initGridBox( )
	
	for k,v in pairs(GodMarketModel.gridBox) do
		self:createGridBox( v )
		--break
	end

end

--创建宝箱模型
function GodMarketMapView:createGridBox( data )
	local x,y = GodMarketModel:getXY(data.pos)
	local grid = self.gridObj[y][x]
	local box = false
	if data.boxType == 1 then
		box = cc.Sprite:create("UI/GodMarket/box1.png")
	else
		box = cc.Sprite:create("UI/GodMarket/box2.png")
	end
	box:setAnchorPoint(cc.p(0.5,0.25))
	box:setScale(0.7)
	--box:setPosition(display.width/2-40, 75)
	--box:setContentSize(cc.size(1149,9))
	GodMarketModel:moveToXY(box,x,y,true)
	box:setRotation(26.8)
	self.girdLayer:displayObject():addChild(box)
	if self.gridBoxObj[data.pos] then
		self.gridBoxObj[data.pos]:removeFromParentAndCleanup(true)
	end
	self.gridBoxObj[data.pos] = box
end

--更新宝箱位置
function GodMarketMapView:godMarket_updateGridBoxData(_,data,isRemove)
	if isRemove then
		if  not tolua.isnull(self.gridBoxObj[data.pos]) then
			self.gridBoxObj[data.pos]:removeFromParentAndCleanup(true)
			self.gridBoxObj[data.pos] = nil
		end
	else
		self:createGridBox( data )
	end
	
end

function GodMarketMapView:updateMyPosToServer(x,y)
	self.isChangePos = x*10000+y--GodMarketModel.mapPos[y][x].id
	--self:moveToXY(self.myObj,x,y)
	--1秒只能发送一次移动请求
	if not self.schedulerPosID then
		GodMarketModel:playerMoveGrid(self.isChangePos)
		self.schedulerPosID = Scheduler.scheduleOnce(0.1,function()
				self.schedulerPosID = false
		end)
	else
		RollTips.show(Desc.godmarket_desc11) --godmarket_desc11="不要跑这么快哦~"
	end
end


--地图移动
function GodMarketMapView:godmarket_movetorect(obj,x,y)

	local pos = self.gridObj[y][x]:displayObject():convertToWorldSpace(Vector2.zero)
	local posX,posY = self.gridObj[y][x]:getPosition()
	posX = pos.x
	posY = -pos.y
	local rect = cc.rect(self.view:getScrollPane():getPosX()+posX-display.width/2,self.view:getScrollPane():getPosY()+posY+display.height/2,display.width,display.height)
	printTable(33,"godmarket_movetorect",rect)
	--printTable(33,"pos",self.gridObj[y][x]:displayObject():convertToWorldSpace(Vector2.zero))
	--print(33,"getScrollPanePos",self.view:getScrollPane():getPosX(),self.view:getScrollPane():getPosY())
	self.view:getScrollPane():scrollToView(rect,true)

end



function GodMarketMapView:godmarket_createModel(_,x,y,data)
	local obj = UIPackageManager.createObject("GodMarket", "player")
	local spine = SpineUtil.createModel(obj:getChildAutoType("model"), {x = 0, y = 0}, "stand", data.heroOpertion or data.head,true,nil,data.fashionCode)
	if data.leader and data.leader > 0 then
		obj:getController("c1"):setSelectedIndex(data.leader)
	end
	obj:setTitle(data.name)
	self.girdLayer:addChild(obj)
	obj:setRotation(26.8)
	GodMarketModel:moveToXY(obj,x,y)
	if not self.minimap then
		data.obj = obj
	end
end


--挑战格子
function GodMarketMapView:clickGridChallenge(data)
	--RollTips.show(Desc.godmarket_desc1) --godmarket_desc1="这个可以挑战"
	local gridData = GodMarketModel.serverGrid[data.id]
	if gridData and gridData.flag == 1 then
		RollTips.show(Desc.godmarket_desc8) --godmarket_desc8="已占领"
		return
	end


	if data.eid == 1 or data.eid == 2 then
		ViewManager.open("GodMarketEvent1View",{gridData = gridData,eventData = data})
	elseif data.eid == 3 then
		ViewManager.open("GodMarketEvent3View",{gridData = gridData,eventData = data})
	elseif data.eid == 4 then
		ViewManager.open("GodMarketEvent4View",{gridData = gridData,eventData = data})
	elseif data.eid == 5 then
		ViewManager.open("GodMarketEvent5View",{gridData = gridData,eventData = data})
	end
end

--移动到当前格子
function GodMarketMapView:clickGridMove(data)
	--RollTips.show(Desc.godmarket_desc2) --godmarket_desc2="这个可以行走"
	self:updateMyPosToServer(data.x,data.y)
end

--分步创建格子
function GodMarketMapView:createGridObject( finishCall )
	local config = GodMarketModel.eventId
	local eventId = 7
	local index = 0
	if self.schedulerGridID then
		Scheduler.unschedule(self.schedulerGridID)
	end
	self.schedulerGridID = Scheduler.schedule(function()
		--判断view是否还存在
		if not tolua.isnull(self.view) then
			--一帧创建30个
			for i = 1, 30 do
				index = index +1
			 	if index > #GodMarketModel.eventId[eventId] then
					eventId = eventId - 1
					index = 1
				end
				local data =  GodMarketModel.eventId[eventId] and GodMarketModel.eventId[eventId][index]
				if not data then 
					if finishCall then finishCall() end
					Scheduler.unschedule(self.schedulerGridID) 
					return 
				end
				
				
				data.posX =  self.beginX+data.x*85.6-51*data.y
				data.posY =  self.beginY - data.y*69.1

				local obj = UIPackageManager.createObject("GodMarket", "grid")
				self.girdLayer:addChild(obj)
				obj:setPosition( data.posX,data.posY)
				--if data.
				obj:setTitle(data.x..","..data.y)
				obj.data = data
				if not self.gridObj[data.y] then
					self.gridObj[data.y] = {}
				end
				self.gridObj[data.y][data.x] = obj
				
				local status = GodMarketModel:checkStatus(data.x,data.y)
				--可以挑战或者可以行走区域才生成对象
				--if status == 1 or isCanChallenge then

					if status == 1 then
						obj:getController("c1"):setSelectedIndex(7)
					else
						obj:getController("c1"):setSelectedIndex(data.d.eventId)
					end

					obj:addClickListener(function()
						--检查格子事件状态 
						status = GodMarketModel:checkStatus(data.x,data.y)
						--检查格子是否有宝箱
						local gridBox = GodMarketModel.gridBox[data.x*10000+data.y]
						if gridBox then
							if status == 1 or GodMarketModel:isCanChallenge(data.x,data.y) then
								GodMarketModel:receiveGridBoxTreasure(gridBox)
							else
								RollTips.show(Desc.godmarket_desc14)  --godmarket_desc14="无法到达，该宝箱四周没有相邻的已占土地。"
							end
							return
						end
						
						if status == 1 then
							self:clickGridMove(data)
						else
							if GodMarketModel:isCanChallenge(data.x,data.y) then
								self:clickGridChallenge(data)
							else
								RollTips.show(Desc.godmarket_desc21) --godmarket_desc21="该区域还没开放哦~"
							end
						end
					end)
						
					
					--data.obj = obj
				--end
				
			end
		end
	end,0,0)
end

-- 更新旗子位置
function GodMarketMapView:updateFlags()
	print(33,"godmarket_updatemap")
	if not self.flags then
		self.flags = cc.Sprite:create("UI/GodMarket/flags.png")
		self.flags:setAnchorPoint(cc.p(0.3,0))
		self.flags:setScale(2)
		self.flags:setRotation(26.8)
		self.girdLayer:displayObject():addChild(self.flags)
	end
	if GodMarketModel.flags then
		self.flags:setVisible(true)
		local x,y = GodMarketModel:getXY(GodMarketModel.flags)
		GodMarketModel:moveToXY(self.flags,x,y,true)
	else
		self.flags:setVisible(false)
	end
end

--更新地图
function GodMarketMapView:godmarket_updatemap()
	self:updateFlags()
end

--更新格子信息
function GodMarketMapView:godmarket_updateGridData(_,gridInfo)

	if  gridInfo.flag == 1 then
		local cf = GodMarketModel.mapId[gridInfo.id]
		for k,v in pairs(cf.position) do
			local data = GodMarketModel.mapPos[v.y][v.x]
			self.gridObj[data.y][data.x]:getController("c1"):setSelectedIndex(7)
		end
		if GodMarketModel.flags == gridInfo.id then
			GodMarketModel.flags = false
			self:updateFlags()
		end
	end
end


--更新队长
function GodMarketMapView:godmarket_updateTransfer(_,data)

end

function GodMarketMapView:_exit()
	Scheduler.unschedule(self.schedulerGridID)
	Scheduler.unschedule(self.schedulerPlayerID)
	Scheduler.unschedule(self.schedulerPosID)
end

return GodMarketMapView
