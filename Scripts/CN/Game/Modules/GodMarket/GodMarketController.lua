--Date :2021-01-14
--Author : generated by FairyGUI
--Desc : 

local GodMarketController = class("GodMarket",Controller)

function GodMarketController:init()
	self.isSend = false
end

--接收房间信息
function GodMarketController:GodMarket_PostRoomInfo(_,data)
	printTable(33,"GodMarket_PostRoomInfo",data)
    if data.room and next(data.room) then
		GodMarketModel.serverData = data.room
		GodMarketModel.serverGrid = data.room.grid or {}
		GodMarketModel.PlayerInfo = data.room.GridMovePos or {}
		GodMarketModel.roomId 	  = data.room.roomId or 0
		GodMarketModel.gridBox 	  = data.room.gridBox or {}
		GodMarketModel.bossInfo   = data.room.boss or {}
		GodMarketModel.curPeriod  = data.room.period or 1
		GodMarketModel.flags  	  = data.room.setFlags or false
		GodMarketModel.leader  	  = data.room.leader or false
		--GodMarketModel.eventCurNum = {0,0,0,0,0,0,0,0}

		--测试代码
		--GodMarketModel.PlayerInfo[130002] = {pos = 130002,playerData = {{playerId  = 10001,name = Desc.godmarket_desc3,head = 15001,fashionCode  = 0}}}
		--GodMarketModel.PlayerInfo[130004] = {pos = 130004,playerData = {{playerId  = 10002,name = Desc.godmarket_desc4,head = 15002,fashionCode  = 0}}}
		--GodMarketModel.PlayerInfo[160002] = {pos = 160002,playerData = {{playerId  = 10003,name = Desc.godmarket_desc5,head = 25002,fashionCode  = 0}}}

		

		GodMarketModel.PlayerIdMap = {}
		for m,n in pairs(GodMarketModel.PlayerInfo) do
			for k,v in pairs(n.playerData) do
				GodMarketModel.PlayerIdMap[v.playerId] = v
				v.pos = n.pos
			end
		end
    end
end


--发送转让团长玩家的
function GodMarketController:GodMarket_PostTransfer(_,data)
	if data.beforePlayer then

		for k,v in pairs(GodMarketModel.PlayerIdMap) do
			v.leader = 0
			if not tolua.isnull(v.obj) then
				v.obj:getController("c1"):setSelectedIndex(0)
			end
		end

		for i = 1, #data.beforePlayer do
			local playerId = data.beforePlayer[i]
			local player = GodMarketModel.PlayerIdMap[playerId]
			if player then
				if i == 1 then
					player.leader = 1
					if not tolua.isnull(player.obj) then
						player.obj:getController("c1"):setSelectedIndex(1)
					end
				else
					player.leader = 2
					if not tolua.isnull(player.obj) then
						player.obj:getController("c1"):setSelectedIndex(2)
					end
				end

			end
		end
	end

end



function GodMarketController:godmarket_battle( _,eventData,serverGrid,rewards )
	if GodMarketModel.serverData.action and GodMarketModel.serverData.action < 1 then
		RollTips.show("行动力不足")
		return
	end
	local function battleHandler(eventName,args)
		if eventName == "begin" then
			if self.isSend then RollTips.show(Desc.common_networktips) return  end
			self.isSend = true
			local params = {roomId = GodMarketModel.roomId,areaId = eventData.id}

			printTable(33,"send godMarket_battle",params)
			RPCReq.Activity_GodMarket_OnGridEvent(params,function(data)
					printTable(33,"Activity_GodMarket_OnGridEvent call",data)
					local result = {}
					if eventData.eid < 3 then
						result.isWin = data.result
					else
						result.isWin = true
					end
					if eventData.eid == 3 then
						result.dieHero = data.dieHero --GodMarketModel:getFightNum(oldData,nowData,gridData)
					elseif eventData.eid == 4 or eventData.eid == 5 then
						result.persent = GodMarketModel:getFightPersent(serverGrid,data.grid,eventData)
						if eventData.eid == 5 and GodMarketModel.bossInfo and GodMarketModel.bossInfo.number then
							GodMarketModel.bossInfo.number = GodMarketModel.bossInfo.number - 1
						end
					end
					result.result = data.result
					result.reward = rewards
					result.type = GameDef.GamePlayType.ActivityGodMarket
					result.eventId = eventData.eid
					if data.contri then
						result.contri = data.contri
						GodMarketModel.contri =  GodMarketModel.contri + data.contri
					end
					GodMarketModel.battleRecord = data.tb or false
					GodMarketModel.fightIndex = 0
					self:checkNextFight()
					ModelManager.PlayerModel:set_awardData(result)
					GodMarketModel.serverData.actionScore = data.actionScore
					if data.grid and data.grid.id then
						-- local d = GodMarketModel.serverGrid[data.grid.id]
						-- for k,v in pairs(data.grid) do
						-- 	d[k] = v
						-- end
						GodMarketModel.serverGrid[data.grid.id] = data.grid
					end
					if data.action then
						GodMarketModel.serverData.action = data.action
					end
					
					
					
					if data.result then
						GodMarketModel:playerMoveGrid(eventData.x*10000+eventData.y)
						GodMarketModel.eventCurNum[eventData.eid] = GodMarketModel.eventCurNum[eventData.eid] + 1
						Dispatcher.dispatchEvent("godmarket_updatemap")
					end
					--TrialActivityModel.restTimes = TrialActivityModel.restTimes - 1
					self.isSend = false
					--self.result = result
				end,function (errorData)
					RollTips.showError(errorData)
					self.isSend = false
				end)
		elseif eventName == "next" then
			if  (args and args.onClickSkip) then
				Dispatcher.dispatchEvent(EventType.battle_end,args)
			else
				self:checkNextFight(args)
			end
        elseif (eventName == "end") then
			--ViewManager.open("ReWardView",{page=4,type=1,data=self.result,isWin=self.result.isWin})
			--Dispatcher.dispatchEvent(EventType.trialActivity_exchangeSuccess)
		end
	end

	
	print(33,"trialActivity_battle dispatchEvent.battle_requestFunc")
	local fightId = eventData.d.fightid[1]
	if serverGrid then
		if serverGrid.flag == 1 then
			RollTips.show("格子已挑战")
			return
		end
		if eventData.eid == 3 then
			--serverGrid.event.fightData
			--fightId = 
		end
	end
	
	
    Dispatcher.dispatchEvent(EventType.battle_requestFunc,battleHandler,{fightID=fightId,configType=GameDef.BattleArrayType.GodMarket})
	
end

function GodMarketController:Battle_BattleRecordData(_, args)
	local arrayType = args.battleData.gamePlayInfo.arrayType
	if arrayType ~= GameDef.BattleArrayType.GodMarket then return end
	if GodMarketModel.battleRecord then
		Dispatcher.dispatchEvent(EventType.Battle_replayRecord,{isRecord = false,battleData = args.battleData})
	end
end

function GodMarketController:checkNextFight(args)
	if not GodMarketModel.battleRecord then return end
	local fightId =  table.remove(GodMarketModel.battleRecord,1)
	if fightId then 
		GodMarketModel.fightIndex = GodMarketModel.fightIndex + 1
		BattleModel:requestBattleRecord(fightId,nil,GameDef.GamePlayType.ActivityGodMarket)
	else
		GodMarketModel.battleRecord = false
		GodMarketModel.fightIndex = 0
		Dispatcher.dispatchEvent(EventType.battle_end,args)
	end
end


--更新玩家位置信息
function GodMarketController:GodMarket_PostGridPosData(_,data)
	printTable(33,"GodMarket_PostGridPosData",data)
	if data.gridPos and next(data.gridPos) then
		local pos = data.gridPos.pos
		for k,v in pairs(data.gridPos.playerData) do
			local player = GodMarketModel.PlayerIdMap[v.playerId]
			v.pos = pos
			if player then
				--如果是0的话代表玩家退出
				if pos == 0 then
					--移除模型
					if not tolua.isnull(player.obj) then
						player.obj:removeFromParent()
						player.obj = nil
					end
					--清理数据
					GodMarketModel.PlayerIdMap[v.playerId] = nil
					if GodMarketModel.PlayerInfo[pos] then
						for s,l in pairs(GodMarketModel.PlayerInfo[pos].playerData) do
							if l.playerId == v.playerId then
								table.remove(GodMarketModel.PlayerInfo[pos].playerData,s)
								break
							end
						end
					end
				else
					--移动到目标位置
					if not tolua.isnull(player.obj) then
						GodMarketModel:moveToXY(player.obj,GodMarketModel:getXY(pos))
					end
				end
			else
				--设置数据
				if not GodMarketModel.PlayerInfo[pos] then
					GodMarketModel.PlayerInfo[pos] = {pos = pos,playerData = {v}}
				else
					table.insert(GodMarketModel.PlayerInfo[pos].playerData,v)
				end
				GodMarketModel.PlayerIdMap[v.playerId] = v
				v.x,v.y =  GodMarketModel:getXY(pos)
				--创建模型
				Dispatcher.dispatchEvent(EventType.godmarket_createModel,v.x,v.y,v)
			end
		end
	end
end

--更新格子信息
function GodMarketController:GodMarket_PostGridData(_,data)
	printTable(33,"GodMarket_PostGridData",data)
	local gridInfo = data.grid
	if  gridInfo and gridInfo.id then
		GodMarketModel.serverGrid[gridInfo.id] = gridInfo
		Dispatcher.dispatchEvent(EventType.godmarket_updateGridData,gridInfo)
	end
end

--更新宝箱位置
function GodMarketController:GodMarket_PostGridBoxPos(_,data,isRemove)
	printTable(33,"GodMarket_PostGridBoxPos",data)
	if data.gridBox and next(data.gridBox) then
		--for k,v in pairs(data.gridBox) do
			GodMarketModel.gridBox[data.gridBox.pos] = data.gridBox
			Dispatcher.dispatchEvent(EventType.godMarket_updateGridBoxData,data.gridBox,false)
		--end
	end
end

--更新神格收益
function GodMarketController:GodMarket_PostUpGodGrid(_,data)
	if data.newAmount then
		GodMarketModel.serverData.newAmount = data.newAmount
		Dispatcher.dispatchEvent(EventType.godmarket_updatemap)
	end
end

--更新旗子位置
function GodMarketController:GodMarket_PostSetFlags(_,data)
	printTable(33,"GodMarket_PostSetFlags",data)
	if data.setFlags then
		GodMarketModel.flags = data.setFlags
		Dispatcher.dispatchEvent(EventType.godmarket_updatemap)
	end
end

function GodMarketController:GodMarket_PostUpBoxTreasure(args)
	GodMarketModel:getMineInfos()
end

return GodMarketController