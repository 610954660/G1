--Date :2020-11-24
--Author : generated by FairyGUI
--Desc : 

local DetectiveTrialModel = class("DetectiveTrialModel", BaseModel)

function DetectiveTrialModel:ctor()
    self.timer = false
    self.isEnd = false
    self.settleEndInfo = {}     -- 战斗结算信息
    self.addRed     = false
    self:initListeners()
end

function DetectiveTrialModel:init()
    self.bossMap = {}   -- boss数据
    self.serverData = {} -- boss全服击杀数据
end

-- data
-- .PActivity_HeroTrial {
-- 	.BossData {
-- 		id					1:integer	#bossId
-- 		personalReward		2:integer	#个人奖励领取状态(0或者nil, 不可领取, 1可领取 2已领取)
-- 		commonReward 		3:integer	#通用奖励状态(0或者nil未领取,  2已领取)
-- 	}

-- 	bossMap					1:*BossData(id)  #boss数据, 如果没下发, 则默认当前boss不可领取奖励
-- 	serverData				2:*PActivity_HeroTrialBossServerData(id) #boss全服击杀数据(建议每次打开界面请求获取下最新数据)
-- }

-- #探员试炼
-- .PActivity_HeroTrialBossServerData {
-- 	id					1:integer	#bossId
-- 	totalBeat			2:integer	#总击杀次数
-- }
function DetectiveTrialModel:initData(data)
    self.bossMap = data.bossMap or {}
    -- self.serverData = data.serverData or {}
    self:updateRed()
    self:reqGetBossBeatInfo()
    printTable(8848,">>>data>>",data)
    -- Dispatcher.dispatchEvent(EventType.DetectiveTrialView_refreshPanal)
end

function DetectiveTrialModel:initDataServer(data)
    printTable(8848,">>params>>>serverData>>>",data)
    for k,v in pairs(data) do
        if not self.serverData[v.id] then
            self.serverData[v.id] = {}
        end
        self.serverData[v.id] = v
    end
    self:updateRed()
    Dispatcher.dispatchEvent(EventType.DetectiveTrialView_refreshPanal)
end

function DetectiveTrialModel:getBossMap()
    return self.bossMap
end

function DetectiveTrialModel:getServerData()
    return self.serverData
end

-- #探员试炼 获取boss击杀信息
-- Activity_HeroTrial_GetBossBeatInfo 7310 {
-- 	request {
-- 		activityId			1:integer	#活动id
-- 	}
-- 	response {
-- 		serverData			1:*PActivity_HeroTrialBossServerData(id)
-- 	}
-- }
--
function DetectiveTrialModel:reqGetBossBeatInfo()
    local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.HeroTrial)
	if not actData then return end
	local actId   = actData.id
    local reqInfo = {
        activityId = actId,
    }
    printTable(8848,">>>reqInfo>>",reqInfo)
    RPCReq.Activity_HeroTrial_GetBossBeatInfo(reqInfo,function(params)
        printTable(8848,">>>params>>>获取boss击杀信息>>>",params)
        self.serverData = params.serverData or {}
        self:updateRed()
        Dispatcher.dispatchEvent(EventType.DetectiveTrialView_refreshPanal)
    end)
end


-- 挑战返回的信息
function DetectiveTrialModel:setSettleEndInfo(data)
    self.settleEndInfo = data or {}
end

-- 获取结算界面信息
function DetectiveTrialModel:gettleEndInfo()
    return self.settleEndInfo
end

-- 获取个人首通奖励信息
-- day 第几天
-- level 难度
function DetectiveTrialModel:getOwnerRewardInfo(day,level) 
    local moduleId = self:getModuleId()
    local HeroTrialInfo = DynamicConfigData.t_HeroTrial[moduleId] or {}
    local myReward = HeroTrialInfo[day][level].personalReward or {}
    return myReward
end

-- 获取全服首通奖励信息
-- day 第几天
-- level 难度
function DetectiveTrialModel:getWholeRewardInfo(day,level) 
    local moduleId = self:getModuleId()
    local HeroTrialInfo = DynamicConfigData.t_HeroTrial[moduleId] or {}
    local wholeReward = HeroTrialInfo[day][level].commonReward or {}
    return wholeReward
end

-- 获取每一天有多少个难度
function DetectiveTrialModel:getLevelLenth(day) 
    local moduleId = self:getModuleId()
    local HeroTrialInfo = DynamicConfigData.t_HeroTrial[moduleId] or {}
    return TableUtil.GetTableLen(HeroTrialInfo[day])
end

-- 获取当天boss的数据
function DetectiveTrialModel:getHeroTrialInfo(day)
    local moduleId = self:getModuleId()
    local HeroTrialInfo = DynamicConfigData.t_HeroTrial[moduleId] or {}
    HeroTrialInfo = HeroTrialInfo[day]
    return HeroTrialInfo or {}
end

-- 获取当天还没挑战的最低等级
function DetectiveTrialModel:getHeroTrialLevel(day)
    local moduleId = self:getModuleId()
    local HeroTrialInfo = DynamicConfigData.t_HeroTrial[moduleId] or {}
    HeroTrialInfo = HeroTrialInfo[day] or {}
    local minLevel = 999999
    local maxLevel = 1
    local flag = false
    for k,v in pairs(HeroTrialInfo) do
        local isFight = FileCacheManager.getBoolForKey(string.format("DetectiveTrialViewRecord_%s_%s",day,v.level), false)
        if not isFight then
            flag = true
            minLevel = minLevel > v.level and  v.level or minLevel
        end
        maxLevel = v.level > maxLevel and v.level or maxLevel
    end
   
    if not flag then
        return maxLevel
    elseif minLevel == 999999 then
        return 1
    else
        return minLevel
    end
end

-- 当前活动进行了多少天
function DetectiveTrialModel:getActivityBeingDay()
    local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.HeroTrial)
    if not actData then return 0  end
    local realStartTime = math.floor(actData.realStartMs/1000)
    local serverTime  = ServerTimeModel:getServerTime()
    local day = serverTime - realStartTime
    print(8848,">>>day>>>",day)
    return math.ceil(day/86400)
end


function DetectiveTrialModel:getModuleId()
	local moduleId = 1
	local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.HeroTrial)
	moduleId = actData and actData.showContent.moduleId or 1
	-- printTable(8848,">>actData>>",actData)
	return moduleId
end


function DetectiveTrialModel:clearTimeScheduler()
	if self.timer then
        TimeLib.clearCountDown(self.timer)
        self.timer = false
    end
end

-- 设置入口倒计时
function DetectiveTrialModel:updateCountTimer(txt_countTimer)
    if self.isEnd then return end
    local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.HeroTrial)
    if not actData then return end
    local actId   = actData.id
    local status, addtime = ModelManager.ActivityModel:getActStatusAndLastTime(actId)
    if not addtime then return end
    txt_countTimer:setVisible(true)
    if status == 2 and addtime == -1 then
        self.isEnd = false
        txt_countTimer:setText(Desc.activity_txt5)
    else
        local lastTime = math.floor(addtime / 1000)
        if lastTime == -1 then
            txt_countTimer:setText(Desc.activity_txt5)
        else
            if not tolua.isnull(txt_countTimer) then
            txt_countTimer:setText(TimeLib.GetTimeFormatDay(lastTime,2))
            end
            local function onCountDown(time)
                if not tolua.isnull(txt_countTimer) then
                    self.isEnd = false
                    txt_countTimer:setText(TimeLib.GetTimeFormatDay(time,2))
                end
            end
            local function onEnd(...)
                self.isEnd = true
                Dispatcher.dispatchEvent(EventType.DetectiveTrialView_refreshPanal)
                if not tolua.isnull(txt_countTimer) then
                    txt_countTimer:setText(Desc.activity_txt18)
                end
            end
            if self.timer then
                TimeLib.clearCountDown(self.timer)
            end
            self.timer = TimeLib.newCountDown(lastTime, onCountDown, onEnd, false, false, false)
        end
    end
end

function DetectiveTrialModel:updateRed()
    local dayStr = DateUtil.getOppostieDays()
    local isShow = FileCacheManager.getBoolForKey("DetectiveTrialView_isShow" .. dayStr,false)
    local beingDay = self:getActivityBeingDay() 	-- 活动进行天数
    
    local moduleId = self:getModuleId()
    local HeroTrialInfo = DynamicConfigData.t_HeroTrial[moduleId] or {}
    local rewardState = false
    if not self.addRed then
        self.addRed = true
        local keyArr = {}
        for k,v in pairs(HeroTrialInfo) do
            table.insert(keyArr, "V_ACTIVITY_"..GameDef.ActivityType.HeroTrial..k)
        end
        RedManager.addMap("V_ACTIVITY_"..GameDef.ActivityType.HeroTrial, keyArr)
    end

    local commonRed = {}
    local personalRed = {}
    local bossMap = self:getBossMap()
    local serverData 	= self:getServerData()
    -- 个人奖励红点
    for k,v in pairs(HeroTrialInfo) do
        personalRed[k] = false
        for ik,iv in pairs(v) do
            local bossId = iv.id
            if bossMap[bossId] and bossMap[bossId].personalReward and bossMap[bossId].personalReward == 1 then
                personalRed[k] = true
                rewardState = true
                break
            end
        end
    end

    -- 首通奖励红点
    for k,v in pairs(HeroTrialInfo) do
        commonRed[k] = false
        for ik,iv in pairs(v) do
            local bossId = iv.id
            local totalBeat 	= 0 
            if serverData and serverData[bossId] and serverData[bossId].totalBeat then
                totalBeat = serverData[bossId].totalBeat
            end
            if totalBeat > 0 and totalBeat >= iv.commonBeat then
                if (not bossMap[bossId])  or (not bossMap[bossId].commonReward) or (bossMap[bossId].commonReward == 0) then
                    commonRed[k] = true
                    rewardState = true
                    break
                end
            end
        end
    end

    for k,v in pairs(HeroTrialInfo) do 
        RedManager.updateValue("V_ACTIVITY_"..GameDef.ActivityType.HeroTrial..k,(commonRed[k] or personalRed[k]) and beingDay >= k )
    end
    RedManager.updateValue("V_ACTIVITY_"..GameDef.ActivityType.HeroTrial,rewardState or (not isShow))
end

-- 通过bossid获取boss信息
function DetectiveTrialModel:getBossInfoById(bossId)
    local moduleId = self:getModuleId()
    local HeroTrialInfo = DynamicConfigData.t_HeroTrial[moduleId] or {}
    for k,v in pairs(HeroTrialInfo) do
        for ik,iv in pairs(v) do
          if iv.id == bossId then
            return iv
          end    
        end
    end
    return {}
end

-- 判断是否有奖励可领
function DetectiveTrialModel:checkRewardStateById(bossId)
    local bossMap       = self:getBossMap()
    local serverData 	= self:getServerData()
    local commonReward  = false
    local personalReward = false
    if bossMap[bossId] and bossMap[bossId].personalReward and bossMap[bossId].personalReward == 1 then
        personalReward =  true
    end

    local totalBeat 	= 0 
    if serverData and serverData[bossId] and serverData[bossId].totalBeat then
        totalBeat = serverData[bossId].totalBeat
    end
    local bossData = self:getBossInfoById(bossId)
    if totalBeat > 0 and totalBeat >= bossData.commonBeat then
        if (not bossMap[bossId])  or (not bossMap[bossId].commonReward) or (bossMap[bossId].commonReward == 0) then
            commonReward = true
        end
    end

    return (personalReward or commonReward)
end

function DetectiveTrialModel:checkRewardStateById2(level,day)
    local heroTrialInfo = self:getHeroTrialInfo(day)
    local LRedState,RRedState,Licon,Ricon = false,false,false,false
    for k,v in pairs(heroTrialInfo) do
        if (v.level > level) and (not RRedState )then
            RRedState = self:checkRewardStateById(v.id)
        end
        if (v.level < level) and (not LRedState) then
            LRedState = self:checkRewardStateById(v.id)
        end
        if v.level == level+1 then
            Ricon = v.model
        end
        if v.level == level-1 then
            Licon = v.model
        end
    end
    return LRedState,RRedState,Licon,Ricon
end

function DetectiveTrialModel:clear()
    if self.timer then
        TimeLib.clearCountDown(self.timer)
    end
end

return DetectiveTrialModel
