--Name : GuideTpye2View.lua
--Author : generated by FairyGUI
--Date : 2020-5-8
--Desc : 

local GuideType2View,Super = class("GuideType2View", View)

function GuideType2View:ctor()
	--LuaLog("GuideTpye2View ctor")
	self._packName = "Guide"
	self._compName = "GuideTpye2View"
	self._rootDepth = LayerDepth.Guide
	self.schedulerID = false      --下一帧执行的定时器
	self.schedulerIDLock = false  --页面切换锁屏的定时器
	self.schedulerIDMove = false  --检查节点移动的定时器
	self.schedulerIDCheckView = false  --检查其他页面弹出时隐藏引导的定时器
	self.schedulerIDWaitServer = false  --等待服务端数据锁定
	self.schedulerIDSound = false  --声音

	self.setUnLock = false  --找不到节点后取消锁屏
	
	self.fistTime = true  --第一次开始引导

	self.searchView = false  --当前是否正在搜索节点


	self.curTopView = false  --当前顶层页面

	self.curFindView = false  --当前找到的页面

	self.curFindNode = false  --当前找到的节点
	self.curList = false	  --当前找到的列表
	self.curListItem = false  --当前找到的列表中的item
	self.curListNode = false  --当前找到的列表中的item中的节点node

	self.curWinNode = false   --win框体的node
	self.curPointNode = false   --手指指向的node
	self.curEventNode = false   --传递点击事件的node
	
	self.callClickEndFunc = false   --点击node后响应的事件
	self.callClickBegFunc = false   --点击node后响应的事件

	self.soundId = false --音效ID
end

function GuideType2View:_initEvent( )
	
end

function GuideType2View:_initVM( )
	local vmRoot = self
	local viewNode = self.view
	---Do not modify following code--------
	--{vmFields}:Guide.GuideTpye2View
		vmRoot.text = viewNode:getChildAutoType("$text")--richtext
		vmRoot.window = viewNode:getChildAutoType("$window")--
		vmRoot.guang = viewNode:getChildAutoType("$guang")--loader
		vmRoot.hand = viewNode:getChildAutoType("$hand")--image
		vmRoot.texbg = viewNode:getChildAutoType("$texbg")--image
	--{vmFieldsEnd}:Guide.GuideTpye2View
	--Do not modify above code-------------
end

function GuideType2View:_initUI( )
	self:_initVM()
	
	self.nextbt = self._parentWin.nextbt
	
	self.guang:setAlpha(0)
	self.hand:setAlpha(0)
	
	self:initGuide()
	
	if  string.find(LoginModel:getUserName(), "line") and CC_TARGET_PLATFORM == CC_PLATFORM_WIN32 then
		self.window:getChildAutoType("window"):setVisible(true)
	end
	
	if  string.find(LoginModel:getUserName(), "debug") and CC_TARGET_PLATFORM == CC_PLATFORM_WIN32 then
		GuideModel.testMode = true
	end
	
end


function GuideType2View:initGuide()


	local obj = self.window:displayObject()
	local function checkTouch(touch,event)
		local point = obj:convertToNodeSpace(cc.p(touch:getLocation().x, touch:getLocation().y))
		local rect = cc.rect(0, 0, obj:getContentSize().width, obj:getContentSize().height)
		if cc.rectContainsPoint(rect,cc.p(point.x, point.y)) then
			return true
		end
		return false
	end

	local listener = cc.EventListenerTouchOneByOne:create()
	listener:setSwallowTouches(false)
	listener:registerScriptHandler(function (touch,event)
			local tvalue =  checkTouch(touch,event)
			if self.callClickBegFunc and tvalue then
				self.callClickBegFunc()
				self.callClickBegFunc = false
			end
			if not tvalue and self.window:isTouchable() and self.window:isVisible() and self.hand:isVisible() then
				self.view:getTransition("handscale"):play(function()
					
				end)
			end
			
			return tvalue
		end, cc.Handler.EVENT_TOUCH_BEGAN)

	listener:registerScriptHandler(function (touch,event)
			print(33,"window click 2dx")
			if self.callClickEndFunc and checkTouch(touch,event) then
				print(33,"window click 2dx yes")
				self.callClickEndFunc()
				self.callClickEndFunc = false
			end
		end, cc.Handler.EVENT_TOUCH_ENDED)
	obj:getEventDispatcher():addEventListenerWithSceneGraphPriority(listener, obj)

end

function GuideType2View:setGuideText( data )
	local textRect = data.textRect and StringUtil.lua_string_split(data.textRect, ",")
	if textRect then
		local hpos = self.hand:getPosition()
		local offsetX = tonumber(textRect[1])
		local offsetY = tonumber(textRect[2])

		self.text:setPosition(hpos.x+offsetX,hpos.y+offsetY)
		self.text:setWidth(tonumber(textRect[3]))
		self.text:setHeight(tonumber(textRect[4]))
	end
	if data.text then
		self.text:setTitle(data.text)
		self.text:setVisible(true)
	end

end

function GuideType2View:findHandPos( data )

	local pointNode = data.pointNode and string.split(data.pointNode,",") or nil


	local pointPos = {x=0,y=0}
	local win = {x=0,y=0,w=0,h=0}


	if data.pointType == 1 then  --findNode
		self.curPointNode = self.curFindNode
	elseif data.pointType == 2 then  --eventNode
		self.curPointNode = self.curEventNode
	elseif data.pointType == 3 then  --list
		self.curPointNode = self.curList
	elseif data.pointType == 4 then  --listItem
		self.curPointNode = self.curListItem
	else
		self.curPointNode = false
	end
	if self.curPointNode then
		local nodePos = self.curPointNode:localToGlobal(Vector2.zero)
		local nodeW = self.curPointNode:getWidth()
		local nodeH = self.curPointNode:getHeight()
		if nodePos.x > display.width+nodeW/2 or nodePos.x < 0-nodeW/2
			or nodePos.y > display.height+nodeH/2 or nodePos.y < 0-nodeH/2 then
			print(33,"find node pos false ")
			return false
		end
	end
	

	local winRect = data.winRect and string.split(data.winRect,",")

	if winRect[1] == "1" then
		self.curWinNode = self.curPointNode or false
	elseif winRect[1] == "2" then
		self.curWinNode = self.view
	elseif winRect[1] == "3" then
		self.curWinNode = self.curEventNode
	elseif winRect[1] == "4" then
		self.curWinNode = self.curFindNode
	else

	end

	local tpos = self.curWinNode:localToGlobal(Vector2.zero)
	win.x = tpos.x+self.curWinNode:getWidth()*winRect[2]
	win.y = tpos.y+self.curWinNode:getHeight()*winRect[3]
	win.w = self.curWinNode:getWidth()*winRect[4]
	win.h = self.curWinNode:getHeight()*winRect[5]

	if self.curPointNode then
		local nodePos = self.curPointNode:localToGlobal(Vector2.zero)
		pointPos.x = nodePos.x + self.curPointNode:getWidth()*pointNode[1]
		pointPos.y = nodePos.y + self.curPointNode:getHeight()*pointNode[2]
	else
		pointPos.x = win.x + win.w*pointNode[1]
		pointPos.y = win.y + win.h*pointNode[2]
	end
	if win.h < 20 then
		win.h = 20
	end
	
	--printTable(33,"win = ",win)
	
	if win.x > display.width - 10 then
		win.x = display.width - 10
	elseif win.x < 10 then
		win.x = 10
	end

	if win.y > display.height-10 then
		win.y = display.height - 10
	elseif win.y < 10 then
		win.y = 10
	end
	
	if pointPos.x > display.width-10 then
		pointPos.x = display.width - 10
	elseif pointPos.x < 10 then
		pointPos.x = 10
	end

	if pointPos.y > display.height - 10 then
		pointPos.y = display.height - 10
	elseif pointPos.y < 10 then
		pointPos.y = 10
	end
	--print(33,"pointPos.y = ",pointPos.y,"win.y = ",win.y,self.curWinNode,self.curPointNode)
	self.window:setPosition(win.x ,win.y)
	self.window:setWidth(win.w)
	self.window:setHeight(win.h)

	self.guang:setPosition(pointPos.x,pointPos.y)
	self.hand:setPosition(pointPos.x,pointPos.y)


	return true
end

function GuideType2View:doHandAction( isShow )

	self.guang:setVisible(isShow)
	self.hand:setVisible(isShow)

	if isShow == false then

		self.guang:displayObject():stopAllActions()
		self.hand:displayObject():stopAllActions()
		return
	end

	self.view:getTransition("fadein"):play(function()end)
	
	local scale1 = cc.ScaleTo:create(0.4,0.7,0.7)
	local scale2 = cc.ScaleTo:create(0.4,1,1)
	self.guang:displayObject():stopAllActions()
	self.guang:displayObject():runAction(cc.RepeatForever:create(cc.Sequence:create(scale1,scale2)))

	local xx = 6
	local yy = -6
	local rr = -30
	local tt = 0.4
	
	if GuideModel.curData and GuideModel.curData.directNode then
		local dd = string.split(GuideModel.curData.directNode,",")
		rr = dd[1] or rr
		xx = dd[2] or xx
		yy = dd[3] or yy
		tt = dd[4] or tt
	end
	
	local moveBy1 = cc.MoveBy:create(tt,cc.p(xx,yy))
	local moveBy2 = cc.MoveBy:create(tt,cc.p(-xx,-yy))
	self.hand:setRotation(rr)
	self.hand:displayObject():stopAllActions()
	self.hand:displayObject():runAction(cc.RepeatForever:create(cc.Sequence:create(moveBy1,moveBy2)))
end

function GuideType2View:doHandMove( data )

	local info = string.split(data.doNode,",")
	
	self.guang:setVisible(false)
	self.hand:setVisible(true)

	self.guang:displayObject():stopAllActions()
	self.hand:displayObject():stopAllActions()
	
	local pos1
	local pos2
	
	if info[1] == "1" then
		local node1 = self.curFindView.view:getChildAutoType(info[3])
		local node2 = self.curFindView.view:getChildAutoType(info[4])
		pos1 = node1:localToGlobal(Vector2.zero)
		pos2 = node2:localToGlobal(Vector2.zero)
	end
	local timeMove = info[2]
	--self.window:setVisible(false)
	--self._parentWin.view:setOpaque(false)
	local moveBy1 = cc.MoveBy:create(timeMove,cc.p(pos2.x-pos1.x,-(pos2.y-pos1.y)))
	local moveBy2 = cc.MoveBy:create(timeMove,cc.p(pos1.x-pos2.x,-(pos1.y-pos2.y)))
	self.hand:displayObject():runAction(cc.RepeatForever:create(cc.Sequence:create(moveBy1,moveBy2)))
	if data.noTounch then
		GuideModel.waitEvent = true
	end
end

function GuideType2View:runNext( step,index )
	if not self or tolua.isnull(self.view) then return end
	if self.schedulerIDCheckView then
		Scheduler.unschedule(self.schedulerIDCheckView)
	end
	if self.schedulerIDWaitServer then
		Scheduler.unschedule(self.schedulerIDWaitServer)
	end
	
	self.curPointNode = false
	self.curFindView = false
	self:lockScreen(true,"runNext")
	self:doHandAction( false )
	self:checkNodeMove(false)
	--self.window:setWidth(1)
	--self.window:setHeight(1)
	self.window:setTouchable(false)
	Dispatcher.dispatchEvent(EventType.guide_runNext,step,index)
end

function GuideType2View:doGuide( data )
	print(33,"doGuideType2")
	printTable(33,data)

	self:lockScreen(true,"doGuide")
	
	if self.schedulerIDCheckView then
		Scheduler.unschedule(self.schedulerIDCheckView)
	end
	
	self._parentWin:setVisible(true)
	self.window:setVisible(true)
	if not data.delay and self:guideLogic(data,0,0)==0 then return end
	self.view:setVisible(false)

	self.setUnLock = true
	self.searchView = true
	--如果查找目标失败  才会执行下面的逻辑

	local onceTime = data.onceTime or 0.2   --查询的间隔
	local tempTime = 0   --查询的间隔
	local timeNum = 0      --超时计时
	local lockNum = 10      --超时解锁
	if data.delay then
		tempTime = tempTime - data.delay
	end
	local onceSet = true
	local lockTime = data.lockTime or 1.0
	print(33,"doGuideType2 begin search")
	--开启定时器查找下一步引导的目标
	self.view:displayObject():scheduleUpdateWithPriorityLua(function (dt)
			tempTime = tempTime + dt
			timeNum = timeNum + dt
			if  tempTime < onceTime then return end
			tempTime = 0

			if  timeNum > lockTime and onceSet then
				onceSet = false
				if self.setUnLock then
					self:lockScreen(false,"pass lockTime")
				end
			end
			
			if  timeNum > lockNum and not data.lock then
				lockNum = lockNum + 10
				self:lockScreen(false,"pass lockNum")
			end
			local code = self:guideLogic(data,timeNum,onceTime)
			if code == 0 then
				self.view:displayObject():unscheduleUpdate()
				return
			else
				self.view:setVisible(false)
			end

			--设置了超时检测，直接进入下一步
			self:checkNext(data,timeNum,onceTime,code)

			--超过了5分钟检测不到下一步，退出引导（一般不会有这么长的引导等待）
			if timeNum > 300 then
			--	Scheduler.unschedule(self.schedulerID)
			--	self.schedulerID = Scheduler.scheduleNextFrame(function()
						--判断view是否还存在
						--if not tolua.isnull(self.view) then
							--self:closeView()
						--end
					--end)
			end



		end,0)

end

--查找View
function GuideType2View:handleTopView( data )
	if self.curTopView.window._compName == "VipUpLevelView" then
		local obj = self.curFindView.view:getChildAutoType("n24")
		local nodePos = obj:localToGlobal(Vector2.zero)
		self.guang:setPosition(nodePos.x,nodePos.y)
		self.hand:setPosition(nodePos.x,nodePos.y)
		self:doHandAction( true )
	end
end

--查找View
function GuideType2View:findView( data )
	--找出最上层的页面
	local topView = GuideModel:getTopView()
	if not topView then return end
	print(33,"topView = ",topView.window._compName)
	if topView.window._compName == "UpgradeView" then

	end

	self.curTopView = topView
	--print(33,"topView = ",topView.window._compName)
	--判断页面是否当前要查找的  （匹配时可以是viewName,可以是compName）
	if topView.window._viewName ~= data.view and data.view ~= topView.window._compName then
		return  false
	end


	self.curFindView = topView.window



	print(33,"find view success "..self.curFindView._viewName)
	return true
end

--查找Node 只设置一个指定node的情况
function GuideType2View:findNodeType1( data )

	--开始查找node
	local nodeArr = string.split(data.node,",")
	local obj = false
	for i=1,#nodeArr do
		
		obj = self.curFindView.view:getChildAutoType(nodeArr[i])
		print(33,"findNodeType1",obj,self.curFindView._viewName,nodeArr[i])
		if obj and obj:onStage() then break end
		obj = false
	end

	if not obj then
		return false
	end

	--local nodePos = obj:localToGlobal(Vector2.zero)
	--local nodeW = obj:getWidth()
	--local nodeH = obj:getHeight()
	--if nodePos.x > display.width+nodeW/2 or nodePos.x < 0-nodeW/2
		--or nodePos.y > display.height+nodeH/2 or nodePos.y < 0-nodeH/2 then
		--print(33,"find node pos false ")
		--return false
	--end

	if data.eventNode then
		self.curEventNode = self.curFindView.view:getChildAutoType(data.eventNode) or false
	else
		self.curEventNode = obj
	end

	if not self.curEventNode then return false end

	self.curFindNode = obj

	print(33,"find node success "..data.node,data.eventNode)
	return true
end

--查找Node 查找Glist里面的第N个item
function GuideType2View:findNodeType2(data )

	--开始查找node
	local nodeArr = string.split(data.node,",")
	local obj = false
	for i=1,#nodeArr do
		obj = self.curFindView.view:getChildAutoType(nodeArr[i])
		print(33,"findNodeType2",obj,self.curFindView._viewName,nodeArr[i])
		if obj and obj:isVisible() then break end
	end

	if not obj then
		return false
	end

	print(33,"find node success ",data.node,obj:getNumItems())
	local item = nil
	if obj:getNumItems() > 0 then
		item= obj:getChildAt(obj:itemIndexToChildIndex(data.listParam))
	end
	--obj:scrollToView(data.listParam)
	if not item then
		return false
	end

	print(33,"find list success ",data.listParam)

	if data.eventNode then
		self.curEventNode = item:getChildAutoType(data.eventNode) or false
	else
		self.curEventNode = item
	end

	if not self.curEventNode then return false end

	self.curFindNode = item
	self.curList = obj
	self.curListItem = item

	print(33,"find eventNode success ",data.eventNode)
	return true
end

--查找Node 查找Glist里面的符合条件的item
function GuideType2View:findNodeType3( data )

	--开始查找node
	local nodeArr = string.split(data.node,",")
	local obj = false
	for i=1,#nodeArr do
		obj = self.curFindView.view:getChildAutoType(nodeArr[i])
		if obj and obj:isVisible() then break end
	end

	if not obj then
		return false
	end

	print(33,"find node success ",data.node)

	local listParam = StringUtil.lua_string_split(data.listParam, ",")

	local type = listParam[1]
	local node = listParam[2]

	local par1 = listParam[3]
	local par2 = listParam[4]
	--local par3 = listParam[4]

	local listItem = false
	local nodeItem = false
	local findItem = false
	
	local t_listItem = false
	for i=0,obj:getNumItems()-1 do
		findItem = obj:getChildAt(i)
		t_listItem = findItem
		if node ~= "self" then
			findItem = findItem:getChildAutoType(node)
			nodeItem = findItem
		end

		if findItem then
			if type == "visible" then
				local boolVlaue = true
				if par1 == "false" then
					boolVlaue = false
				end
				if findItem:isVisible() == boolVlaue then
					listItem = t_listItem
					break
				end
			elseif type == "controller" then
				print(33,i,obj:getNumItems(),par1,findItem:getController(par1):getSelectedPage() , par2)
				if findItem:getController(par1):getSelectedIndex() == tonumber(par2) then
					local tpos = findItem:localToGlobal(Vector2.zero)
					print(33,"controller listitem find,posX =",tpos.x)
					--findItem:displayObject():runAction(cc.Sequence:create(cc.DelayTime:create(1),cc.CallFunc:create(function ()
									--local tpos = findItem:localToGlobal(Vector2.zero)
									--print(33,"controller listitem after 1S,posX =",tpos.x)
								--end)))
					listItem = t_listItem
					break
				end

			elseif type == "text" then
				if findItem:getText() == par1 or findItem:getText() == par2 then
					print(33,"text listitem find")
					listItem = t_listItem
					break
				end
			elseif type == "findmin" then
				
				local num_t = tonumber(findItem:getText())
				
				if not data.minNum then
					data.minNum = num_t
					data.findItem = findItem
					print(33,"num_t = ",num_t,data.minNum,data.findItem)
					data.listItem = t_listItem
				elseif num_t < data.minNum then
					
					data.minNum = num_t
					data.findItem = findItem
					data.listItem = t_listItem
					print(33,"num_t = ",num_t,data.minNum,data.findItem)
				end
			end
		end
		findItem = false
	end
	print(33,"findItem = ",data.findItem)
	if data.findItem then
		findItem = data.findItem
	end
	if data.listItem then
		listItem = data.listItem
	end
	if not findItem and not listItem then
		print(33,"no findItem or no listItem ",findItem,listItem)
		return false
	end
	local pos = findItem:localToGlobal(Vector2.zero)
	print(33,"find list findItem success ",findItem,pos.y)

	self.curList = obj
	self.curListItem = listItem
	self.curListNode = nodeItem
	self.curFindNode = findItem

	if  data.eventNode == "self" then
		self.curEventNode = listItem
	elseif data.eventNode then
		self.curEventNode = listItem:getChildAutoType(data.eventNode) or false
	else
		self.curEventNode = findItem
	end

	if not self.curEventNode then  return  false end

	print(33,"find curEventNode success ",data.eventNode)

	return true
end

function GuideType2View:guideLogic(data,timeNums,dt)
	self.searchView = true
	
	GuideModel:printLog(data,1,timeNums)
	if not self:findView( data ) then print(33,"finding view ",data.view,timeNums) return 1 end
	
	if data.func or data.func2 then
		--先特殊处理
		if self.curFindView.scrollToListItem then
			self.curFindView:scrollToListItem(data.func)
		else
			self.curFindView:_doGuideFunc(data.func2)
		end
		data.func = nil
		data.func2 = nil
	end
	
	if not self:checkWait("waitView", data,timeNums,dt ) then print(33,"finding view waitting... ",data.wait,timeNums) return 2 end
	if not self["findNodeType"..data.nodeType](self,data) then print(33,"finding node ",data.node,timeNums) return 3 end
	if not self:checkWait("waitNode", data,timeNums,dt ) then print(33,"finding node waitting... ",data.wait,timeNums) return 4 end
	
	if not self:findHandPos( data ) then print(33,"finding handpos ",timeNums) return 5 end

	GuideModel:printLog(data,2,timeNums)
	
	self:lockScreen(true,"guideLogic find success")
	self.view:setVisible(true)

	self.text:setVisible(false)

	if self.fistTime then
		self.view:setVisible(false)
		self.fistTime = false
	end

	self.window:removeClickListener()
	self.window:setTouchable(true)

	if data.noTounch then
		local noTounchData = string.split(data.noTounch,",")
		if noTounchData[1] == "1" then
			local snode = self.curFindNode:getChildAutoType(noTounchData[2])
			snode:addClickListener(function ()
					print(33,"noTounchData click")
					self:clickNext()
					snode:removeClickListener(33)
				end,33)
		elseif noTounchData[1] == "2" then
			self.callClickEndFunc = function()
				self:runNext()
			end
		elseif noTounchData[1] == "3" then
			self.callClickBegFunc = function()
				self:runNext()
			end
		elseif noTounchData[1] == "4" then
			
		end
		self:lockScreen(false,"do noTounch")
		self.window:setTouchable(false)
	end


	self:setGuideText( data )

	self.view:setVisible(true)
	
	if GuideModel.step == 1 then
		--self.nextbt:setVisible(false)
	else
		--self.nextbt:setVisible(true)
	end



	self.window:addClickListener(function ()
			print(33,"window click fgui")
			
			self:clickNext()
		end,33)



	if data.doNode == "false" then
		self:doHandAction( false )
	elseif data.doNode == "hfalse" then
		self:doHandAction( true )
		self.hand:setVisible(false)
	elseif data.doNode then
		self:doHandMove( data )
	else
		self:doHandAction( true )
	end
	
	if data.soundSrc then
		local soundData = string.split(data.soundSrc,",")
		local timeDelay = tonumber(soundData[2]) or 0.1
		if self.soundId then
			SoundManager.stopSound(self.soundId)
		end
		self.schedulerIDSound = Scheduler.scheduleOnce(timeDelay,function()
			self.soundId =  SoundManager.playSound(tonumber(soundData[1]))
			end)
	end

	self:checkNodeMove(true)
	
	self.searchView = false
	print(33,"guideLogic find end")
	return  0
end

function GuideType2View:checkNodeMove(value)
	
	if self.schedulerIDMove then
		Scheduler.unschedule(self.schedulerIDMove)
		self.schedulerIDMove =false
	end
	if value then
		self.schedulerIDMove = Scheduler.schedule(function()
				--判断view是否还存在
				if  tolua.isnull(self.view) or (self.curPointNode and tolua.isnull(self.curPointNode))  then 
					Scheduler.unschedule(self.schedulerIDMove)
					self.schedulerIDMove =false
					GuideModel:printLog(GuideModel.curData,5,0)
					self:runNext()
					return
				end
				self:findHandPos( GuideModel.curData )
				
			end,0.3,0)
	end
end

function GuideType2View:checkTopView()
	
	if self.searchView or not self.curFindView then return end
	
	local function checkFunc()
		if not tolua.isnull(self.view) and not self.searchView then
			local topView = GuideModel:getTopView()
			if topView then
				print(33,"Guide check topView = ",topView.window._compName,self.curFindView._compName,"=curFindView")
				if self.curFindView == topView.window then
					self._parentWin:setVisible(true)
				else
					self._parentWin:setVisible(false)
				end
			end
			
		end
	end
	
	checkFunc()
	

	if self.schedulerIDCheckView then
		Scheduler.unschedule(self.schedulerIDCheckView)
	end
	self.schedulerIDCheckView = Scheduler.schedule(checkFunc,0.3,0)

	
end

function GuideType2View:clickNext()
	if self.curFindView == false then return end 
	if not self.curFindView then self:errorExit( "self.curFindView == nil" ) return end
	if tolua.isnull(self.curFindView.view) then self:errorExit( "tolua self.curFindView == nil" ) return end
	if GuideModel.curData.finish then return end
	
	printTable(33,GuideModel.curData)
	
	if GuideModel.curData.noNext then
		self:lockScreen(false,"do noNext")
		self.view:setVisible(false)
		self:doHandAction( false )
		self.window:setWidth(1)
		self.window:setHeight(1)
		if self.schedulerIDMove then
			Scheduler.unschedule(self.schedulerIDMove)
			self.schedulerIDMove =false
		end
		return
	elseif GuideModel.curData.noclick then
		
	else
		if not self.curEventNode then self:errorExit( "self.curEventNode == nil" ) return end
		if tolua.isnull(self.curEventNode) then self:errorExit( "tolua self.curEventNode == nil" ) return end

		print(33,"GuideTpye2ClickNext dispatchEvent")
		self.curEventNode:dispatchEvent(FUIEventType.Click)
	end

	--GuideModel:printLog(GuideModel.curData,3,0)
	GuideModel.curData.finish = true
	if GuideModel.curData.waitServer then
		print(33,"guide waitServer")
		self.schedulerIDWaitServer = Scheduler.scheduleOnce(10,function()
				self.schedulerIDWaitServer = false
				self:runNext()
		end)
	else
		self:runNext()
	end
end

function GuideType2View:checkWait(wait,data,timeNum,dt)

	if data[wait] then
		local waitDt = wait.."dt"
		if not data[waitDt] then
			self:lockScreen(true,"wait",wait)
			data[waitDt] = 0
		else
			data[waitDt] = data[waitDt] + dt
		end
		print(33,wait.." begin ",data[wait],data[waitDt])
		if data[waitDt] > data[wait] then
			--self:lockScreen(false)
			data[wait] = false
			data[waitDt] = false
			print(33,wait.." finish ",data[wait],data[waitDt])
		else
			return  false
		end

	end

	return true
end

function GuideType2View:checkNext(data,timeNum,dt,code)

	if code == 2 or code == 4 then return end

	local function nowRunNext()
		GuideModel:printLog(GuideModel.curData,4,0)
		--进入下一步
		self:runNext()

		--停止刷新定时器
		self.view:displayObject():unscheduleUpdate()
	end

	if data.timeout then
		print(33,"timeout begin")
		if not data.timeoutDt then
			data.timeoutDt = 0
		else
			data.timeoutDt = data.timeoutDt + dt
		end

		if data.timeoutDt > tonumber(data.timeout) then
			print(33,"timeout finish")
			nowRunNext()
		end

	end

	local checkNext = data.checkNext and string.split(data.checkNext,",")
	if checkNext then
		print(33,"checkNext ",data.checkNext)



		if checkNext[1] == "1" then
			if timeNum > tonumber(checkNext[2]) then
				print(33,"checkNext finish")
				nowRunNext()
			end
		elseif checkNext[1] == "2" then
			----print(33,"ffff",self.curTopView.window._viewName,checkNext[3])
			if self.curTopView and self.curTopView.window._compName ~= checkNext[3] and self.curTopView.window._compName ~= checkNext[4] then
				if not data.checkNextDt then
					data.checkNextDt = 0
				else
					data.checkNextDt = data.checkNextDt + dt
				end

				print(33,"checkNext begin",data.checkNextDt)
				if data.checkNextDt > tonumber(checkNext[2]) then
					print(33,"checkNext finish")
					nowRunNext()
				end

			end
		elseif checkNext[1] == "3" then
			if self.curTopView and (self.curTopView.window._compName  == checkNext[3] or self.curTopView.window._compName == checkNext[4]) then

				if data.view == "BattlePrepareView" and data.node == "selectList" then
					if self.curFindView and ViewManager.getView("BattlePrepareView") then
						local obj = self.curFindView.view:getChildAutoType(data.node)
						if obj and obj:getNumItems() < 1 then
							self:lockScreen(true,"selectList")
							return
						end
					end
				end
				
				if not data.checkNextDt then
					data.checkNextDt = 0
				else
					data.checkNextDt = data.checkNextDt + dt
				end

				print(33,"checkNext begin",data.checkNextDt)
				if data.checkNextDt > tonumber(checkNext[2]) then
					print(33,"checkNext finish")
					nowRunNext()
				end

			end
		end

	end
end

function GuideType2View:view_change(_,view)
	print(33,"GuideType2View:view_change 1")
	if not tolua.isnull(self.view) then
		print(33,"GuideType2View:view_change 2")
		if self.searchView  then
			print(33,"GuideType2View:view_change 3")
			if self:guideLogic(GuideModel.curData,0.01,0.01) == 0 then
				print(33,"GuideType2View:view_change 4 find success")
				self.view:displayObject():unscheduleUpdate()
			else
				local vvvaule = self._parentWin.view:getOpaque()
				if vvvaule and self.curFindView and self.curFindView == self.curTopView.window then return end
				self:lockScreen(true,"view_change lock")
				self.schedulerIDLock = Scheduler.scheduleOnce(0.2,function()
						--判断view是否还存在
						if not tolua.isnull(self.view) then
							self.schedulerIDLock = false
								
							if self.curTopView and self.curFindView ~= self.curTopView.window or (not GuideModel.curData.waitViewdt and not GuideModel.curData.waitNodedt)  then
								self:lockScreen(false,"view_change unlock")
							end
						end
					end)
			end
			
			--self.searchView = false
		else
			print(33,"GuideType2View:view_change checkTopView")
			self:checkTopView()
		end
	end
end


function GuideType2View:lockScreen(value,id)
	self.setUnLock = false
	if self.schedulerIDLock then
		Scheduler.unschedule(self.schedulerIDLock)
	end
	if value then
		self._parentWin:setVisible(value)
	end
	print(33,"lockScreen",value,id)
	self._parentWin.view:setOpaque(value)
end


function GuideType2View:guide_setNameSuccess()
	--监听改名成功
	--GuideModel.curValue = 1
	--进入下一步
	--if GuideModel.curData.waitServer then return end
	self:runNext()
end

function GuideType2View:guideType2_checkNext(_,step,index)

	--GuideModel:printLog(GuideModel.curData,3,0)
	--进入下一步
	self:runNext(step,index)

	--停止刷新定时器
	self.view:displayObject():unscheduleUpdate()
	
end

function GuideType2View:errorExit( str )
	print(33,"GuideView:errorExit",str)
	--RollTips.show(str)

	--发生错误 ，下一帧跳到下一步
	self.schedulerID = Scheduler.scheduleNextFrame(function()
			--判断view是否还存在
			if not tolua.isnull(self.view) then
				GuideModel:printLog(GuideModel.curData,6,0)
				self:runNext()
			end
		end)
end

function GuideType2View:_exit()
	--RollTips.show("引导结束了")
	Scheduler.unschedule(self.schedulerID)
	Scheduler.unschedule(self.schedulerIDLock)
	Scheduler.unschedule(self.schedulerIDCheckView)
	Scheduler.unschedule(self.schedulerIDMove)
	Scheduler.unschedule(self.schedulerIDWaitServer)
	Scheduler.unschedule(self.schedulerIDSound)
	self.view:displayObject():unscheduleUpdate()
end

return GuideType2View