--Name : GuideModel.lua
--Author : generated by FairyGUI
--Date : 2020-3-10
--Desc : 


local GuideModel = class("GuideModel", BaseModel)

function GuideModel:ctor()
	self.checkLevel = false
	self.step = 1
	self.state = 0
	self.index = 0
	
	self.indexTop = 0
	
	self.allStep = 100
	self.checkCount = 60
	self.curData = false
	
	self.level = 1
	
	self.guideGroup = {}
	self.guideName = ""
	self.guideMode = 1
	self.waitEvent = false
	
	self.curId = 0
	self.curValue = 0
	self.testMode = false
	self.testData = {}
	self.testArr = {}
	self.guide_AllConfig = false
	
	self.noviceProcessConf = false
	self.checkMap ={}
	
	self.doOnce = {}
end

function GuideModel:init()

end

function GuideModel:loginPlayerDataInit(data)
	--self.step = data.baseData.attr.guide.id
	--self.index = data.baseData.attr.guide.value
	if data.baseData.attr.guide.strValue then
		
		local jsonData = json.decode(data.baseData.attr.guide.strValue)
		--print(33,"Guide Data",data.baseData.attr.guide.id,data.baseData.attr.guide.value)
		printTable(33,"Guide Data",data.baseData.attr.guide)
		if not jsonData.n then
			jsonData.n = "firstGuide"
			jsonData.m = 1
			jsonData.s = 1
			jsonData.i = 0
			jsonData.g = {"firstGuide"}
		end
		self.curValue = data.baseData.attr.guide.value
		self.curId = data.baseData.attr.guide.id
		
		self.guideName =  jsonData.n
		self.guideMode =  jsonData.m
		self.step =  jsonData.s
		self.index =  jsonData.i
		self.guideGroup = jsonData.g
		self.indexTop = jsonData.i
		
		local serverData = DynamicConfigData.t_NoviceProcess[self.curValue]
		if serverData and serverData.node == self.guideName then	
			if (serverData.module == self.step and serverData.steps > self.index) or serverData.module > self.step  then
				self.step =  serverData.module
				self.index =  serverData.steps
			end
				
		end
	else
		LuaLogE("Guide Data Err")
	end
	
	if not string.find(LoginModel:getUserName(), "guide") and not __SDK_LOGIN__ then
		self.step = 330
	end
	
	
	--self.step = 12
	--self.state = 0
	
	
end

function GuideModel:IsGuiding()
	
	local view = ViewManager.getView("GuideView")
	if view and view.view:isVisible() then
		return true
	end
	
	return false
end

function GuideModel:updateGuideToServer()
	--if self.guideMode == 1 then
	if ViewManager.getView("LoginView") then return end
	
	local data = {
		id = self.curId,
		value = self.curValue,
		strValue = json.encode({
				n = self.guideName,
				m = self.guideMode,
				s = self.step,
				i = self.index > self.indexTop and self.index or self.indexTop,
				g = self.guideGroup,
			})
	}
	RPCReq.Attr_UpdateGuide(data)
	--end
end

function GuideModel:updateRecordId(data)
	--if self.guideMode == 1 then
	if ViewManager.getView("LoginView") then return end

	if not self.noviceProcessConf then
		self.noviceProcessConf = {}
		for k,v in pairs(DynamicConfigData.t_NoviceProcess) do
			
			if not self.noviceProcessConf[v.node] then 
				self.noviceProcessConf[v.node] = {}
			end
			
			if not self.noviceProcessConf[v.node][v.module] then
				self.noviceProcessConf[v.node][v.module] = {}
			end
			
			self.noviceProcessConf[v.node][v.module][v.steps] = v.id
			
		end
		
	end
	local cf = self.noviceProcessConf[self.guideName]
	local guidecf = self.guide_AllConfig[self.guideName]
	
	if not cf or not guidecf then return end
	
	local nextId = false
	local bindex = self.index
	for i = self.step, #guidecf do
		for j = bindex, #guidecf[i] do
			print(33,"i=",i,"j=",j,"cf[i][j]=",cf[i][j])
			if cf[i] and cf[i][j] then
				nextId = cf[i][j]
				--if i == self.step and j == self.index then
					 --self.curData.waitServer = true
				--end
				break
			end
		end
		bindex = 1
		if nextId then break end
	end

	if nextId then
		print(33,"Attr_UpdateRecordId",nextId)
		if nextId > self.curId then
			self.curId = nextId
		end
		RPCReq.Attr_UpdateRecordId({id = nextId})
	end
	--end
end

function GuideModel:getTopView()
	--if self.guideMode == 1 then
	local topView = ViewManager.getLayerTopWindow(nil,{[LayerDepth.RollTips] = true,[LayerDepth.Guide] = true,[LayerDepth.Message] = true,[LayerDepth.UIEffect] = true,[LayerDepth.WindowUI] = true})
	return topView
end

function GuideModel:printLog(data,type,time)
	if self.testMode then

		local desc = "["..self.step.."-"..self.index.."]"
		local dd = data.desc or ""
		dd = dd..")[/color]"
		if type == 1 then
			local stiem = math.floor(time/5)
			
			desc = desc..DescAuto[128]..dd..data.view.."->"..data.node..DescAuto[129]..stiem -- [128]="[color=#FFFF00]正在查找[/color][color=#CC66FF](" -- [129]=" 耗时："
		elseif type == 2 then
			desc = desc..DescAuto[130]..dd..data.view.."->"..data.node..DescAuto[129]..time -- [130]="[color=#00FF00]成功查找[/color][color=#CC66FF](" -- [129]=" 耗时："
		elseif type == 3 then
			desc = desc..DescAuto[131]..dd..self.curData.view.."->"..self.curData.node -- [131]="[color=#00FF00]成功引导[/color][color=#CC66FF]("
		elseif type == 4 then
			desc = desc..DescAuto[132]..dd..self.curData.view.."->"..self.curData.node -- [132]="[color=#FF0000]超时跳过引导[/color][color=#CC66FF]("
		elseif type == 5 then
			desc = desc..DescAuto[133]..dd..self.curData.view.."->"..self.curData.node -- [133]="[color=#FF0000]节点消失跳过引导[/color][color=#CC66FF]("
		elseif type == 6 then
			desc = desc..DescAuto[134]..dd..self.curData.view.."->"..self.curData.node -- [134]="[color=#FF0000]节点异常跳过引导[/color][color=#CC66FF]("
		end
		
		
		local key = tostring(data)..desc
		if not self.testData[key] then
			self.testData[key] = desc
			table.insert(self.testArr,desc)
			RollTips.show(desc,6)
		end
	end
end

function GuideModel:checkGuideActivate(checkMap)
	--if true then return end
	for i = 1, #checkMap do
		
		local name = checkMap[1].name
		local id = checkMap[1].id

		print(33,"GuideModel checkGuideActivate",name,id)
		if not ModuleUtil.moduleOpen(id,false) then print(33,"no open ",name)return end

		if not self.checkMap[name] then
			self.checkMap[name] = true
			for i = 1, #self.guideGroup do
				if self.guideGroup[i] == name then
					Dispatcher.dispatchEvent(EventType.guide_open,{gRepeat = true,guideMode = 2,guideName = name})
					return
				end
			end

			Dispatcher.dispatchEvent(EventType.guide_open,{guideMode = 2,guideName = name})
			return
		end
		
	end
	
	
end

function GuideModel:_doGuideFunc(args)
	
	local data = string.split(args,"#")
	print(33,"_doGuideFunc ",args)
	if data[1] == "backToMain" then
		ViewManager.backToMainView({GuideView = true})
	elseif data[1] == "openFight" then
		if not self.doOnce[data[1]] then
			Dispatcher.dispatchEvent(EventType.Battle_playEditBattle,{isRecord = false,fightID=DynamicConfigData.t_endlessRoadConst[1].fightId,configType=GameDef.BattleArrayType.EndlessRoad},
				DynamicConfigData.FightConfig,function(cmd)
					if cmd == "fightEnd" then
						self:updateGuideToServer()
					elseif cmd == "end" then
						Dispatcher.dispatchEvent(EventType.guideType2_checkNext)
						local tGuideView = ViewManager.getView("GuideView")
						if tGuideView then
							tGuideView.view:setOpaque(true)
						end
						--PushMapModel:PushMapQuickEnter(1,1,1)
						--self.doOnce["openPushMap"] = true
						local topView = ViewManager.getParentLayer(LayerDepth.UIEffect)
						local layer = cc.LayerColor:create({r=0,g=0,b=0,a=255},display.width,display.height)
						layer:setPosition(0,-display.height)
						topView:displayObject():addChild(layer,999)
						layer:runAction(cc.Sequence:create(cc.FadeOut:create(2),cc.CallFunc:create(function()
							if not tolua.isnull() then
								layer:removeFromParentAndCleanup(true)		
							end
						end)))
					end
				end)
			self.doOnce[data[1]] = true
		end
	elseif data[1] == "openPushMap" then
		if not self.doOnce[data[1]] then
			PushMapModel:PushMapQuickEnter(1,1,1)
			self.doOnce[data[1]] = true
		end
	elseif data[1] == "openView" then
		if not self.doOnce[args] then
			local openArgs = nil
			if data[3] then openArgs = loadstring("return "..data[3])() end
			ViewManager.open(data[2],openArgs)
			self.doOnce[args] = true
		end
	end
	
end
function GuideModel:isEndFirstGuide()
	if self.guideGroup and self.guideGroup[1] then
		return self.guideGroup[1] ~= "firstGuide"
	else
		return true
	end
	return false
end
return GuideModel
