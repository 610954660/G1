--Date :2020-12-21
--Author : generated by FairyGUI
--Desc : 

local FestivalGiftModel = class("FestivalGiftModel", BaseModel)

function FestivalGiftModel:ctor()
    self:initListeners();
    self.loginCount = 0; --登录次数
	self.recvMark = 0;
	self.initRed = false;
	self.timer = false
	self.txtComp = false
end

function FestivalGiftModel:initData(data)
    self.loginCount = data.dayCount;
	self.recvMark = data.recvMark;
	Dispatcher.dispatchEvent("FestivalGift_updateData");
	self:checkRed();
end

-- function FestivalGiftModel:activity_update()
--     local data = ActivityModel:getActityByType( GameDef.ActivityType.EveryDayLogin)
--     local x = 0;
-- end
function FestivalGiftModel:Activity_UpdateData(_, params)
	if params.type ~= GameDef.ActivityType.EveryDayLogin then
		return 	
	end
	if params and params.everyDayLogin then
		self:initData(params.everyDayLogin)
	end
end

function FestivalGiftModel:getAward(id)
	RPCReq.Activity_EveryDayLogin_GetReward({id = id})
end

function FestivalGiftModel:clearTimeScheduler()
	if self.timer then
        TimeLib.clearCountDown(self.timer)
        self.timer = false
    end
end

--主界面计时
function FestivalGiftModel:timeScheduler(txtComp)
	if self.timer then
		TimeLib.clearCountDown(self.timer)
		self.timer = false
	end
	if txtComp then
		self.txtComp = txtComp
	end
	
	if not self.txtComp then return end

	self.txtComp:setVisible(true)
	
	local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.EveryDayLogin)
    if not actData then return end
    local actId   = actData.id
	
	local status, addTime = ModelManager.ActivityModel:getActStatusAndLastTime(actId)
	local addTime = math.floor(addTime / 1000)
	--[[if not self.status then return end
	if self.status == GameDef.DreamMasterPvpActivityStatus.GoingOne or self.status == GameDef.DreamMasterPvpActivityStatus.GoingTwo then
		self.txtComp:setText(Desc.DreamMasterPvp_going)
		return
	elseif self.status == GameDef.DreamMasterPvpActivityStatus.GoingThree or self.status == GameDef.DreamMasterPvpActivityStatus.GoingFour then
		self.txtComp:setText(Desc.DreamMasterPvp_going)
		return
	elseif self.status == GameDef.DreamMasterPvpActivityStatus.AllEnd then
		self.txtComp:setText(Desc.DreamMasterPvp_allend)
		return
	end--]]
	local dayTime = 24*60*60
	local curServerTime = ServerTimeModel:getServerTime()
	--local addTime = self.nextSec - (curServerTime - self.nextSecServerTime)
	self.timer = TimeLib.newCountDown(addTime,function(time)
			if tolua.isnull(self.txtComp) then
				return
			end
			self.txtComp:setVisible(true)
			
			if time<dayTime then
				self.txtComp:setText(TimeLib.formatTime(time))
			else
				self.txtComp:setText(TimeLib.GetTimeFormatDay1(time))
			end
		end,function()
			if tolua.isnull(self.txtComp) then
				return
			end
			self.txtComp:setText(TimeLib.formatTime(0))
			--self:timeScheduler(self.txtComp)
		end,false,false,false)
end

function FestivalGiftModel:checkRed()
	if (not self.initRed) then
		local map = {
			"FestivalGift1",
			"FestivalGift2",
			"FestivalGift3",
		}
		RedManager.addMap("V_ACTIVITY_"..GameDef.ActivityType.EveryDayLogin, map);
	end
	local activeData = ActivityModel:getActityByType(GameDef.ActivityType.EveryDayLogin);
	local moduleId = activeData and activeData.showContent.moduleId or 1;
	local conf = DynamicConfigData.t_FestivalGift[moduleId];
	local dayCount = self.loginCount
	local arr = {}
	for _, d in pairs(conf) do
		table.insert(arr, d);
	end
	table.sort(arr, function(a, b)
		return a.id < b.id;
	end)
	for i, c in pairs(arr) do
		local flag = bit.band(self.recvMark, bit.lshift(1, c.day - 1)) > 0
		if (not flag and c.day <= dayCount) then
			RedManager.updateValue("FestivalGift"..i, true);
		else
			RedManager.updateValue("FestivalGift"..i, false);
		end
	end
end

return FestivalGiftModel
