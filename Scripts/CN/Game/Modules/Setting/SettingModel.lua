--Name : SettingModel.lua
--Author : generated by FairyGUI
--Date : 2020-6-6
--Desc : 


local SettingModel = class("SettingModel", BaseModel)

function SettingModel:ctor()
	self.data = {}
end

function SettingModel:init()
	self:readSettingData()
end

--读取配置
function SettingModel:readSettingData()

	local data = FileCacheManager.getStringForKey(FileDataType.SETTING, "", nil, true)
	if data ~= "" then
		local Info = json.decode(data)
		if type(Info) == "table" then
			self.data = Info
			printTable(33,"SettingModel.data = ",self.data)
		end
	else
		self.data = {}
		self.data.zl = 0   --帧率 0 = 30 ,1 = 60
		self.data.sp = 30   --适配  1-100
		self.data.sd = 1   --省电模式 0 = 关 1=开
		self.data.sound = {100,100}   --音乐,音效
		self.data.minMap = 0  --minMap模式


		local targetHeight = 720
		local targetWidth = 1280
		if display.height > 720 then
			targetHeight = 720
		elseif display.width > 1400 then
			local max = display.width - 1280.0
			local cur = display.width - 1400.0
			self.data.sp = math.ceil(100.0*cur/max)
		end
		
		--内存小于两G的打开minmap模式
		xpcall(function()
			local memStr = gy.GYDeviceUtil:getMemSize()
			if memStr and memStr ~= "" then
				local menSize = string.gsub(memStr, "GB", "")
				local size = 100
				if memSize and tonumber(menSize) then
					size = tonumber(menSize) 
				end
				if size < 2 then
					LuaLogE("mem size = "..menSize.."  open minMapMode")
					self.data.minMap = 1
				end
			end
		end,__G__TRACKBACK__)
	end
	
	self:updateSound( 1 )
	self:updateSound( 2 )
	self:updateZL()
	
	ViewManager.fitAllViews()
end

--保存设置
function SettingModel:saveSettingData()
	FileCacheManager.setStringForKey(FileDataType.SETTING, json.encode(self.data), nil, true)
end

--设置音量
function SettingModel:updateSound( index )
	if index == 1 then
		SoundManager.setMusicVolume(self.data.sound[index])
	else
		--print(33,"ss=",SettingModel.data.sound[index]/100.0)
		SoundManager.setSoundVolume(self.data.sound[index])
		fgui.GRoot:getInstance():setSoundVolumeScale(self.data.sound[index]/100.0)
	end

end

--设置帧率
function SettingModel:updateZL( )
	self:updateSD( )
end

--设置省电模式
function SettingModel:updateSD( )
	if self.data.zl == 0 then
		__FPS__ = 30
	else
		__FPS__ = 60
	end
	if self.data.sd == 1 then
		__FPS__ = 30
	end
	cc.Director:getInstance():setAnimationInterval(1.0 / __FPS__)
end

--是否使用minmap模式
function SettingModel:useMinMapMode()
	local minMap = ModelManager.SettingModel.data.minMap
	local minMapMode = minMap and minMap >= 1
	return minMapMode
end


return SettingModel
