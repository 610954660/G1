--Date :2021-01-05
--Author : generated by FairyGUI
--Desc : 

local DormJigsawView,Super = class("DormJigsawView", Window)

function DormJigsawView:ctor()
	--LuaLog("DormJigsawView ctor")
	self._packName = "Dorm"
	self._compName = "DormJigsawView"
	self._rootDepth = LayerDepth.PopWindow
	self.picDir = "UI/Dorm/"
	self.beginTime = 0
	self.scheduler = false
	self.lastClickObj = false
	self.lastClickIndex = 0
	self.allObj = {}
	self.first = true
	self.heroData = {}
 	self.heroId = false
	self.type = false
	self.finish = false
	self.time = 0
end

function DormJigsawView:_initEvent( )
	
end

function DormJigsawView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:Dorm.DormJigsawView
	self.bg = viewNode:getChildAutoType('bg')--GLoader
	self.frame = viewNode:getChildAutoType('frame')--GLabel
	self.helpMove1 = viewNode:getChildAutoType('helpMove1')--GLoader
	self.helpMove2 = viewNode:getChildAutoType('helpMove2')--GLoader
	self.list = viewNode:getChildAutoType('list')--GList
	self.time = viewNode:getChildAutoType('time')--GTextField
	self.tips = viewNode:getChildAutoType('tips')--GTextField
	--{autoFieldsEnd}:Dorm.DormJigsawView
	--Do not modify above code-------------
end


function DormJigsawView:_initUI( )
	self:_initVM()
   	self.bg:setURL("Bg/bg_heroDormitory1.jpg")
	local picAll = {"bn","hfr","kv","ld","lg"}
	local randId = math.random(1,#picAll)
	local picId = picAll[randId]
	self.path = self.picDir..picId.."/"..picId.."_0%d.jpg"

	self.keyC = {
		{2,4},
		{1,3,5},
		{2,6},
		{1,5,7},
		{2,4,6,8},
		{3,5,9},
		{4,8},
		{5,7,9},
		{6,8},
	}
	
	self.keyData = {1,2,3,4,5,6,7,8,9}
	self.heroData = self._args.heroData or {}
	self.type = self.heroData.type or 3
	self.heroId = self.heroData.heroId
	
	self.list:setItemRenderer(function(index, obj)
		
		local url = self.path:format(self.keyData[index+1])
		obj:setIcon(url)
		
		self.allObj[index+1] = obj
		obj.sortId = self.keyData[index+1]
		obj:addClickListener(function()
			if self.first then
				return 
			end
			if not self.lastClickObj then
				self.lastClickObj = obj
				self.lastClickIndex = index
				--self.helpMove1:setURL()
			 	return 
			end
			
			self:clickEvent( obj ,index)

		end,33)
	end)

	
	self.list:setNumItems(9)

	self.list:setTouchable(false)
	self.view:addClickListener(function()
		if self.finish then
			self:closeView()
			return
		end
		if self.first then
			--随机打算顺序
			for i=1,9 do
				local rand = math.random(1,9)
				local temp = self.keyData[rand]
				self.keyData[rand] = self.keyData[i]
				self.keyData[i] = temp
			end
			
			self.tips:setText(Desc.HeroDormitory_tips)
			self.first = false
			self.list:setNumItems(9)
			self:updateCountTimer()
			self.list:setTouchable(true)
			return 
		end
	end)
	
end


function DormJigsawView:clickEvent( obj,index )
	
	
	local canChange = false
	for k,v in pairs(self.keyC[self.lastClickIndex+1]) do 
		if index+1 == v then
			canChange = true
			break
		end
	end
	
	if canChange then
		self:playMoveAni(self.lastClickObj,obj)
		local temp = self.lastClickObj.sortId
		self.lastClickObj.sortId = obj.sortId
		obj.sortId = temp
		obj:setIcon(self.path:format(obj.sortId))
		self.lastClickObj:setIcon(self.path:format(self.lastClickObj.sortId))
	end

	self.lastClickObj = false

	local isWin = true
	for i=1,9  do 
		if self.allObj[i].sortId ~= i then
			isWin = false
		end
		self.allObj[i]:setSelected(false)
	end
	
	if isWin then
		RollTips.show(Desc.HeroDormitory_finish)
		self.list:setTouchable(false)
		--清除定时器
		if self.scheduler then
			Scheduler.unschedule(self.scheduler)
			self.scheduler =false
		end
		self:doFinish(  ServerTimeModel:getServerTime() - self.beginTime)
	end
	
end

-- 移动效果
function DormJigsawView:playMoveAni(obj1,obj2)

	self.list:setTouchable(false)
	local listPos = self.list:getPosition()

	local pos1 = obj1:getPosition()
	pos1.x = pos1.x+listPos.x
	pos1.y = pos1.y+listPos.y
	self.helpMove1:setPosition(pos1.x,pos1.y)
	
	local pos2 = obj2:getPosition()
	pos2.x = pos2.x+listPos.x
	pos2.y = pos2.y+listPos.y
	self.helpMove2:setPosition(pos2.x,pos2.y)

	self.helpMove1:setVisible(true)
	self.helpMove2:setVisible(true)
	self.helpMove1:setURL(self.path:format(obj1.sortId))
	self.helpMove2:setURL(self.path:format(obj2.sortId))

	local oldPosX1,oldPosY1 = self.helpMove1:displayObject():getPosition()
	local oldPosX2,oldPosY2 = self.helpMove2:displayObject():getPosition()
	local finishFuc = cc.CallFunc:create(function()
		self.helpMove1:displayObject():setPosition(oldPosX1,oldPosY1)
		self.helpMove2:displayObject():setPosition(oldPosX2,oldPosY2)
		self.list:setTouchable(true)
		obj1:setVisible(true)
		obj2:setVisible(true)
		self.helpMove1:setVisible(false)
		self.helpMove2:setVisible(false)
	end)

	obj1:setVisible(false)
	obj2:setVisible(false)
	self.helpMove1:displayObject():runAction(cc.MoveBy:create(0.3,cc.p(pos2.x-pos1.x,pos1.y-pos2.y)))
	self.helpMove2:displayObject():runAction(cc.Sequence:create(cc.MoveBy:create(0.3,cc.p(pos1.x-pos2.x,pos2.y-pos1.y)),finishFuc))
end

-- 计时
function DormJigsawView:updateCountTimer()
	self.beginTime = ServerTimeModel:getServerTime()
	local time = 0
	self.time:setText("0S")
	self.scheduler = Scheduler.schedule(function()
		if tolua.isnull(self.view) then return end
		time = time + 1
		self.time:setText(time.."S")
	end,1,0)
end


function DormJigsawView:doFinish( time )
	--self:closeView()
	self.time = time
	Scheduler.scheduleNextFrame(function() 
		self.finish = true 
	end)
	self.tips:setText(Desc.HeroDormitory_tips2)
end


function DormJigsawView:_exit()
	if self.finish then 
		local index = 1
		local parameter = DynamicConfigData.t_HeroInteractionType[self.type].parameter
		for i,v in ipairs(parameter) do
			if self.time >= v then 
			  index = i
			  break
			end
		end
		local params = {}
		params.tionType = self.type
		params.pos = index
		params.heroCode = self.heroId 
		RPCReq.HeroTotems_AddHeroInteractionType(params)
	end
	--清除定时器
	if self.scheduler then
		Scheduler.unschedule(self.scheduler)
		self.scheduler = false
	end
end


return DormJigsawView