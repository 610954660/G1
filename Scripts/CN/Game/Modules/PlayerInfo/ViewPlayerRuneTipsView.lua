--Date :2021-01-24
--Author : generated by FairyGUI
--Desc : 

local ViewPlayerRuneTipsView,Super = class("ViewPlayerRuneTipsView", Window)
local ItemConfiger = require "Game.ConfigReaders.ItemConfiger" --道具配置读取器
local  RuneConfiger = require "Game.Modules.RuneSystem.RuneConfiger"

function ViewPlayerRuneTipsView:ctor(args)
	--LuaLog("ViewPlayerRuneTipsView ctor")
	self._packName = "PlayerInfo"
	self._compName = "ViewPlayerRuneTipsView"
	self._rootDepth = LayerDepth.Tips
	
	self.arrayData = args.array
	self.data = args.runeInfo
	self.heroRune = args.heroRune
	
	self.groupData = false
	self.attrData = false
	
	self.skillData = false
	self.selectedIndex = 1
	self.hasRuneHero = {} --只有有装符文的英雄才需要出现在列表
	
	for _,v in ipairs(self.arrayData) do
		if self.heroRune[v.uuid] then
			table.insert(self.hasRuneHero, v)
		end
	end
end

function ViewPlayerRuneTipsView:_initEvent( )
	
end

function ViewPlayerRuneTipsView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:PlayerInfo.ViewPlayerRuneTipsView
	self.allLevel = viewNode:getChildAutoType('allLevel')--GTextField
	self.blackbgAlpha = viewNode:getChildAutoType('blackbgAlpha')--GLabel
	self.list_hero = viewNode:getChildAutoType('list_hero')--GList
	self.prosList = viewNode:getChildAutoType('prosList')--GList
	self.skillList = viewNode:getChildAutoType('skillList')--GList
	self.skillName = viewNode:getChildAutoType('skillName')--GRichTextField
	self.skillTxt = viewNode:getChildAutoType('skillTxt')--GRichTextField
	self.statusCtrl = viewNode:getController('statusCtrl')--Controller
	--{autoFieldsEnd}:PlayerInfo.ViewPlayerRuneTipsView
	--Do not modify above code-------------
end

function ViewPlayerRuneTipsView:_initListener( )
	
	--所有符文属性叠加
	self.list_hero:setItemRenderer(function (index,obj)
		local heroInfo = self.hasRuneHero[index + 1]
		local heroCell = obj:getChildAutoType("heroCell")
		local cardItem = BindManager.bindHeroCell(heroCell)
		cardItem:setBaseData(heroInfo)	
		if index + 1 == self.selectedIndex then
			obj:getController("c1"):setSelectedIndex(1)
			obj:setTouchable(false)
			local heroRune = self.heroRune[heroInfo.uuid]
			if heroRune then
				self:updatePage(self.data[heroRune.id])
			end
		else
			obj:getController("c1"):setSelectedIndex(0)
			obj:setTouchable(true)
		end
		
		obj:removeClickListener()
		obj:addClickListener(function()
			self.selectedIndex  = index + 1
			self.list_hero:setNumItems(#self.hasRuneHero)
		end, 100)
    end)

	--所有符文属性叠加
	self.prosList:setItemRenderer(function (index,obj)
		    local data = self.attrData[index+1]
            obj:getChildAutoType("title"):setText(Desc["common_fightAttr"..data.id])
			obj:getChildAutoType("titleVal"):setText("+"..GMethodUtil:getFightAttrName(data.id,data.value))
			if data.id < 100 or RuneConfiger.isHightAttr(data.id) then
				obj:getChildAutoType("title"):setColor(cc.c3b(0xff, 0xA4, 0x43))
				obj:getChildAutoType("titleVal"):setColor(cc.c3b(0xff, 0xA4, 0x43))
			else
				obj:getChildAutoType("title"):setColor(ColorUtil.textColor.white)
				obj:getChildAutoType("titleVal"):setColor(ColorUtil.textColor.white)
			end
    end)
    --符文技能list
    self.skillList:setItemRenderer(function (index,obj)
    	obj:removeClickListener(100)
    	local skillId = self.skillData[index+1]
		local iconLoader = obj:getChildAutoType("iconLoader")
        if skillId ~= 0 then
            local skillInfo = DynamicConfigData.t_passiveSkill[skillId]
            if skillInfo then
                local skillurl = ModelManager.CardLibModel:getItemIconByskillId(skillInfo.icon)
                iconLoader:setURL(skillurl)
            end
		else
			iconLoader:setURL(nil)
        end
	end)

end

function ViewPlayerRuneTipsView:updatePage(runeData)
	if runeData then
		local runeLevel = runeData.level
		self.attrData = runeData.attr
		self.skillData = runeData.skills
		self.view:getChildAutoType("allLevel"):setText(runeLevel)
		for _,v in ipairs(self.attrData) do
			v.isHigh = (v.id < 100 or RuneConfiger.isHightAttr(v.id)) and 1 or 0
		end
		TableUtil.sortByMap(self.attrData, {{key = "isHigh",asc = true}, {key = "id",asc = false}})
		self.view:getChildAutoType("prosList"):setData(self.attrData)
		

		self.skillData = self.skillData or {}
		if not  (#self.skillData>0) then
			table.insert(self.skillData,0)
		end
		self.skillList:setData(self.skillData)
		if self.skillData[1] and self.skillData[1]~=0 then
			self.view:getController("statusCtrl"):setSelectedIndex(1)
			local skillInfo = DynamicConfigData.t_passiveSkill[self.skillData[1]]
			self.skillName:setText(skillInfo.name)
			self.skillTxt:setText(skillInfo.desc)
		else
			self.view:getController("statusCtrl"):setSelectedIndex(0)
			--self.view:getChildAutoType("allLevel"):setText(0)
		end
	else
		self.view:getChildAutoType("allLevel"):setText(0)
		self.skillData = {0}
		self.skillList:setData(self.skillData)
		self.view:getController("statusCtrl"):setSelectedIndex(0)
	end
end


function ViewPlayerRuneTipsView:_initUI( )
	self:_initVM()
	self:_initListener()
	
	self.list_hero:setNumItems(#self.hasRuneHero)
end




return ViewPlayerRuneTipsView