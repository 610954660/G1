--Date :2020-12-24
--Author : generated by FairyGUI
--Desc : 

local CollectWordsActivityView,Super = class("CollectWordsActivityView", Window)

function CollectWordsActivityView:ctor()
	--LuaLog("CollectWordsActivityView ctor")
	self._packName = "CollectWordsActivity"
	self._compName = "CollectWordsActivityView"
	local moduleId = ActivityModel:getModuleIdByActivityType(GameDef.ActivityType.CollectWords)
	if moduleId == 1 or moduleId == 3 then
		self._compName = "CollectWordsActivity2View"
	end
	--self._rootDepth = LayerDepth.Window
	self.isEnd 		= false
	self.timer 		= false
end

function CollectWordsActivityView:_initEvent( )
	
end

function CollectWordsActivityView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:CollectWordsActivity.CollectWordsActivityView
	self.btn_help = viewNode:getChildAutoType('btn_help')--GButton
	self.btn_shop = viewNode:getChildAutoType('btn_shop')--GButton
	self.list_reward = viewNode:getChildAutoType('list_reward')--GList
	self.titleBanner = viewNode:getChildAutoType('titleBanner')--GLoader
	self.txt_countTimer = viewNode:getChildAutoType('txt_countTimer')--GTextField
	self.txt_countTitle = viewNode:getChildAutoType('txt_countTitle')--GTextField
	--{autoFieldsEnd}:CollectWordsActivity.CollectWordsActivityView
	--Do not modify above code-------------
end

function CollectWordsActivityView:_initListener( )
	self.btn_help:removeClickListener()
	self.btn_help:addClickListener(function()   
		local info={}
		info['title']=Desc["help_StrTitle"..ModuleId.CollectWordsActivity.id]
		info['desc']=Desc["help_StrDesc"..ModuleId.CollectWordsActivity.id]
		ViewManager.open("GetPublicHelpView",info) 
	end)

	self.btn_shop:addClickListener(function()
		ModuleUtil.openModule(ModuleId.CollectWordsActivityShop.id)
	end)

end

function CollectWordsActivityView:_initUI( )
	self:_initVM()
	self:_initListener()
	self:CollectWordsActivityView_refreshPanel()

end

function CollectWordsActivityView:pack_item_change()
   self:CollectWordsActivityView_refreshPanel()
   CollectWordsActivityModel:updateMainRed()
end

function CollectWordsActivityView:CollectWordsActivityView_refreshPanel()
	self:refreshPanel()
end

function CollectWordsActivityView:refreshPanel()
	self:setRewardList()
	self:updateCountTimer()
end

function CollectWordsActivityView:setRewardList()
	local wordInfo = CollectWordsActivityModel:getActivityData()
	self.list_reward:setItemRenderer(function(idx,obj)
		local index = idx + 1
		local data 	= wordInfo[index]
		local itemCell 	= BindManager.bindItemCell(obj:getChildAutoType("itemCell"))
		local list_reward 	= obj:getChildAutoType("list_reward")
		local btn_take 		= obj:getChildAutoType("btn_take")
		local txt_haveTimes = obj:getChildAutoType("txt_haveTimes")
		local takeCtrl 		= obj:getController("takeCtrl")
		local stateCtrl 	= obj:getController("stateCtrl")
		takeCtrl:setSelectedIndex(data.state == 3 and 1 or 0)
		stateCtrl:setSelectedIndex(data.state)

		local reward 	= data.rewards[1]
		itemCell:setData(reward.code,reward.amount,reward.type)
		txt_haveTimes:setText(string.format("%s/%s",(data.time - data.curTimes),data.time))


		local items 		= data.items
		list_reward:setItemRenderer(function(idx2,obj2)
			local index2 	= idx2 + 1
			local data2 	= items[index2]
			local title 	= obj2:getChildAutoType("title")
			local itemCell2 = BindManager.bindItemCell(obj2:getChildAutoType("itemCell"))
			itemCell2:setAmountVisible(false)
			itemCell2:setData(data2.code,data2.amount,data2.type)
			title:setText(string.format("%s/%s",data2.haveNum,data2.amount))
		end)
		list_reward:setData(items)

		local img_red = btn_take:getChildAutoType("img_red")
		img_red:setVisible(((data.state == 1) and (data.sign == 1)))
		btn_take:removeClickListener(11)
		btn_take:addClickListener(function()  
			if data.state == 2 then
				RollTips.show(Desc.CollectWordsActivity_tips1)
				return
			elseif data.state == 3 then
				RollTips.show(Desc.CollectWordsActivity_tips2)
				return
			end
			ViewManager.open("CollectWordsActivityExchangeView", {reward = reward,buyTime=data.maxNum,id = data.id})
		end,11)
	end)
	self.list_reward:setData(wordInfo)
	local scrollIndex = CollectWordsActivityModel:getFirstRedPos()
	if scrollIndex <= TableUtil.GetTableLen(wordInfo) then
		self.list_reward:scrollToView(scrollIndex-1,false,true)
	end

end

-- 倒计时
function CollectWordsActivityView:updateCountTimer()
	if self.isEnd then return end
	local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.CollectWords)
	if not actData then return end
	local actId   = actData.id
	local status, addtime = ModelManager.ActivityModel:getActStatusAndLastTime(actId)
	if not addtime then return end

	if status == 2 and addtime == -1 then
		self.isEnd = false
		self.txt_countTimer:setText(Desc.activity_txt5)
	else
		local lastTime = addtime / 1000
		if lastTime == -1 then
			self.txt_countTimer:setText(Desc.activity_txt5)
		else
			if not tolua.isnull(self.txt_countTimer) then
				self.txt_countTimer:setText(TimeLib.GetTimeFormatDay(lastTime, 2))
			end
			local function onCountDown(time)
				if not tolua.isnull(self.txt_countTimer) then
					self.isEnd = false
					self.txt_countTimer:setText(TimeLib.GetTimeFormatDay(time, 2))
				end
			end
			local function onEnd(...)
				self.isEnd = true
				if not tolua.isnull(self.txt_countTimer) then
					self.txt_countTimer:setText(Desc.activity_txt18)
				end
				self:refreshPanal()
			end
			if self.timer then
				TimeLib.clearCountDown(self.timer)
			end
			self.timer = TimeLib.newCountDown(lastTime, onCountDown, onEnd, false, false, false)
		end
	end
end


function CollectWordsActivityView:_exit()
	if self.timer then
		TimeLib.clearCountDown(self.timer)
	end
end




return CollectWordsActivityView