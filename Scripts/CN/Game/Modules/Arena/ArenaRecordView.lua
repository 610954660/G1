--Name : ArenaRecordView.lua
--Author : generated by FairyGUI
--Date : 2020-6-30
--Desc : 

local ArenaRecordView,Super = class("ArenaRecordView", Window)

function ArenaRecordView:ctor()
	--LuaLog("ArenaRecordView ctor")
	self._packName = "Arena"
	self._compName = "ArenaRecordView"
	self._rootDepth = LayerDepth.PopWindow
	--self._hadChallLists={}
	
end

function ArenaRecordView:_initEvent( )
	
end

function ArenaRecordView:_initVM( )
	local vmRoot = self
	local viewNode = self.view
	---Do not modify following code--------
	--{vmFields}:Arena.ArenaRecordView
		vmRoot.recordList = viewNode:getChildAutoType("$recordList")--list
		vmRoot.closeButton = viewNode:getChildAutoType("$closeButton")--Label
	--{vmFieldsEnd}:Arena.ArenaRecordView
	--Do not modify above code-------------
	vmRoot.noneData = viewNode:getChildAutoType("$noneData")--Label
end

function ArenaRecordView:_initUI( )
	self:_initVM()
	self.closeButton:addClickListener(function ()
			ViewManager.close("ArenaRecordView")
	end)
	ArenaModel:saveOpenRecordTime()
	RedManager.updateValue("V_ArenaRecord", false);

	self:setData(ArenaModel:getBattleRecordInfo())
end

function ArenaRecordView:setData(data)
	printTable(0933,data)
	if next(data)==nil then
		self.noneData:setVisible(true)
		self.recordList:setNumItems(0)
		return 
	end
	
	local recordLists={}
	
	for i = #data, 1,-1 do
		table.insert(recordLists,data[i])
	end
	
	
	self.recordList:setVirtual()
	self.recordList:setItemRenderer(function (index,item)
         local recordData=recordLists[index+1]
		 local hero = BindManager.bindPlayerCell(item:getChildAutoType("heroCell"))
		 item:getChildAutoType("name"):setText(recordData.name)
				
		 item:getChildAutoType("fightCap"):setText(string.format(Desc.EndlessTrial_friendPower,StringUtil.transValue(recordData.fightCap)))
		 hero:setHead(recordData.head, recordData.level,recordData.playerId,nil,recordData.headBorder)
		 if recordData.score>0 then
			 item:getChildAutoType("score"):setText(ColorUtil.formatColorString("+"..recordData.score, "#24a41c"))
		 else
			 item:getChildAutoType("score"):setText(ColorUtil.formatColorString(recordData.score, "#F43636"))
		 end	
			
		 local recordBtn=item:getChildAutoType("recordBtn")
		 recordBtn:addClickListener(function (context)
				context:stopPropagation()--阻止事件冒泡
				BattleModel:requestBattleRecord(recordData.recordId)
		 end)
		 recordBtn:getChildAutoType("title"):setVisible(true)
		 recordBtn:setTitle(GMethodUtil:getLastTimeOnlineStr(recordData.sec))
			
			
		 local cosumBtn=item:getChildAutoType("cosumBtn")
		 cosumBtn:removeEventListener(FUIEventType.Click,101)
		 cosumBtn:addEventListener(FUIEventType.Click,function(context)
				  context:stopPropagation()--阻止事件冒泡
					if self:checkTicket() then
						self:beginChallenge(recordData.playerId,recordData.sec)
				   end
		 end,101)
		 cosumBtn:setVisible(recordData.score<0 and not ArenaModel._hadChallLists[recordData.sec])
		 --print(0866,ArenaModel._hadChallLists[recordData.sec],"ArenaModel._hadChallLists[recordData.sec]")
		 
		 if ArenaModel:getFreeTime()>0 then
				cosumBtn:setTitle(Desc.HigherPvP_freedom)
		 end
		 item:addClickListener(function(context)
					Dispatcher.dispatchEvent(EventType.Friend_OpenInfoView,{playerId = recordData.playerId})
					--ViewManager.open("ViewPlayerView",{playerId = heroInfo.playerId})
		 end)	
				
	end)
	self.recordList:setNumItems(#data)
end

--查看门票
function ArenaRecordView:checkTicket()
	if ArenaModel:getFreeTime()==0 and ArenaModel:getTickCount()==0 then
		if ArenaModel:getCanByCount()>0 then
			ViewManager.open("ArenaShopView")
		else
			RollTips.show(Desc.Arena_DetailsStr1)
		end
		return false
	else
		return true
	end
end

function ArenaRecordView:beginChallenge(playerId,sec)
	for k,uuid in pairs(ArenaModel._hadChallLists) do
		if k==sec then
			RollTips.show(Desc.Arena_DetailsStr4)
			return 
		end
	end
	
	local function battleHandler(eventName)
		if eventName == "begin" then
			ModelManager.ArenaModel:challenge(playerId)
		elseif eventName == "end" then
			ModelManager.ArenaModel:requestArenInfo(function()
					Dispatcher.dispatchEvent(EventType.Arena_battleEnd)
			end);
			ArenaModel:requestBattleRecordInfo(function (data)
				if tolua.isnull(self.view) then return end
					self:setData(data.data)
			end)
			local resultInfo= ModelManager.ArenaModel:getChallengeResult()
			ViewManager.open("ReWardView",{page=1,isWin=resultInfo.win,showLose=true})
			--if resultInfo.win then
				--table.insert(self._hadChallLists,sec)
			--end
			--table.insert(ArenaModel._hadChallLists,sec)
			ArenaModel._hadChallLists[sec]=1
		end
	end

	local cfg_arena= DynamicConfigData.t_arena[1]
	Dispatcher.dispatchEvent(EventType.battle_requestFunc,battleHandler,{fightID=cfg_arena.fightId,configType=GameDef.BattleArrayType.ArenaAck,playerId=playerId})
end




return ArenaRecordView