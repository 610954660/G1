--Name : ArenaPerformView.lua
--Author : generated by FairyGUI
--Date : 2020-3-4
--Desc : 
local RankView = require "Game.Modules.Rank.RankView"
local ArenaPerformView,Super = class("ArenaPerformView", RankView)


function ArenaPerformView:ctor()
	--LuaLog("ArenaView ctor")
	self._packName = "Arena"
	self._compName = "ArenaPerformView"
	self._commonPackege="ui://common"
	
	self.heroList=false
	self._openType = GameDef.RankType.Arena;
	
	self._rootDepth = LayerDepth.Window
	
	self.scoreRewardList=false
	self.grade=false
	self.fightpower=false
	self.score=false
	self.myName=false   
	self.rank=false
	self.freeTime=false
	self.preViewList=false
	self.preViewComp=false
	
	
	self.defand=false
	self.reward=false
	self.shop=false
	self.begin=false
	
	self.seasonEndDt=false
	self._isFullScreen = true
	
	self.calltimer=false
	
	--self._waitBattle = true --如果有战斗未结束跳转到这里需要等待战斗结束
	self.goWrap=false
	self.scroeRewardPre=false
	self.scoreProgressBar=false
	self.dairyRewardList=false
	
	
	
	--self._rootDepth = LayerDepth.Window
	
end

function ArenaPerformView:_initEvent( )
	
end

function ArenaPerformView:_initVM( )
	local vmRoot = self
	local viewNode = self.view
	---Do not modify following code--------
	--{vmFields}:Arena.ArenaPerformView
		--{vmFieldsEnd}:Arena.ArenaPerformView
	--Do not modify above code-------------
end

--添加红点
function ArenaPerformView:_addRed( ... )
	local imgRed = self.begin:getChildAutoType("img_red")
	RedManager.register( "V_ArenaChallenge" , imgRed , self.view , ModuleId.Arena.id )
	local imgRed2 = self.record:getChildAutoType("img_red")
	RedManager.register( "V_ArenaRecord" , imgRed2 , self.view , ModuleId.Arena.id )
	RedManager.register( "V_ArenaDefand" , self.defand:getChildAutoType("img_red") , self.view , ModuleId.Arena.id )
	--local imgRed3 = self.reward:getChildAutoType("img_red")
	--RedManager.register( "V_ArenaScoreReward" , imgRed3 , self.view , ModuleId.Arena.id )
	
end

function ArenaPerformView:_initUI( )
	self:_initVM()
	self:setBg("bg_Arena.jpg")
	Super._initUI(self);
	self.heroList=self.view:getChildAutoType("list_rank")
	self.goWrap=self.view:getChildAutoType("goWrap")
	
	local skeletonNode=SpineMnange.createSprineById(ModelManager.HandbookModel.heroOpertion,true,nil,nil,ModelManager.HandbookModel.fashionCode)--这是英雄
	if skeletonNode then
		self.goWrap:displayObject():addChild(skeletonNode)
		self.goWrap:setScale(1.5,1.5)
		skeletonNode:setAnimation(0,"stand",true)
	end

	self.fightpower=self.view:getChildAutoType("fightpower")
	self.score=self.view:getChildAutoType("score")
	self.myScore=self.view:getChildAutoType("myScore")
	self.rank=self.view:getChildAutoType("rank")
	self.myName=self.view:getChildAutoType("myName")
	self.freeTime=self.view:getChildAutoType("freeTime")
	
	self.preViewComp = self.view:getChildAutoType("preViewComp")
	self.preViewList = self.preViewComp:getChildAutoType("preViewList")

	
	
	
	self.scoreRewardList=self.view:getChildAutoType("scoreRewardList")
	self.dairyRewardList=self.view:getChildAutoType("dairyRewardList")
	self.scoreProgressBar=self.view:getChildAutoType("scoreProgressBar")
	
	
	self.begin=self.view:getChildAutoType("begin")
	self.defand=self.view:getChildAutoType("defand")
	self.record=self.view:getChildAutoType("record")
	self.reward=self.view:getChildAutoType("reward")
	self.shop=self.view:getChildAutoType("shop")
	
	self.seasonEndDt=self.view:getChildAutoType("seasontime")
	local btnHelp=self.view:getChildAutoType("btn_help")
	btnHelp:addClickListener(function()
		local info={}
		info['title']=Desc.help_StrTitle2
		info['desc']=Desc.help_StrDesc2
		ViewManager.open("GetPublicHelpView",info) 
	end)

	self.begin:addClickListener(function ()
		 Dispatcher.dispatchEvent(EventType.Arena_getChallengeList)
	end)
	self.defand:addClickListener(function ()
	     self:showDefandConfigView()
	end)
	self.reward:addClickListener(function ()
			ViewManager.open("ArenaRewardView")
	end)
	self.record:addClickListener(function ()
			ViewManager.open("ArenaRecordView")
	end)
	self.shop:addClickListener(function ()
			-- ViewManager.open("ShopView",{shopType = 5})
			ModuleUtil.openModule( ModuleId.Shop.id , true,{shopType = 5} )
	end)
	
	self.view:addClickListener(function ()
		self.preViewComp:setVisible(false)
	end)
	
	ModelManager.ArenaModel:requestArenInfo(function()
			if tolua.isnull(self.view) then
				return 
			end
			self:initData()
	end);
end

function ArenaPerformView:initData()
	local ArenaInfo=ModelManager.ArenaModel:getRankInfo()
	local myInfo=ArenaInfo.myInfo
	if not myInfo then 
		local PlayerModel = ModelManager.PlayerModel
		local fightCap = ModelManager.CardLibModel:getFightVal() or 0
		myInfo = {head = PlayerModel.head, fightCap = fightCap, level = PlayerModel.level, score = 0, rank = 0}
	end
	local seasonEndDt= ArenaInfo.seasonEndDt
	seasonEndDt= (seasonEndDt-ServerTimeModel:getServerTimeMS())/1000
	print(086,seasonEndDt,"seasonEndDt")
	if seasonEndDt<0 then
		self.seasonEndDt:setText(Desc.activity_txt18)
	else
		--local  day=math.floor(seasonEndDt/86400)
		--local time = ServerTimeModel:getTodayLastSeconds()
		--self.seasonEndDt:setText(day.."天"..TimeLib.formatTime(time))
		--if self.calltimer==false then
			--local function onCountDown( time )
				--self.seasonEndDt:setText(day.."天"..time)
			--end
			--local function onEnd( ... )

			--end
			--self.calltimer=TimeLib.newCountDown(time, onCountDown, onEnd, false, false)
		--end
		local lastTime = seasonEndDt
		if not tolua.isnull(self.seasonEndDt) then
			self.seasonEndDt:setText(TimeLib.GetTimeFormatDay(lastTime, 2))
		end
		local function onCountDown(time)
			if not tolua.isnull(self.seasonEndDt) then
				--self.isEnd = false
				self.seasonEndDt:setText(TimeLib.GetTimeFormatDay(time, 2))
			end
		end
		local function onEnd(...)
			if not tolua.isnull(self.seasonEndDt) then
				--  self.activityEnable = true
				self.seasonEndDt:setText(Desc.activity_txt18)
			end
		end
		if self.calltimer then
			TimeLib.clearCountDown(self.calltimer)
		end
		self.calltimer = TimeLib.newCountDown(lastTime, onCountDown, onEnd, false, false, false)

		
	end
	
	


	self.fightpower:setText(StringUtil.transValue(myInfo.fightCap))
	self.score:setText(myInfo.score)
	self.myScore:setText(myInfo.score)
	self.rank:setText(string.format(Desc.Arena_DetailsStr5,myInfo.rank))
	self.myName:setText(PlayerModel.username)
	self.freeTime:setText(string.format(Desc.Arena_DetailsStr6,ColorUtil.formatColorString(ArenaModel:getFreeTime(),"#6AFF60")))

	self:showScoreReward()
	
end

function ArenaPerformView: updateItemBaseInfo(obj, rankIndex, info, isMine)
	Super:updateItemBaseInfo(obj, rankIndex, info,isMine);
	
	print(086,rankIndex)
	
	
	local txt_fightCap = obj:getChildAutoType("txt_fightCap")
	local txt_score= obj:getChildAutoType("txt_score")
	local frame= obj:getChildAutoType("frame")
	--[[if rankIndex<4 then
		frame:setURL(UIPackageManager.getUIURL(self._packName,"rank"..rankIndex))
	else
		frame:setURL(UIPackageManager.getUIURL(self._packName,"rank"..4))
	end--]]
	
	
	local ArenaInfo=ModelManager.ArenaModel:getRankInfo()
	local myInfo=ArenaInfo.myInfo
	if myInfo.playerId==info.id then
		
		txt_fightCap:setText(string.format(Desc.EndlessTrial_friendPower,StringUtil.transValue(myInfo.fightCap)))
		txt_score:setText(myInfo.score)
	else
		txt_fightCap:setText(string.format(Desc.EndlessTrial_friendPower,StringUtil.transValue(info.combat)))
		txt_score:setText(StringUtil.transValue(info.value))
	end


end  
  --
function ArenaPerformView:setRankList(rankInfo)

end

function ArenaPerformView:Arena_battleEnd()
	print(4,"结束战斗刷新排行榜信息")
	self:updateRankData()
	ArenaModel:getScoreRewardList(function ()
		 self:initData();
	end)
end

function ArenaPerformView:updateArenInfo()
	local ArenaInfo=ModelManager.ArenaModel:getRankInfo()
	local myInfo=ArenaInfo.myInfo
	self.fightpower:setText(myInfo.fightCap)
	self:updateRankData()
end


function ArenaPerformView:showDefandConfigView()
	ArenaModel.curOpen=true
	ArenaModel:updateRed()
	local function battleHandler(eventName)
		if eventName == "begin" then
			ModelManager.ArenaModel:requestArenInfo(function()
				 if tolua.isnull(self.view) then
						return
				 end
		         self:updateArenInfo()
			end);
			FileCacheManager.setBoolForKey(PlayerModel.userid.."OpenDefandView",true,nil,true)
		end
	end
	local cfg_arena= DynamicConfigData.t_arena[1]
	Dispatcher.dispatchEvent(EventType.battle_requestFunc,battleHandler,{fightID=cfg_arena.fightId,configType=GameDef.BattleArrayType.ArenaDef})
end

function ArenaPerformView:showScoreReward()
    
	local perValue=0.05
	local perValue2=0.13
	
	local ArenaInfo=ModelManager.ArenaModel:getRankInfo()
	local myInfo=ArenaInfo.myInfo
	local haveReward,scroeRewardPre=ArenaModel:getAllScoreReward(true)
	self.scroeRewardPre=scroeRewardPre
	local lastReward=self.scroeRewardPre[#scroeRewardPre]
	local overScore=myInfo.score-1000
	local overLevel=0
	local value=0
	if overScore<0 then
		overScore=0
	end
	for k, rankReward in pairs(self.scroeRewardPre) do
		if myInfo.score>rankReward.score then
			overLevel=k
			overScore=myInfo.score-rankReward.score
		end
	end
	if overLevel==0 then
		value=overScore/(self.scroeRewardPre[1].score-1000)*perValue
	end
	if 0<overLevel and overLevel<#scroeRewardPre then
		value=(overLevel-1)*perValue2+overScore/(self.scroeRewardPre[overLevel+1].score-self.scroeRewardPre[overLevel].score)*perValue2+perValue
	end
	if overLevel==#scroeRewardPre then
		value=(overLevel-1)*perValue2+(overScore/200)*perValue+perValue
	end
	
	print(086,value,"value")
	self.scoreProgressBar:setValue(value*100)
	
	local reciveReaward=ArenaModel:getReciveReaward()
	self.scoreRewardList:setItemRenderer(function(index,rewardItem)
			local rewardInfo={}

			local score=rewardItem:getChildAutoType("score")
			local itemObj=rewardItem:getChildAutoType("itemCell")
			local itemcell = BindManager.bindItemCell(itemObj)
			local num=rewardItem:getChildAutoType("num")
			local rankReward=self.scroeRewardPre[index + 1]
			rewardInfo=rankReward.reward
			local itemData = ItemsUtil.createItemData({data = rewardInfo[1]})
			itemcell:setAmountVisible(false)
			itemcell:setNoFrame(true)
			itemcell:setNoQualityNoeffect(true)
			itemcell:setItemData(itemData)
			
			score:setText(rankReward.score)
			itemcell:setClickable(false)
			num:setText("x"..itemData:getItemAmount())
			local rewardCtr=rewardItem:getController("receiveType")
			if rankReward.receiveRank==0 then
				rewardCtr:setSelectedPage("haveReceived")
				itemcell:setReceiveFrame(false)
			elseif rankReward.receiveRank==1 then
				rewardCtr:setSelectedPage("none")
				itemcell:setReceiveFrame(false)
			elseif rankReward.receiveRank==2 then
				rewardCtr:setSelectedPage("canReceived")
				itemcell:setReceiveFrame(true)
			end
			
			itemObj:addEventListener(FUIEventType.Click,function(context)
					context:stopPropagation()--阻止事件冒泡
					if rankReward.receiveRank==2 then
						ArenaModel:getScoreReward(rankReward.id,function ()
								rewardCtr:setSelectedPage("haveReceived")
								itemcell:setReceiveFrame(false)
								rankReward.receiveRank=0
								ArenaModel:setRewardStatus(rankReward.id, 0)
						end)
					else
						self.preViewComp:setVisible(true)
						self.preViewList:setItemRenderer(function (index,obj)
							 local itemcellA = BindManager.bindItemCell(obj)
							 local itemDataA = ItemsUtil.createItemData({data = rewardInfo[index+1]})
							 itemcellA:setItemData(itemDataA)
						end)
						local clickPos=self.view:globalToLocal(rewardItem:getParent():localToGlobal(rewardItem:getPosition()))
						clickPos.x=clickPos.x+50*0.6
						clickPos.y=clickPos.y+80
						--print(086,clickPos.x)
						local rewardLength=#rewardInfo*100
						if clickPos.x>1280-(rewardLength+20)/2 then
							clickPos.x=1280-(rewardLength+20)/2
						end
						self.preViewComp:setPosition(clickPos.x,clickPos.y)
						self.preViewList:setData(rewardInfo)
					end
			
			end,1)
			
			
			
		end
	)
	self.scoreRewardList:setData(self.scroeRewardPre)
	local arenaRankReward = DynamicConfigData.t_arenaRankReward
	local myDailyRewardPre=false
	for k, rankReward in pairs(arenaRankReward) do
		if myInfo.rank<=rankReward.maxRank and myInfo.rank>=rankReward.minRank then
			myDailyRewardPre=rankReward.dailyRewardPre
		end
		--print(086,myInfo.rank,rankReward.maxRank,rankReward.minRank)
	end

	self.dairyRewardList:setItemRenderer(function (index,obj)
			local itemcell = BindManager.bindItemCell(obj)
			local itemData = ItemsUtil.createItemData({data = myDailyRewardPre[index + 1]})
			itemcell:setItemData(itemData)
			--itemcell:setReceiveFrame(true)
	end)
	self.dairyRewardList:setData(myDailyRewardPre)
end




--页面退出时执行
function ArenaPerformView:_exit( ... )
	Scheduler.unschedule(self.calltimer)
	self.calltimer=false
end

--TimeLib.clearCountDown(self.calltimer)

return ArenaPerformView