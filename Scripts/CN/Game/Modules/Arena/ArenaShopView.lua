--Name : ArenaShopView.lua
--Author : generated by FairyGUI
--Date : 2020-3-27
--Desc : 

local ArenaShopView,Super = class("ArenaShopView", Window)
local ItemCell = require "Game.UI.Global.ItemCell"
function ArenaShopView:ctor() 
	
	--LuaLog("ArenaShopView ctor")
	self._packName = "Arena"
	self._compName = "ArenaShopView"
	self._rootDepth = LayerDepth.PopWindow
	
	self.cancel=false
	self.buy=false
	self.btAdd=false
	self.btSub=false
	
	self.itemCell=false
	
	self.tickeLeftTime=false
	self.countEditor=false
	
	self.ArenaInfo=false
	
	self.buyNum=1
	self.canBuyNum=0
	--self.costBtn=false
	--self._rootDepth = LayerDepth.Window
	
end

function ArenaShopView:_initEvent()
	
end

function ArenaShopView:_initVM( )
	local vmRoot = self
	local viewNode = self.view
	---Do not modify following code--------
	--{vmFields}:Arena.ArenaShopView
		vmRoot.closeButton = viewNode:getChildAutoType("$closeButton")--Label
	--{vmFieldsEnd}:Arena.ArenaShopView
	--Do not modify above code-------------
end

function ArenaShopView:_initUI( )
	self:_initVM()
	self.itemCell=self.view:getChildAutoType("itemCell")
	self.cancel=self.view:getChildAutoType("cancel")
	self.buy=self.view:getChildAutoType("buy")
	self.btAdd=self.view:getChildAutoType("btAdd")
	self.btSub=self.view:getChildAutoType("btSub")
	self.tickeLeftTime=self.view:getChildAutoType("tickeLeftTime")
	self.countEditor=self.view:getChildAutoType("countEditor")
	self.buy = BindManager.bindCostButton(self.buy)

	
    self:initData()
end

--初始化数据
function  ArenaShopView:initData()

	--self.itemCell:getChildAutoType("iconLoader"):setUrlByPackege(self._packName,"ticket")
	--self.itemCell:getChildAutoType("num"):setText("1")
	--DynamicConfigData.t_item
	local item=DynamicConfigData.t_item[DynamicConfigData.t_arena[1].ticketCode]
	local itemData = ItemsUtil.createItemData({data = {type=item.type,code=item.code,amount=1,}})
	local itemcell = BindManager.bindItemCell(self.itemCell)
	itemcell:setItemData(itemData)
	
	
	self.ArenaInfo=ModelManager.ArenaModel:getRankInfo()
	local ticketLimit=self.ArenaInfo.ticketLimit
	self.tickeLeftTime:setText("每日限购"..ticketLimit.."/3")
	self.canBuyNum=ArenaModel:getCanByCount()
	if self.canBuyNum==0 then
		self.buyNum=0
	end
	self.countEditor:setText(self.buyNum)
	self:checkButtonState()
	self.buy:addClickListener(function ()
			if self.buyNum>self.canBuyNum or self.canBuyNum==0 then
				RollTips.show(Desc.Arena_DetailsStr2)
				
			else
				ModelManager.ArenaModel:buyTicket(self.buyNum,function()
					self:buySuccess(self.buyNum)
				end)
			end
	end)
	self.cancel:addClickListener(function ()
			ViewManager.close("ArenaShopView")
	end)
	self.closeButton:addClickListener(function ()
			ViewManager.close("ArenaShopView")
	end)
end


--购买成功
function  ArenaShopView:buySuccess()
	RollTips.show(Desc.Arena_DetailsStr3)
	self.ArenaInfo.ticketLimit=self.ArenaInfo.ticketLimit+self.buyNum
	local ticketLimit=self.ArenaInfo.ticketLimit
	self.tickeLeftTime:setText("每日限购"..ticketLimit.."/3")
	Dispatcher.dispatchEvent(EventType.Arena_updateTickInfo)
	ViewManager.close("ArenaShopView")	
	--if ticketLimit<3 then
		--self.buyNum=1
	--else
	    --self.buyNum=0
	--end
	--self.countEditor:setText(self.buyNum)
	--self:checkButtonState()
end

function  ArenaShopView:checkButtonState()
	local ticketLimit=self.ArenaInfo.ticketLimit
	if self.canBuyNum==0 then
		--self.btAdd:setGrayed(true)
		--self.btAdd:setTouchable(false)
		--self.btSub:setGrayed(true)
		--self.btSub:setTouchable(false)
	else
		
		--self.btSub:setGrayed(not (self.buyNum>1))
		--self.btSub:setTouchable(self.buyNum>1)
		--self.btAdd:setGrayed(not (self.buyNum<self.canBuyNum))
		--self.btAdd:setTouchable(self.buyNum<self.canBuyNum)
	end
	
	local cfg_arena= DynamicConfigData.t_arena[1]
	--local goldCount=ModelManager.PlayerModel:getMoneyByType(GameDef.MoneyType.Diamond)
	local costDiamond=cfg_arena.costDiamond*self.buyNum
	--if costDiamond+cfg_arena.costDiamond>goldCount then
		--self.btAdd:setGrayed(true)
		--self.btAdd:setTouchable(false)
	--end
	--self.diamonNum:setText(costDiamond.."/"..goldCount)
	self.buy:setData({type = GameDef.ItemType.Money, code = GameDef.MoneyType.Diamond, amount = costDiamond})
	--self.diamonNum:setText(costDiamond)

end



return ArenaShopView