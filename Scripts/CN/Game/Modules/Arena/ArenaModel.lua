--Name : ArenaModel.lua
--Author : generated by FairyGUI
--Date : 2020-3-4
--Desc : 


local ArenaModel = class("ArenaModel", BaseModel)

function ArenaModel:ctor()
   self.arenaInfo=false
   self.challengeInfo=false
   self.challengeResult=false
   self.battleRecordInfo=false
   self._hadChallLists={}
   self.challeHadOpen=false
   self._reciveReaward=false
   self.curOpen=false
end

function ArenaModel:init()

end


--门票剩余可购买次数
function ArenaModel:getCanByCount()
    return DynamicConfigData.t_arena[1].ticketLimit-self.arenaInfo.ticketLimit
end

--查看剩余的可挑战次数
function ArenaModel:getFreeTime()
	if self.arenaInfo==false then
		return 0
	end
	return DynamicConfigData.t_arena[1].freeTimes-self.arenaInfo.usedFreeTimes
end




--查看门票数量
function ArenaModel:getTickCount()
	local tickinfo=ModelManager.PackModel:getNormalBag():getItemsByCode(DynamicConfigData.t_arena[1].ticketCode)
	if next(tickinfo)==nil then
		return 0
	else
	 return tickinfo[1].__data.amount
	end
end



--Arena_GetScoreReward

function ArenaModel:getScoreReward(index,fun)
	local function success(data)
		printTable(0933,"领取奖励请求",data)
		if fun then
			fun()
		end
	end
	local info = {
		id =index 
	}
	printTable(0933,"发送的参数",info)
	RPCReq.Arena_GetScoreReward(info,success)
end


--获取竞技场积分奖励
function ArenaModel:getScoreRewardList(fun)
	local function success(data)
		self._reciveReaward=data.reward
		if self.arenaInfo and self._reciveReaward then
			self:getAllScoreReward()
		end
		if fun then
			fun(data)
		end
	end
	local info = {
	}
	printTable(4,"发送的参数",info)
	RPCReq.Arena_GetScoreRewardList(info,success)
end

function ArenaModel:getReciveReaward()
    return self._reciveReaward
end

--function ArenaModel:addReciveReaward(id)
	--table.insert(self._reciveReaward,id)
--end



function ArenaModel:requestArenInfo(fun)
	local function success(data)
		printTable(086,"获取竞技场信息",data)
		self:updateRankInfo(data)
		if fun then
		   fun()
		end
	end
	local info = {
		isOpen = ModuleUtil.moduleOpen(ModuleId.Arena.id,false)
	}
	printTable(4,"发送的参数",info)
	RPCReq.Arena_GetInfo(info,success)
	self:requestBattleRecordInfo()
end

function ArenaModel:requestChallengeInfo(fun)
	local function success(data)
		printTable(4,"获取玩家挑战信息",data)
		self:updateChallengeInfo(data)
		if fun then
			fun()
		end
		self:updateRed()
	end
	local info = {
		--msg = testData
	}
	printTable(4,"发送的参数",info)
	RPCReq.Arena_GetChallengeList(info,success)
end


function ArenaModel:challenge(playerId,finshied)
	local function success(data)
		printTable(5656,"下发挑战结果",data)
		self.challengeResult=data
		if finshied then
			finshied()
		end
	end
	local info = {
		playerId = playerId
	}
	printTable(4,"发送的参数",info)
	RPCReq.Arena_Challenge(info,success)
	
end

function ArenaModel:buyTicket(num,finshied)
	local function success(data)
		printTable(4,"门票购买结果",data)
		finshied()
	end
	local info = {
		num = tonumber(num)
	}
	printTable(4,"发送的参数",info)
	RPCReq.Arena_BuyTicket(info,success)
end


function ArenaModel:getTicketLimitInfo(finshied)
	local function success(data)--当天已使用的购买次数
		--printTable(4,"当天已使用的购买次数",data.ticketLimit)
		self.arenaInfo.ticketLimit=data.ticketLimit
		finshied(data)
	end
	local info = {
		
	}
	RPCReq.Arena_GetTicketInfo(info,success)
end


--获取竞技场战斗记录信息
function ArenaModel:requestBattleRecordInfo(finished)
	local function success(data)--当天已使用的购买次数
		self.battleRecordInfo=data.data
		if finished then
			finished(data)
		end
		self:updateRed()
	end
	local info = {

	}
	RPCReq.Arena_GetBattleRecordInfo(info,success)
end

function ArenaModel:getBattleRecordInfo()
   return self.battleRecordInfo
end


function ArenaModel:updateChallengeInfo(data)
	self.challengeInfo=data
	local function cmp(a,b)
		return tonumber(a.fightCap)<tonumber(b.fightCap)
	end
	if self.challengeInfo and GuideModel.IsGuiding() then
		table.sort(self.challengeInfo.challengeList,cmp)
	end
end

function ArenaModel:updateRankInfo(data)
	self.arenaInfo=data
	self:getScoreRewardList(function ()
	end)
end

function ArenaModel:getRankInfo()
	return  self.arenaInfo
end


function ArenaModel:getChallengeResult()
	return  self.challengeResult
end


function ArenaModel:getUsedFreeTimes()
	return  self.arenaInfo.usedFreeTimes
end

function ArenaModel:getChallengeInfo()
	return  self.challengeInfo
end

--保存最后一次打开战斗记录的时间
function ArenaModel:saveOpenRecordTime()
	local nowTime=tostring(ServerTimeModel:getServerTime())
	FileCacheManager.setStringForKey(PlayerModel.username..PlayerModel.userid.."OpenRecordTime",nowTime,nil,true)
	print(086,nowTime,"存入时间")
end

--或者最后一次打开战斗记录的时间
function ArenaModel:getOpenRecordTime()
	
	local value = tonumber(FileCacheManager.getStringForKey(PlayerModel.username..PlayerModel.userid.."OpenRecordTime","0",nil,true))
	print(086,value,"取出的值时间")
	return value
end



--检查竞技场红点
function ArenaModel:updateRed()
	RedManager.updateValue("V_ArenaChallenge", self:getFreeTime()>0 and not self.challeHadOpen);
	--self.battleRecordInfo[#]
	local needAarryCount=6
	if ModuleUtil.moduleOpen(ModuleId.Alternate_Front.id,false) then
		needAarryCount=needAarryCount+1
	end
	if ModuleUtil.moduleOpen(ModuleId.Alternate_Back.id,false) then
		needAarryCount=needAarryCount+1
	end
	local arrryData=BattleModel:getArrayInfo(GameDef.BattleArrayType.ArenaDef,true)
	RedManager.updateValue("V_ArenaDefand",(table.nums(arrryData.array)<needAarryCount and not self.curOpen) );
	
	--printTable(5656,arrryData,"arrryData")
	
	printTable(086,self.battleRecordInfo)
	local newRecodTime=0
	printTable(08666,self.battleRecordInfo)
	if self.battleRecordInfo==false or next(self.battleRecordInfo)==nil then
		RedManager.updateValue("V_ArenaRecord", false);
	else
		--newRecodTime=self.battleRecordInfo[#self.battleRecordInfo].sec
		for i = #self.battleRecordInfo, 1,-1 do
			if self.battleRecordInfo[i].beChallenge==1 then
				newRecodTime=self.battleRecordInfo[i].sec
				printTable(086,self.battleRecordInfo[i],"self.battleRecordInfo[i]")
				break;
			end		
		end
		--newRecodTime=newRec
		RedManager.updateValue("V_ArenaRecord", newRecodTime>self:getOpenRecordTime());
	end
end



function ArenaModel:getAllScoreReward(notSort)
	local myInfo=self.arenaInfo.myInfo
	local haveReward=false
	local scroeRewardPre={}
	--id = 1,   score = 1080,   reward = {{type=3,code=10000051,amount=5,},{type=2,code=1,amount=15000,},
	

	local rewardList={}
	for k, scoreData in pairs(DynamicConfigData.t_ArenaScoreReward) do
        local  cloneScoreData={}
		for key, v in pairs(scoreData) do
			cloneScoreData[key]=v
		end
		table.insert(rewardList,cloneScoreData)

	end
	--printTable(5656,rewardList,"rewardList")
	for k, v in pairs(rewardList) do
		  scroeRewardPre[#scroeRewardPre+1]=v
		  if self._reciveReaward[v.id] then
			 v.receiveRank=0--已领取
		  else
			if myInfo.score>= v.score  then
				v.receiveRank=2--可领取
				haveReward=true
			else
				v.receiveRank=1--未达成
			end
			
		  end
	end
	if not notSort then
		table.sort(scroeRewardPre,function (a,b)
				if a.receiveRank==b.receiveRank then
					return  a.score<b.score
				else
					return a.receiveRank>b.receiveRank
				end
			end)
	end
	RedManager.updateValue("V_ArenaScoreReward", haveReward);	
	return haveReward,scroeRewardPre
end	


function ArenaModel:setRewardStatus(id, status)
	self._reciveReaward[id] = status
end



return ArenaModel
