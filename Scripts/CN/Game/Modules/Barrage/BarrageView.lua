--Date :2020-12-02
--Author : generated by FairyGUI
--Desc : 

local BarrageView,Super = class("BarrageView", View)

function BarrageView:ctor()
	--LuaLog("BarrageView ctor")
	self._packName = "Barrage"
	self._compName = "BarrageView"
	self._rootDepth = LayerDepth.PopWindow

	self.textHeight = 55    --一行弹幕高度
	self.freeLine = {}   	--空闲的行
	self.textTime = 18   	--滚动速度
	self.textSpeed = display.width/self.textTime --滚动速度
	self.lineSpeed = {}  	--每一行最后一条弹幕的速度
	self.lineTextNum = {}  --每一行有多少条弹幕

	self.runText = {}   	--所有的弹幕
	self.curText = 1    	--当前轮播的弹幕下标

	self.timeId = false  	--弹幕刷新定时器
	self.idCheckTimeId = false --当前分类弹幕变化检测

	self.getCardCheckTimeId = false --抽卡动画检查

	self.gameType = 0   	--当前玩法
	self.gameId = 0			--当前玩法 小分类

	self.allTextObjs = {}  	--所有弹幕对象

	self.config = false    	--玩法中小分类的配置
	self.curConfig = false  --玩法中小分类的配置
	self.isOpen = false    	--弹幕是否开启

	self.viewoBj = false
	self.curCount = 0

	self.oldFps = cc.Director:getInstance():getAnimationInterval()
end

function BarrageView:_initEvent( )
	
	
	self.openBtn:addClickListener(function( ... )
		self.isOpen = self.openBtn:isSelected()
		FileCacheManager.setBoolForKey(string.format("BarrageView_open_%d_%d",self.gameType,self.gameId), self.isOpen, nil, false)
		if self.isOpen then
			print(33,"self.isOpen = true")
			if #self.runText > 0 then
				self:runBarrageUpdate( )
			else
				self:getBarrageMsg( )
			end
		else
			print(33,"self.isOpen = false")
			self:cleanAllBarrageText()
		end

	end)
	self.openBtn:setSelected(self.isOpen)
	
	self.btn_danmu:addClickListener(function( ... )
		
		self.status:setSelectedIndex(1)
	end)
	self.kongbai_bt:addClickListener(function( ... )
		
		self.status:setSelectedIndex(0)
	end)
	self.btn_send:addClickListener(function( ... )
		if self.curCount >= self.curConfig.limit then
			RollTips.show(Desc.barrage_notime)
			self.msgInput:setText("")
			self.status:setSelectedIndex(0)
			return
		end
		local text = self.msgInput:getText()
		text = StringUtil.filterString(text)
		text = GMethodUtil:checkThreeStar(text)
		text = string.gsub(text, "%[", "")
		text = string.gsub(text, "%]", "")
		text = GMethodUtil:clearHTML(text)
		if text ~= self.msgInput:getText() then
			RollTips.show(Desc.barrage_notallow)
			return
		end
		--print(33, "发送出去的消息", text)
		BarrageModel:sendBarrageMsg(self.gameType,self.gameId,text)
		self.msgInput:setText("")
		self.status:setSelectedIndex(0)
		self.curCount = self.curCount + 1
	end)
end

function BarrageView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:Barrage.BarrageView
	self.btn_danmu = viewNode:getChildAutoType('btn_danmu')--GButton
	self.btn_send = viewNode:getChildAutoType('btn_send')--GButton
	self.chatBg = viewNode:getChildAutoType('chatBg')--GGraph
	self.costTxt = viewNode:getChildAutoType('costTxt')--GRichTextField
	self.inputText = viewNode:getChildAutoType('inputText')--GButton
	self.kongbai_bt = viewNode:getChildAutoType('kongbai_bt')--GLoader
	self.moneyicon = viewNode:getChildAutoType('moneyicon')--GLoader
	self.openBtn = viewNode:getChildAutoType('openBtn')--GButton
	self.showCtrl = viewNode:getController('showCtrl')--Controller
	self.status = viewNode:getController('status')--Controller
	self.test = viewNode:getChildAutoType('test')--GGraph
	self.textLayer = viewNode:getChildAutoType('textLayer')--BarrageTxt
		self.textLayer.textLayer = viewNode:getChildAutoType('textLayer/textLayer')--GLoader
	--{autoFieldsEnd}:Barrage.BarrageView
	--Do not modify above code-------------

	
end

function BarrageView:_initUI( )
	self:_initVM()

	if self._args.gamePlayType and self._args.id then
		self.gameType = self._args.gamePlayType
		self.gameId = self._args.id
		self.curConfig = self._args
	elseif self._args[1] and self._args[1].gamePlayType then
		self.config = {}
		for k,v in pairs(self._args) do
			self.gameType = v.gamePlayType
			self.config[v.id] = v
		end
		if #self.config == 0 then return end
	else
		return 
	end
	self.view:setPosition(0,0)
	self.msgInput = BindManager.bindTextInput(self.inputText)
	self.msgInput:setMaxLength(20)
	self.chatBg:setWidth(display.width)
	local posZero = self.view:globalToLocal(Vector2(0, 0))
	self.chatBg:setPosition(posZero.x,self.chatBg:getPosition().y)
	self.openBtn:setDraggable(true)
	self.btn_danmu:setDraggable(true)

	local offY = self.openBtn:getPosition().y - self.btn_danmu:getPosition().y
	local parentPos = self._parent:getPosition()
	local oldPos = false
	self.openBtn:addEventListener(FUIEventType.TouchMove,function() 
		local pos = self.openBtn:getPosition()
		if pos.x + self.openBtn:getWidth()+parentPos.x > display.width or pos.x + parentPos.x < 0  or pos.y + 116 > display.height or pos.y  < 0  then
			self.openBtn:setPosition(oldPos.x,oldPos.y)
		else
			self.btn_danmu:setPosition(pos.x,pos.y-offY)
			oldPos = self.openBtn:getPosition()
		end

		
	end,5330)

	self.btn_danmu:addEventListener(FUIEventType.TouchMove,function() 
		local pos = self.btn_danmu:getPosition()
		if pos.x + self.btn_danmu:getWidth()+parentPos.x > display.width or pos.x + parentPos.x < 0  or pos.y + self.btn_danmu:getHeight() > display.height or pos.y -72 < 0  then
			self.btn_danmu:setPosition(oldPos.x,oldPos.y)
		else
			self.openBtn:setPosition(pos.x,pos.y+offY)
			oldPos = self.btn_danmu:getPosition()
		end
		
	end,5330)

	if self.config then
		self:runCheckChangeId()
	end

	if self._args.gamePlayType == 62 then
		self:getCardCheckVisible( self._args.view )
	end

	if not self.curConfig then
		self.view:setVisible(false)
		self.openBtn:setVisible(false)
		self.btn_danmu:setVisible(false)
		return 
	end
    if next(self.curConfig.cost)~=nil then
		local url = ItemConfiger.getItemIconByCode(self.curConfig.cost[1].code, self.curConfig.cost[1].codeType, false)
		self.moneyicon:setIcon(url)
		self.costTxt:setText(string.format("[color=#119717]%d[/color])",self.curConfig.cost[1].amount))
	else
		self.btn_danmu:setVisible(false)
	end
	self:getBarrageMsg( )
	print(33,"BarrageView:_initUI( ) finish")
end

--开启弹幕刷新定时器
function BarrageView:getBarrageMsg( )
	self.isOpen = FileCacheManager.getBoolForKey(string.format("BarrageView_open_%d_%d",self.gameType,self.gameId) , true, nil, false)
	if self.isOpen then
		BarrageModel:getBarrageMsg(self.gameType,self.gameId,function(data)
			if tolua.isnull(self.view) then return end
			self.runText = {}
			local msg = data.msg or {}
			self.curCount = data.limit or 0
			for k,v in pairs(msg) do
				if self.gameType==295 then
					v.text = string.format("[color=#21c3ff]%s[/color]%s",v.name,v.msg)	
				else
					v.text = string.format("[color=#21c3ff]%s：[/color]%s",v.name,v.msg)	
				end
				self.runText[#self.runText+1] = v
			end
			local config = DynamicConfigData.t_BarrageMsg[self.gameType]
			local DescConfig = DynamicConfigData.t_BarrageMsg2
			if config and config[self.gameId] then
				for k,v in pairs(config[self.gameId]) do
					v.text = DescConfig[v.desc].desc
					self.runText[#self.runText+1] = v
				end
			end
			if #self.runText > 0 then
				self:runBarrageUpdate( )
			end
		end)
		
	end
end

--开启弹幕刷新定时器
function BarrageView:runBarrageUpdate( )
	if self.timeId then
		Scheduler.unschedule(self.timeId)
	end
	for i =1,10 do
		self.freeLine[i] = i
		self.lineSpeed[i] = 1
		self.lineTextNum[i] = 0
	end

	local function updateCall()
		if self:doBarrageCheck(self.runText[self.curText] ) then
			self.curText = self.curText + 1
			if self.curText > #self.runText then
				self.curText = 1
			end
		end
	end
	
	updateCall()
	cc.Director:getInstance():setAnimationInterval(1/60)
	self.timeId = Scheduler.schedule(updateCall,self.curConfig.time,0)

end

--抽卡界面动画检查
function BarrageView:getCardCheckVisible( view )
	local sview = ViewManager.getView(view)
	self.getCardCheckTimeId = Scheduler.schedule(function()
			if sview.view:getController("showCtrl"):getSelectedIndex() == 1 then
				self.view:setVisible(false)
			elseif sview.view:getController("showCtrl"):getSelectedIndex() == 2 then
				local flag = true 
				for i=1,#sview.hadDoneSpineArr do
					if sview.hadDoneSpineArr[i] then 
						flag = false
						break
					end
				end
				self.view:setVisible(flag)
			else
				self.view:setVisible(true)
			end
		end,0.2,0)
end

--开启玩法小分类刷新定时器
function BarrageView:runCheckChangeId( )

	local config = false
	for k,v in pairs(self.config) do
		config = v
		break
	end
	--这个 GetSuccess1View 特殊处理
	if config.gamePlayType == 93  or config.gamePlayType == 94 then
		self.viewoBj = ViewManager.getView("GetCardsView").view
		self:getCardCheckVisible( config.view )
	else
		self.viewoBj = ViewManager.getView(config.view).view
	end

	local controller =  self.viewoBj:getController(config.controller)
	if not controller then return end
	for k,v in pairs(self.config) do
		if controller:getSelectedIndex() == v.id then
			self.gameType = v.gamePlayType
			self.gameId = v.id	
			self.curConfig = v	
			break
		end
	end
	if not self.curConfig then 
		return 
	end
	self.idCheckTimeId = Scheduler.schedule(function()
		if tolua.isnull(self.viewoBj) then return end
		if controller:getSelectedIndex() ~= self.gameId then
			for k,v in pairs(self.config) do
				if controller:getSelectedIndex() == v.id then
					self.gameType = v.gamePlayType
					self.gameId = v.id	
					self.curConfig = v
					self:cleanAllBarrageText()
					self:getBarrageMsg( )
					break
				end
			end
		end
	end,0.5,0)

end


--检查是否有位置空余
function BarrageView:doBarrageCheck(data )
	local allPos = #self.freeLine
	if allPos <=0 then return end

	local speed,speedNum = self:getTextSpeed( data.text)
	data.speed  = speed*self.curConfig.speed
	data.speedNum = speedNum
	--print(33,"speedNum = ",speedNum)
	local line = math.random(1,allPos)
	if self.lineSpeed[self.freeLine[line]] > speedNum then
		line = 0
		for i=allPos,1,-1 do
			if self.lineSpeed[self.freeLine[i]] <= speedNum then
				line = i
				break
			end
		end
	end
	if line > 0 then
		data.line = line
		self:createBarrageText(data)
		return true
	end
	return false
end

--创建弹幕
function BarrageView:createBarrageText(data )
	
	--data.text = "尊敬的[color=#6aff60]谁？[/color]来啦啦啦啦啦啦啦啦"
	--data.speed = 10
	data.size = 26

	local linePos = self.freeLine[data.line]
	self.lineSpeed[linePos] = data.speedNum
	table.remove(self.freeLine,data.line)
	
	
	local text = UIPackageManager.createObject(self._packName, "BarrageLabel")
	text:setPosition(display.width-self.view:getPosition().x,linePos*self.textHeight)
	text:setTitle(data.text)

	local textWidth = text:getChildAutoType("title"):getWidth()
	if data.playerId == PlayerModel.userid and data.serverId == LoginModel:getUnitServerId() then
		text:getChildAutoType("me"):setVisible(true)
	end
	
	self.lineTextNum[linePos] = self.lineTextNum[linePos] + 1
	local action1 = cc.MoveBy:create((50+textWidth)/data.speed,cc.p(-50-textWidth,0))
	local action2 = cc.CallFunc:create(function()
		table.insert(self.freeLine,linePos)
	end)
	local action3 = cc.MoveBy:create(display.width/(2*data.speed),cc.p(-display.width/2,0))
	local action4 = cc.CallFunc:create(function()
		self.lineTextNum[linePos] = self.lineTextNum[linePos] - 1
		if self.lineTextNum[linePos] == 0 then
			self.lineSpeed[linePos] = 1
		end
	end)
	local action5 = cc.MoveBy:create(display.width/(2*data.speed),cc.p(-display.width/2,0))
	local action6 = cc.CallFunc:create(function()
		text:removeFromParent()
		self.allTextObjs[text] = nil
	end)
	text:displayObject():runAction(cc.Sequence:create( action1,action2,action3,action4,action5,action6))
	self.textLayer:addChild(text)
	

	self.allTextObjs[text] = text	
	
	if self.gameType==295 then
		self.textLayer:setTouchable(true)
		text:addClickListener(function(context)
				ViewManager.open("ViewPlayerView",{playerId = data.playerId, serverId = data.serverId})
		end,33)
	end	
end

--获取当前弹幕文本的速度
function BarrageView:getTextSpeed(text)

	local strNum = StringUtil.utf8len(text)
	local pos1,pos2 = 1,1
	for aaa=1,3 do
		pos1,pos2 = string.find(text, "color=#",pos2)
		if not pos2 then break end
		strNum = strNum - 23
	end

	if strNum < 5 then
		return self.textSpeed*0.8,4
	elseif strNum < 9 then
		return self.textSpeed,3
	elseif strNum < 16 then
		return self.textSpeed*1.3,2
	else
		return self.textSpeed*1.6,1
	end
end

--清除所有弹幕
function BarrageView:cleanAllBarrageText()
	if self.timeId then
		Scheduler.unschedule(self.timeId)
	end
	for k,v in pairs(self.allTextObjs) do
		v:removeFromParent()
	end
	self.allTextObjs = {}
	cc.Director:getInstance():setAnimationInterval(self.oldFps)
end

--接受到弹幕下推消息
function BarrageView:Barrage_PostGameTypeMsg(_,data)
	printTable(33,"Barrage_PostGameTypeMsg",data)
	local msg = data.msg or {}
	if self.gameType == msg.gameType and self.gameId == msg.id then
		if self.gameType==295 then
			msg.text = string.format("[color=#21c3ff]%s[/color]%s",msg.name,msg.msg)
		else
			msg.text = string.format("[color=#21c3ff]%s：[/color]%s",msg.name,msg.msg)
		end
		table.insert(self.runText,self.curText, msg)
		--self:doBarrageCheck(data )
		if not self.timeId then
			self:runBarrageUpdate( )
		end
	end
end

--页面关闭
function BarrageView:_exit()
	if self.timeId then
		Scheduler.unschedule(self.timeId)
	end
	
	if self.idCheckTimeId then
		Scheduler.unschedule(self.idCheckTimeId)
	end
	if self.getCardCheckTimeId then
		Scheduler.unschedule(self.getCardCheckTimeId)
	end
	print(33,"BarrageView:_exit()")

	cc.Director:getInstance():setAnimationInterval(self.oldFps)
end



return BarrageView