--Name : EquipmentModel.lua
--Author : generated by FairyGUI
--Date : 2020-4-1
--Desc : 


local EquipmentModel = class("EquipmentModel", BaseModel)


local EquipmentData = require "Game.Modules.Equipment.EquipmentData"
local ItemConfiger = require "Game.ConfigReaders.ItemConfiger"
local  HeroConfiger = require "Game.ConfigReaders.HeroConfiger"


function EquipmentModel:ctor()
	self.eqData = {}
	self.suitData = {}
	self.newSuitData = {}
	self.eqBagData = {}
	self.hid = ""
	self.curPos = 1
	self.eqConfig = false
	self.skConfig = false
	self.curEqUUID = false
	self.attType = -1
	self.skillData = {}
	
	self.saveList = {}
	
	self.posBag = {}
	--self.eventNode = false
end


function EquipmentModel:init()
	--self.eventNode = cc.Node:create()
	--self.eventNode:retain()
	self:initListeners()
end

--计算装备战力
function EquipmentModel:calcCombat(eqInfo)
	local totalPower = 0
	local info = DynamicConfigData.t_equipEquipment[eqInfo.code]
	totalPower = HeroConfiger.CaleAttrPower(info)
	local skilldata = self:getSkillData(eqInfo.uuid)

	if skilldata and skilldata.skill  then
		totalPower = totalPower + HeroConfiger.CaleSkillPower(skilldata.skill)
	end

	return totalPower
end

function EquipmentModel:revData(data)
	printTable(55,"quipmentModel:revData  " ,data)
		
	for k,v in pairs(data.heroList) do
		if (v.equipmentMap) then
			for _, eq in pairs(v.equipmentMap) do
				self:setSkillData(eq.uuid, eq);
			end
		end
		self.eqData[v.uuid] = v.equipmentMap or {}
		self.suitData[v.uuid] = self:getSuitData(self.eqData[v.uuid])
		self.newSuitData[v.uuid] = self:getNewSuitData(self.eqData[v.uuid])--suit
		self.hid = v.uuid
	end

	
end

function EquipmentModel:Hero_UpdateInfo(_,data)
	print(33,"EquipmentModel:Hero_UpdateInfo")
	for k,v in pairs(data.updateList) do
		local type = v.updateType
		local uuid = v.uuid
		local heroInfo = v.heroInfo
		if heroInfo then
			local equipmentMap = heroInfo.equipmentMap
			--local suit = heroInfo.suit
			self.eqData[uuid] = equipmentMap
			self.suitData[uuid] = self:getSuitData(self.eqData[v.uuid])--suit
			self.newSuitData[uuid] = self:getNewSuitData(self.eqData[v.uuid])--suit
			printTable(33,uuid,self.suitData[uuid])
		end
	end
end

function EquipmentModel:getNewSuitData(equipmentMap)
	local ret = {}
	if not equipmentMap then
		return ret
	end
	for _,v in pairs(equipmentMap) do --每件装备算一次，看有几件跟自己搭成套装的
		local item = DynamicConfigData.t_equipEquipment[v.code]
		if item.color >= 4 then --紫色以上才能形成套装
			local num = 0
			for _,equipInfo in pairs(equipmentMap) do
				local equip = DynamicConfigData.t_equipEquipment[equipInfo.code]
				if equip.color > item.color then 
					num = num + 1 
				elseif equip.color == item.color then
					if equip.staramount >= item.staramount then 
						num = num + 1 
					end
				end
			end
			if not ret[num] then 
				ret[num] = {color = item.color, star = item.staramount }
			elseif item.color > ret[num].color then
				ret[num] = {color = item.color, star = item.staramount }
			elseif item.color == ret[num].color and item.staramount > ret[num].star then
				ret[num] = {color = item.color, star = item.staramount }
			end
		end
	end
	ret[1] = nil  --只有一个不成套装的不要了
	if not ret[2] then --如果两个的没有，有达成三个或者四个的也算激活了
		if ret[3] then ret[2] = ret[3] end
		if ret[4] and (not ret[2] or ret[4].color > ret[2].color or (ret[4].color == ret[2].color and ret[4].star > ret[2].star) ) then
			ret[2] = ret[4]
		end
	end
	if not ret[3] then --如果三个的没有，有达成四个的也算激活了
		if ret[4] then ret[3] = ret[4] end
	end
	return ret
end
function EquipmentModel:getSuitData(equipmentMap)
	local ret = {}
	if not equipmentMap then
		return ret
	end
	
	local suitCount = {}
	local addSuit = function(color, star, pos)
		suitCount[color] = suitCount[color] or {}
		if suitCount[color][star] then
			suitCount[color][star].count = suitCount[color][star].count + 1
			table.insert(suitCount[color][star].position,pos)
		else
			suitCount[color][star] = {}
			suitCount[color][star].count = 1
			suitCount[color][star].position = {}
			table.insert(suitCount[color][star].position,pos)
		end
	end

	
	for k,v in pairs(equipmentMap) do
		local item = DynamicConfigData.t_equipEquipment[v.code]
		if item.color >= 4 then
			for color = item.color,4,-1 do
				for starNum = item.staramount,0,-1 do
					addSuit(color, starNum, item.position)
				end
			end
		end
	end

	for color,v in pairs(suitCount) do
		for star,data in pairs(v) do
			for index,position in pairs(data.position) do
				ret[position] = ret[position] or {}
				table.insert(ret[position], {color = color,star = star,count = data.count})
			end
		end
	end

	return ret
end

function EquipmentModel:updateEquipment(data)
	self.eqData[data.uuid] = data.equipmentMap
end

function EquipmentModel:loginPlayerDataFinish(data)
	self.eqBagData = PackModel:getEquipBag()
	self.eqConfig = DynamicConfigData.t_equipEquipment
	
	
	self:addDecompose(self.saveList,{{type=3,code=10000017,amount=1}})
	self:redCheck()
end

--请求
function EquipmentModel:reqSkillData(hid,uuidArr,fuc)
	local sendInfo = {heroUuid = hid,itemUuidAttry = uuidArr}
	local callBack = false
	
	RPCReq.Equipment_GetEquipInfo(sendInfo,function(eqlist)
			--printTable(33,"Equipment_GetEquipInfo success ",eqlist)
			callBack = true
			for k,v in pairs(eqlist.list) do
				self.skillData[v.uuid] = v
				if self.eqData[sendInfo.heroUuid] then
					self.eqData[sendInfo.heroUuid][v.id] = v
				end
			end
			if fuc then
				fuc(eqlist)
			end
			
		end)
end

function EquipmentModel:getCastConfigByColor(color)
	return DynamicConfigData.t_equiprecast[color]
end



function EquipmentModel:addDecompose(out,decompose)
	
	local find = false
	for k, v in pairs(decompose) do
		local key = v.type.."_"..v.code
		if out[key] then
			out[key].amount = out[key].amount + v.amount
			find = true
		else
			out[key] = clone(v)
			
		end

	end
end

function EquipmentModel:delDecompose(out,decompose)
	local find = false
	
	for k, v in pairs(decompose) do
		local key = v.type.."_"..v.code
		if out[key] then
			out[key].amount = out[key].amount - v.amount
			if out[key].amount < 1 then
				out[key] = nil
			end
		end
	end

end

function EquipmentModel:getSkillConfigByCode(code)
	if not self.skConfig then
		self.skConfig = DynamicConfigData.t_equipskill
	end
	return self.skConfig[code]
end

function EquipmentModel:getSkillData(uuid)
	return self.skillData[uuid]
end

function EquipmentModel:setSkillData(uuid,data)
	if uuid then
		self.skillData[uuid] = data
		self:redCheck()
	end
end

function EquipmentModel:getConfingByPackItem(item)
	if self.eqConfig and item and item.__data then
		return self.eqConfig[item.__data.code]
	end
end

function EquipmentModel:getConfingByCode(code)

	return self.eqConfig[code]
end

function EquipmentModel:getHeroDataById(id)
	if self.eqData then
		return self.eqData[id]
	end

end

function EquipmentModel:redCheck()
	print(55,"ready EquipmentModel:redCheck()")
	--if not self.eqBagData.__packItems then return end
	local function delayCheck()
		print(55,"begin EquipmentModel:redCheck()")
		--红点检测
		local allCards = ModelManager.CardLibModel:getAllCards()
		local battleHero = BattleModel:getArrayInfo(GameDef.BattleArrayType.Chapters, true)

		self.posBag = {}
		--printTable(55,"self.posBag",self.posBag)
		for _,info in pairs(allCards) do
			local hasCanUp = false
			local hero = ModelManager.CardLibModel:getHeroByUid(info.uuid)
			local attType= hero.heroDataConfiger.attType
			local canUpUniqueWeapon = false
			
			
			if battleHero.array[info.uuid] then
				--装备升级的红点检测
				local wearData = self:getHeroDataById(info.uuid) or {}
				printTable(55,"wearData",wearData)
				for i = 1, 4 do
					--if not wearData[i]  then
					local canUp = false  --是否可以穿装备
					if self.eqBagData.__packItems then
						for k,v in pairs(self.eqBagData.__packItems)  do
							local oldData = wearData[i]
							local oldEqInfo = wearData[i] and self.eqConfig[wearData[i].code] or nil
							local eqData = v.__data
							local eqInfo = self.eqConfig[v.__data.code]
							if eqInfo.position==i and (attType == eqInfo.attType or eqInfo.attType == 0)  then
								local newScore = eqInfo and self:calcCombat(eqData)
								local oldScore = oldEqInfo and self:calcCombat(oldData)
								if eqInfo then rawset(eqInfo, "power", newScore) end
								if oldEqInfo then rawset(oldEqInfo, "power", oldScore) end
								
								if (not wearData[i] or newScore > oldScore) then
									canUp = true
									hasCanUp = true
									break
								end
							end
						end
					end
					RedManager.updateValue("V_CardEquip_"..i.."_"..info.uuid, canUp)
				end
				
				--专武升级的红点检测
				if info.heroDataConfiger.uniqueWeapon ~= "" and tonumber(info.heroDataConfiger.uniqueWeapon) > 0 then
					local curLevel = info.uniqueWeapon and info.uniqueWeapon.level or -1
					local nextLvConfig = DynamicConfigData.t_UniqueWeaponConfig[tonumber(info.heroDataConfiger.uniqueWeapon)][curLevel + 1]
					local opemStr = ModuleUtil.getModuleOpenTips(ModuleId.UniqueWeapon.id, info.star) 
					if not opemStr and nextLvConfig and PlayerModel:isCostEnough(nextLvConfig.cost, false) then
						canUpUniqueWeapon = true
					end
				end				
			end
			
			RedManager.updateValue("V_CardUniqueWeapon"..info.uuid, canUpUniqueWeapon)
			--print(33,"V_CardEquip"..info.uuid,hasCanUp)
			RedManager.updateValue("V_CardEquipWear"..info.uuid, hasCanUp)
		end
		
		CardLibModel:jewelryRedCheck();
	end
	GlobalUtil.delayCallOnce("EquipmentModel:redCheck", delayCheck)
	
end

-- 根据uuid获取装备数据 如果是英雄穿戴会返回对应英雄uuid
function EquipmentModel:getEqDataByUuid(uuid)
	local bag = self:getEquipBag().__packItems;
	for _, eqData in pairs(bag) do
		local d = eqData.__data;
		local code = d.code;
		local eqUuid = d.uuid;
		local extraData = d.specialData and d.specialData.equipment or {};
		local extraExp = extraData.starExp or 0;
		if (eqUuid == uuid) then
			return {
				code = code,
				uuid = eqUuid,
				extraExp = extraExp
			}, false
		end
	end
	for heroUuid,v in pairs(self.eqData) do
		for _, eqData in pairs(v) do
			if (eqData.uuid == uuid) then
				local info = {
					code = eqData.code,
					extraExp = eqData.starExp,
					uuid = eqData.uuid
				}
				return info, heroUuid
			end
		end
	end
	return false, false;
end

function EquipmentModel:getEqByPos(pos,hid)
	if hid == nil then
		hid = self.hid
	end
	if self.eqData[hid] then
		for k,v in pairs(self.eqData[hid]) do
			if v.id == pos then return  v end
		end
	end
end

function EquipmentModel:getEqIconByeCode(code)
	
	return ItemConfiger.getItemIconByCode(code)
end

function EquipmentModel:getEquipBag()
	--printTable(33,"getEquipBag = ",PackModel:getEquipBag())
	self.eqBagData = PackModel:getEquipBag()
	return self.eqBagData
end

function EquipmentModel:curCardInfo()
	local heroInfo = CardLibModel:getHeroByUid(self.hid)
	
	return heroInfo
end

function EquipmentModel:updateWearEqList(id,info,hinfo) -- id 装备的位置  info 新的装备信息  hinfo 英雄信息
	local hid = hinfo and hinfo.heroUuid or self.hid
	for k,v in pairs(self.eqData[hid]) do
		
		if v.id == id then
			if info then
				print(33,"updateWearEqList",v.code,"-->",info.code)
			else
				print(33,"del WearEqList",v.code)
			end
			self.eqData[hid][k] = info
			if (info) then
				self:setSkillData(info.uuid,info)
			end
			Dispatcher.dispatchEvent(EventType.equipment_refresheq)
			return
		end
	end
	if info then
		print(33,"add WearEqList code = ",info.code)
		self.eqData[hid][id]=info
		self:setSkillData(info.uuid, info)
	end
	
	self:redCheck()
	Dispatcher.dispatchEvent(EventType.equipment_refresheq)
end

function EquipmentModel:getWearEqListByHero(hid)
	if hid then
		return self.eqData[hid]
	end
	
	if not self.eqData[self.hid] then
		self.eqData[self.hid] = {}
	end
	
	return self.eqData[self.hid]
end

function EquipmentModel:getWearEqList()

	return self.eqData
end

-- 装备升星
function EquipmentModel:upStar(eqUuid, costArr, heroUuid)
	local info = {
		itemUuidAttry = costArr or {},
		itemUuid = eqUuid
	}
	local oldCombat = 0;
	local conf = DynamicConfigData.t_equipEquipment
	local eqData = self:getEqDataByUuid(eqUuid)
	local pos = conf[eqData.code].position;
	if (heroUuid) then
		info.heroUuid = heroUuid;
		oldCombat = ModelManager.CardLibModel:getHeroByUid(heroUuid).combat
	end
	RPCReq.Equipment_UpStar(info, function (param)
		local newEq = param.list[1]
		if (param.type == 0) then
			self:updateWearEqList(pos, newEq, {heroUuid = heroUuid});
			local newCombat = ModelManager.CardLibModel:getHeroByUid(heroUuid).combat
			if (newCombat > oldCombat) then
				RollTips.showAddFightPoint(newCombat - oldCombat);
			end
		else
			-- local item = PackModel:getEquipBag():getItemByUuid(newEq.code, newEq.uuid);
			-- local starExp = newEq.starExp;
			-- if (item) then
			-- 	local d = item.__data;
			-- 	if (not d.specialData) then
			-- 		d.specialData = {};
			-- 	end
			-- 	if (not d.specialData.equipment) then
			-- 		d.specialData.equipment = {};
			-- 	end
			-- 	item.__data.specialData.equipment.starExp = starExp
			-- end
			self:upBagEquip(newEq)
		end
		Dispatcher.dispatchEvent("equipUpstar_refresh", newEq.uuid);
	end)
end

-- 装备进阶
function EquipmentModel:upgrade(eqUuid, heroUuid)
	local info = {
		itemUuid = eqUuid
	}
	local oldCombat = 0;
	local conf = DynamicConfigData.t_equipEquipment
	local eqData = self:getEqDataByUuid(eqUuid)
	local pos = conf[eqData.code].position;
	if (heroUuid) then
		info.heroUuid = heroUuid;
		oldCombat = ModelManager.CardLibModel:getHeroByUid(heroUuid).combat
	end
	RPCReq.Equipment_UpgradeOrder(info, function (param)
		local newEq = param.list[1]
		if (param.type == 0) then
			self:updateWearEqList(pos, newEq, {heroUuid = heroUuid});
			local newCombat = ModelManager.CardLibModel:getHeroByUid(heroUuid).combat
			if (newCombat > oldCombat) then
				RollTips.showAddFightPoint(newCombat - oldCombat);
			end
		else
			-- local item = PackModel:getEquipBag():getItemByUuid(newEq.code, newEq.uuid);
			-- local starExp = newEq.starExp;
			-- if (item) then
			-- 	local d = item.__data;
			-- 	if (not d.specialData) then
			-- 		d.specialData = {};
			-- 	end
			-- 	if (not d.specialData.equipment) then
			-- 		d.specialData.equipment = {};
			-- 	end
			-- 	item.__data.specialData.equipment.starExp = starExp
			-- end
			self:upBagEquip(newEq)
		end
		Dispatcher.dispatchEvent("equipUpstar_refresh", newEq.uuid);
	end)
end


function EquipmentModel:upBagEquip(newEq)
	local item = PackModel:getEquipBag():getItemByUuid(newEq.code, newEq.uuid);
	local starExp = newEq.starExp;
	if (item) then
		local d = item.__data;
		if (not d.specialData) then
			d.specialData = {};
		end
		if (not d.specialData.equipment) then
			d.specialData.equipment = {};
		end
		item.__data.specialData.equipment.starExp = starExp
	end
end

return EquipmentModel
