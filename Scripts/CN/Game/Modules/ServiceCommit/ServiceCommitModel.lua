--Name : ServiceCommitModel.lua
--Author : generated by FairyGUI
--Date : 2020-6-12
--Desc :

local ServiceCommitModel = class("ServiceCommitModel", BaseModel)

function ServiceCommitModel:ctor()
end

function ServiceCommitModel:init()
    self.myFeedBackInfo = {}
    self.serviceRed = {}
end

function ServiceCommitModel:setFeedInfo(info)
    local sortArr = {}
    local noArr = {}
    local hasArr = {}
    if (info and info.no_reply and next(info.no_reply) ~= nil) then
        local list = info.no_reply
        for key, value in pairs(list) do
            table.insert(sortArr, value)
        end
    end
    if (info and info.has_reply and next(info.has_reply) ~= nil) then
        local list = info.has_reply
        for key, value in pairs(list) do
            table.insert(sortArr, value)
        end
    end
    TableUtil.sortByMap(sortArr, {{key = "id", asc = true}})
    hasArr = self:setInfo(sortArr)
    self.myFeedBackInfo = hasArr
    self:serviceredPoint()
end

function ServiceCommitModel:setInfo(info)
    local listData = {}
    local group = {}
    local index = 1
    for i = 1, #info, 1 do
        local name = ""
        local dataInfo = info[i]
        group = {}
        local open = false --index == 1
        index = index + 1
        table.insert(group, dataInfo)
        local infdadas = {
            name = dataInfo.id,
            open = open,
            data = group,
            create_time = dataInfo.create_time,
            title = dataInfo.title,
            read = dataInfo.read,
            flag = dataInfo.rep_flag,
            sortId = index - 1
        }
        table.insert(listData, infdadas)
    end
    return listData
end

function ServiceCommitModel:getFeedInfo()
    return self.myFeedBackInfo
end

function ServiceCommitModel:serviceredPoint()
    local red = false
    for i = 1, #self.myFeedBackInfo, 1 do
        local dataInfo = self.myFeedBackInfo[i] --read：是否阅读（1.已读,0.未读）rep_flag：回复状态(0.未处理;1.已处理；2.已忽略)
        if dataInfo.flag == 1 and dataInfo.read == 0 then
            self.serviceRed[dataInfo.name] = true
            red = true
        else
            self.serviceRed[dataInfo.name] = false
        end
    end
    RedManager.updateValue("V_BASESETTING_49", red)
end

function ServiceCommitModel:getserviceredPoint(id)
    if self.serviceRed[id] then
        return self.serviceRed[id]
    else
        return false
    end
end

--提交客服问题
function ServiceCommitModel:feedBack(qq, phone, title, content, fileNameList)
    local params = {
        qq = qq,
        phone = phone,
        title = title,
        content = content,
        path = fileNameList,
        onSuccess = function(data)
            printTable(15, "提交客服问题成功返回", data)
            RollTips.show(DescAuto[267]) -- [267]="感谢您提交的问题，我们将尽快回复"
        end,
        onFailed = function(data)
            printTable(15, "提交客服问题失败返回", data)
        end
    }
    printTable(15, "提交客服问题成功返回", qq, phone, title, content)
    PHPUtil.commitProblem(params)
end

--得到自己的客服问题
function ServiceCommitModel:feedBackMy(type)
    if type == nil then
        type = 0
    end
    local params = {
        onSuccess = function(data)
            printTable(15, "得到自己的客服问题成功返回", data)
            self:setFeedInfo(data)
        end,
        onFailed = function(data)
            printTable(15, "得到自己的客服问题失败返回", data)
        end
    }
    if type == 1 then
        Dispatcher.dispatchEvent(EventType.serviceMyFeedInfo_updata)
     --数据更新
    elseif type == 2 then
        Dispatcher.dispatchEvent(EventType.serviceMyFeedRed_updata)
     --红点更新
    end
    PHPUtil.getProblems(params)
end

--更新投诉阅读标记
function ServiceCommitModel:feedBackUpdate(id)
    local params = {
        id = id,
        onSuccess = function(data)
            printTable(15, "更新投诉阅读标记成功返回", data)
            self:feedBackMy()
            Dispatcher.dispatchEvent(EventType.serviceMyFeedRed_updata)
         --红点更新
        end,
        onFailed = function(data)
            printTable(15, "更新投诉阅读标记失败返回", data)
        end
    }
    printTable(15, "更新投诉阅读标记", id)
    PHPUtil.upReadProblemsTag(params)
end

return ServiceCommitModel
