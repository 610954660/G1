--Date :2020-12-17
--Author : generated by FairyGUI
--Desc : 

local BloodAbyssMainView,Super = class("BloodAbyssMainView", Window)

function BloodAbyssMainView:ctor()
	--LuaLog("BloodAbyssMainView ctor")
	self._packName = "BloodAbyss"
	self._compName = "BloodAbyssMainView"
	self._rootDepth = LayerDepth.Window
	self.curBoss = false
	self.isEnd = false
	self.isSend = false
	self._args.moduleId = 225
	self.timer = false
end

function BloodAbyssMainView:_initEvent( )
	
end

function BloodAbyssMainView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:BloodAbyss.BloodAbyssMainView
	self.bossJifenTxt = viewNode:getChildAutoType('bossJifenTxt')--GTextField
	self.bossList = viewNode:getChildAutoType('bossList')--GList
	self.bossRankTxt = viewNode:getChildAutoType('bossRankTxt')--GTextField
	self.btn_go = viewNode:getChildAutoType('btn_go')--GButton
	self.btn_help = viewNode:getChildAutoType('btn_help')--GButton
	self.btn_rank = viewNode:getChildAutoType('btn_rank')--GButton
	self.btn_reward = viewNode:getChildAutoType('btn_reward')--GButton
	self.curList = viewNode:getChildAutoType('curList')--GList
	self.desc = viewNode:getChildAutoType('desc')--GRichTextField
	self.frame = viewNode:getChildAutoType('frame')--GLabel
	self.itemCell = viewNode:getChildAutoType('itemCell')--GButton
	self.jifenTxt = viewNode:getChildAutoType('jifenTxt')--GTextField
	self.leftTime = viewNode:getChildAutoType('leftTime')--GRichTextField
	self.lihuiDisplay = viewNode:getChildAutoType('lihuiDisplay')--GLoader
	self.lingqutext = viewNode:getChildAutoType('lingqutext')--GRichTextField
	self.notext = viewNode:getChildAutoType('notext')--GTextField
	self.rankTxt = viewNode:getChildAutoType('rankTxt')--GTextField
	self.skillList = viewNode:getChildAutoType('skillList')--GList
	self.txt_countTimer = viewNode:getChildAutoType('txt_countTimer')--GTextField
	self.txt_countTitle = viewNode:getChildAutoType('txt_countTitle')--GTextField
	--{autoFieldsEnd}:BloodAbyss.BloodAbyssMainView
	--Do not modify above code-------------
end

function BloodAbyssMainView:_initListener( )
	local moduleId = BloodAbyssModel:getModuleId()

	self.bossList:setItemRenderer(function(index, obj)
		local info = BloodAbyssModel.boss[index+1]
		local head = PathConfiger.getHeroCard(info.heroId)
		obj:setTitle(info.name)
		obj:getChildAutoType("head"):setIcon(head)
		obj:addClickListener(function()
			self:selectBoss( index,obj,info )
		end)
		if info.bossId == (self.curBoss and self.curBoss.bossId or 1) then
			self:selectBoss( index,obj,info )
		end
	end)

	self.btn_go:addClickListener(function()
		Dispatcher.dispatchEvent("bloodAbyss_battle")
	end)

	self.btn_help:addClickListener(function()
		ViewManager.open("BloodAbyssRankView", {type = GameDef.RankType.BloodAbyssSingle,collectionId = self.curBoss.bossId})
	end)

	self.btn_rank:addClickListener(function()
		ViewManager.open("PublicRankView", {type = GameDef.RankType.BloodAbyssMultiple})
	end)

	self.btn_reward:addClickListener(function()
		local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.BloodAbyss)
		ViewManager.open("PublicRankRewardView", {activityType = GameDef.ActivityType.BloodAbyss, moduleId = actData.showContent.moduleId, rankType = GameDef.RankType.BloodAbyssMultiple})
	end)
	self.configReward = DynamicConfigData.t_ActivityRankReward[GameDef.ActivityType.BloodAbyss][moduleId]
	TableUtil.sortByMap(self.configReward, {{key = "min", asc = false}})
	self.myConfigReward = false
	

	self.curList:setItemRenderer(function(index, objItem)
		local itemcell = BindManager.bindItemCell(objItem)
		local award = self.myConfigReward.reward[index+1]
		itemcell:setData(award.code, award.amount, award.type)
		itemcell:setFrameVisible(false)
		
		objItem:removeClickListener(100)
		objItem:addClickListener(function( ... )
				itemcell:onClickCell()
			end,100)
	end)
	

	self.skillList:setItemRenderer(function(index, obj)
		local skillCell = BindManager.bindSkillCell(obj)
		
		skillCell:setData(self.curBoss.skill[index+1])
		obj:addClickListener(function()
			ViewManager.open("ItemTips", {codeType = CodeType.SKILL, id =  self.curBoss.skill[index+1],heroId = self.curBoss.heroId,bloodAbyss = true})
		end,99)
		
	end)

end

function BloodAbyssMainView:_initUI( )
	self:_initVM()
	self:_initListener()
	self:setBg("BloodAbyss_bg.jpg")
	RedManager.register("V_ACTIVITY_"..GameDef.ActivityType.BloodAbyss.."battle", self.btn_go:getChildAutoType("img_red"))
	RedManager.register("V_ACTIVITY_"..GameDef.ActivityType.BloodAbyss.."reward", self.itemCell:getChildAutoType("img_red"))

	--self.lihuiObj = BindManager.bindLihuiDisplay(self.lihuiDisplay)
	self.itemCell = BindManager.bindItemCell(self.itemCell)

	
	
	BloodAbyssModel.isSend = false
	self:updateCountTimer()
	self:bloodAbyss_updateView( )
	self.bossList:setSelectedIndex(0)
end

function BloodAbyssMainView:bloodAbyss_updateView( )
	local moduleId = BloodAbyssModel:getModuleId()
	local monsterCf = DynamicConfigData.t_monster
	local config = DynamicConfigData.t_BloodAbyssMonster
	for i=1,3 do 
        local bossCf = BloodAbyssModel.boss[i]
        bossCf.monsterId = config[bossCf.bossId][bossCf.difficulty].monsterId
        bossCf.desc = config[bossCf.bossId][bossCf.difficulty].desc
		bossCf.name = config[bossCf.bossId][bossCf.difficulty].name
		bossCf.rankname =  monsterCf[bossCf.monsterId].name
		bossCf.model = monsterCf[bossCf.monsterId].model
		bossCf.skill = monsterCf[bossCf.monsterId].skill
	end

	

	local curReward = BloodAbyssModel.rewards[1].reward
	local ttime = 0
	local haveGet = 0
	for i=1,#BloodAbyssModel.rewards do
		local rw = BloodAbyssModel.rewards[i]

		if BloodAbyssModel.totalTimes < rw.times and ttime == 0 then
			ttime = rw.times - BloodAbyssModel.totalTimes
		end

		if BloodAbyssModel.totalTimes >= rw.times and  rw.status ~= 1 and  rw.status ~= 3 then
			--ttime = BloodAbyssModel.rewards[i].times - BloodAbyssModel.times
			curReward = rw.reward
			haveGet = rw.times
			break
		end
	end

	self.itemCell:setIsMid(true)
	self.itemCell:setData(curReward[1].code, curReward[1].amount, curReward[1].type)

	self.lingqutext:setText(Desc.bloodAbyss_left:format(ttime))
	if haveGet > 0 then
		self.itemCell.view:removeClickListener()
		self.itemCell.view:addClickListener(function( ... )
				local params = {}
				params.activityId = BloodAbyssModel:getActivityId()
				params.times = haveGet
				printTable(33,"Activity_BloodAbyss_GetReward",params)
				RPCReq.Activity_BloodAbyss_GetReward(params, function()
					print(33,"Activity_BloodAbyss_GetReward success")
				end)
			end,100)
		self.lingqutext:setText(Desc.bloodAbyss_get)
	else
		if ttime == 0 then
			self.lingqutext:setText(Desc.bloodAbyss_allget)
		end
		self.itemCell.view:removeClickListener()
		self.itemCell.view:addClickListener(function( ... )
				ViewManager.open("BloodAbyssRewardView")
			end,100)
	end

	local leftTime = DynamicConfigData.t_BloodAbyss[moduleId].times - BloodAbyssModel.times
	if leftTime < 1 then
		self.btn_go:setGrayed(true)
		self.btn_go:setTouchable(false)
	end
	
	self.leftTime:setText(Desc.bloodAbyss_times:format(leftTime))
	self.jifenTxt:setText(Desc.bloodAbyss_score:format(BloodAbyssModel.allScore))

	self.bossList:setData(BloodAbyssModel.boss)
	
	
	BloodAbyssModel:getMyRank(GameDef.RankType.BloodAbyssSingle,self.curBoss.bossId,function(data)
		if data.rank == 0 then
			self.bossRankTxt:setText(Desc.bloodAbyss_nodata2)
		elseif data.rank > 999 then
			self.bossRankTxt:setText(Desc.bloodAbyss_currank:format(data.rank).."+")
		else
			self.bossRankTxt:setText(Desc.bloodAbyss_currank:format(data.rank))
		end

	end)

	BloodAbyssModel:getMyRank(GameDef.RankType.BloodAbyssMultiple,nil,function(data)
		local myRank = data.rank
		if myRank == 0 then
			 self.notext:setVisible(true)
		else
			for i=#self.configReward,1,-1 do
				if myRank >= self.configReward[i].min then
					self.myConfigReward = self.configReward[i]
					break
				end
			end
			self.curList:setData(self.myConfigReward.reward)
			self.notext:setVisible(false)
		end
		
		if data.rank == 0 then
			self.rankTxt:setText(Desc.bloodAbyss_nodata)
		elseif data.rank > 999 then
			self.rankTxt:setText(Desc.bloodAbyss_rank:format(data.rank).."+")
		else
			self.rankTxt:setText(Desc.bloodAbyss_rank:format(data.rank))
		end
	end)
end

function BloodAbyssMainView:selectBoss( index,obj,info )
	local moduleId = BloodAbyssModel:getModuleId()
	self.curBoss = info
	--self.lihuiObj:setData(info.model,nil,"stand")
	self.lihuiDisplay:displayObject():removeAllChildren()
	SpineUtil.createModel(self.lihuiDisplay,{x = self.lihuiDisplay:getWidth()/2, y =self.lihuiDisplay:getHeight()/2}, "stand", info.heroId,true)
	self.bossJifenTxt:setText(Desc.bloodAbyss_curscore:format(info.totalScore))
	self.desc:setText(info.desc)
	
	BloodAbyssModel:getMyRank(GameDef.RankType.BloodAbyssSingle,self.curBoss.bossId,function(data)
		if data.rank == 0 then
			self.bossRankTxt:setText(Desc.bloodAbyss_nodata)
		elseif data.rank > 999 then
			self.bossRankTxt:setText(Desc.bloodAbyss_currank:format(data.rank).."+")
		else
			self.bossRankTxt:setText(Desc.bloodAbyss_currank:format(data.rank))
		end
	end)
	self.leftTime:setText(Desc.bloodAbyss_times:format(DynamicConfigData.t_BloodAbyss[moduleId].times - BloodAbyssModel.times))
	--self.lingqutext:setText(Desc.bloodAbyss_left:format(3))
	self.skillList:setData(self.curBoss.skill)
	BloodAbyssModel.rankBossInfo = info
end





-- 倒计时
function BloodAbyssMainView:updateCountTimer()
	if self.isEnd then return end
	local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.BloodAbyss)
	if not actData then return end
	local actId   = actData.id
	local status, addtime = ModelManager.ActivityModel:getActStatusAndLastTime(actId)
	if not addtime then return end

	if status == 2 and addtime == -1 then
		self.isEnd = false
		self.txt_countTimer:setText(Desc.activity_txt5)
	else
		local lastTime = addtime / 1000
		if lastTime == -1 then
			self.txt_countTimer:setText(Desc.activity_txt5)
		else
			if not tolua.isnull(self.txt_countTimer) then
				self.txt_countTimer:setText(TimeLib.GetTimeFormatDay(lastTime, 2))
			end
			local function onCountDown(time)
				if not tolua.isnull(self.txt_countTimer) then
					self.isEnd = false
					self.txt_countTimer:setText(TimeLib.GetTimeFormatDay(time, 2))
				end
			end
			local function onEnd(...)
				self.isEnd = true
				if not tolua.isnull(self.txt_countTimer) then
					--  self.activityEnable = true
					self.txt_countTimer:setText(Desc.activity_txt18)
				end
			end
			if self.timer then
				TimeLib.clearCountDown(self.timer)
			end
			self.timer = TimeLib.newCountDown(lastTime, onCountDown, onEnd, false, false, false)
		end
	end
end

function BloodAbyssMainView:_exit()

	if self.timer then
		TimeLib.clearCountDown(self.timer)
		self.timer = false
	end

end

return BloodAbyssMainView