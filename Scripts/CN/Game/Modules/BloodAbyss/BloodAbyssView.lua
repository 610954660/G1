--Date :2020-12-17
--Author : generated by FairyGUI
--Desc : 

local BloodAbyssView,Super = class("BloodAbyssView", View)

function BloodAbyssView:ctor()
	--LuaLog("BloodAbyssView ctor")
	self._packName = "BloodAbyss"
	self._compName = "BloodAbyssView"
	--self._rootDepth = LayerDepth.Window
	self.timer = false
	self.isEnd = false
	self.configReward = false
	self.curConfigReward = false
	self._args.moduleId = 225
end

function BloodAbyssView:_initEvent( )
	
end

function BloodAbyssView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:BloodAbyss.BloodAbyssView
	self.bg = viewNode:getChildAutoType('bg')--GLoader
	self.btn_go = viewNode:getChildAutoType('btn_go')--GButton
	self.btn_help = viewNode:getChildAutoType('btn_help')--GButton
	self.btn_rank = viewNode:getChildAutoType('btn_rank')--GButton
	self.btn_reward = viewNode:getChildAutoType('btn_reward')--GButton
	self.curList = viewNode:getChildAutoType('curList')--GList
	self.jifenTxt = viewNode:getChildAutoType('jifenTxt')--GTextField
	self.leftTime = viewNode:getChildAutoType('leftTime')--GRichTextField
	self.lh1 = viewNode:getChildAutoType('lh1')--lhItem
		self.lh1.lhObj = viewNode:getChildAutoType('lh1/lhObj')--GLoader
		self.lh1.lihuiDisplay = viewNode:getChildAutoType('lh1/lihuiDisplay')--GButton
	self.lh2 = viewNode:getChildAutoType('lh2')--lhItem
		self.lh2.lhObj = viewNode:getChildAutoType('lh2/lhObj')--GLoader
		self.lh2.lihuiDisplay = viewNode:getChildAutoType('lh2/lihuiDisplay')--GButton
	self.lh3 = viewNode:getChildAutoType('lh3')--lhItem
		self.lh3.lhObj = viewNode:getChildAutoType('lh3/lhObj')--GLoader
		self.lh3.lihuiDisplay = viewNode:getChildAutoType('lh3/lihuiDisplay')--GButton
	self.list_reward = viewNode:getChildAutoType('list_reward')--GList
	self.notext = viewNode:getChildAutoType('notext')--GTextField
	self.rankTxt = viewNode:getChildAutoType('rankTxt')--GTextField
	self.txt_countTimer = viewNode:getChildAutoType('txt_countTimer')--GTextField
	self.txt_countTitle = viewNode:getChildAutoType('txt_countTitle')--GTextField
	--{autoFieldsEnd}:BloodAbyss.BloodAbyssView
	--Do not modify above code-------------
end

function BloodAbyssView:_initListener( )
	local moduleId = BloodAbyssModel:getModuleId()
	self.btn_go:addClickListener(function()
		ViewManager.open("BloodAbyssMainView")
	end)

	self.btn_help:addClickListener(function()
		if not self._args.moduleId  then
			if not __IS_RELEASE__ then
				RollTips.show("获取不到模块ID,需要用ModuleUtil.openModule的方式打开")
			end
			return
		end

		if not Desc["help_StrTitle"..self._args.moduleId]  then
			if not __IS_RELEASE__ then
				RollTips.show(Desc.window_noconfig)
			end
			return
		end

		local info={}
		info['title']=Desc["help_StrTitle"..self._args.moduleId]
		info['desc']=Desc["help_StrDesc"..self._args.moduleId]
		ViewManager.open("GetPublicHelpView",info) 
	end)

	self.btn_rank:addClickListener(function()
		ViewManager.open("PublicRankView", {type = GameDef.RankType.BloodAbyssMultiple})
	end)

	self.btn_reward:addClickListener(function()
		local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.BloodAbyss)
		ViewManager.open("PublicRankRewardView", {activityType = GameDef.ActivityType.BloodAbyss, moduleId = actData.showContent.moduleId, rankType = GameDef.RankType.BloodAbyssMultiple})
	end)
	self.configReward = DynamicConfigData.t_ActivityRankReward[GameDef.ActivityType.BloodAbyss][moduleId]
	TableUtil.sortByMap(self.configReward, {{key = "min", asc = false}})

	self.curList:setItemRenderer(function(index, objItem)
		local itemcell = BindManager.bindItemCell(objItem)
		local award = self.curConfigReward.reward[index+1]
		itemcell:setData(award.code, award.amount, award.type)
		itemcell:setFrameVisible(false)
		
		objItem:removeClickListener(100)
		objItem:addClickListener(function( ... )
				itemcell:onClickCell()
			end,100)
	end)
	

	local config = DynamicConfigData.t_BloodAbyss[moduleId]
	for i=1,3 do
		local lhObj = BindManager.bindLihuiDisplay(self["lh"..i].lihuiDisplay)
		lhObj:setData(config.image[i],nil,"stand")
		lhObj:setStatic(true)
	end
	
	self.list_reward:setItemRenderer(function(index, objItem)
		local itemcell = BindManager.bindItemCell(objItem)
		local award = config.showReward[index+1]
		itemcell:setIsMid(true)
		itemcell:setData(award.code, award.amount, award.type)
		itemcell:setFrameVisible(false)
		
		objItem:removeClickListener(100)
		objItem:addClickListener(function( ... )
				itemcell:onClickCell()
			end,100)
	end)
	self.list_reward:setData(config.showReward)
end

function BloodAbyssView:_initUI( )
	self:_initVM()
	self:_initListener()

	self.bg:setURL("Bg/BloodAbyss_bg.jpg")
	RedManager.register("V_ACTIVITY_"..GameDef.ActivityType.BloodAbyss.."enter", self.btn_go:getChildAutoType("img_red"))
	self:updateCountTimer()
	self:bloodAbyss_updateView()
end

-- 倒计时
function BloodAbyssView:bloodAbyss_updateView()
	BloodAbyssModel:getMyRank(GameDef.RankType.BloodAbyssMultiple,nil,function(data)
		local myRank = data.rank
		if myRank == 0 then
			self.notext:setVisible(true)
	   	else
		   for i=#self.configReward,1,-1 do
			   if myRank >= self.configReward[i].min then
				   self.curConfigReward = self.configReward[i]
				   break
			   end
		   end
		   self.curList:setData(self.curConfigReward.reward)
		   self.notext:setVisible(false)
	   	end
		if data.rank == 0 then
			self.rankTxt:setText(Desc.bloodAbyss_nodata)
		elseif data.rank > 999 then
			self.rankTxt:setText(Desc.bloodAbyss_rank:format(data.rank).."+")
		else
			self.rankTxt:setText(Desc.bloodAbyss_rank:format(data.rank))
		end
	end)
	self.jifenTxt:setText(Desc.bloodAbyss_score:format(BloodAbyssModel.allScore))
	local moduleId = BloodAbyssModel:getModuleId()
	local leftTime = DynamicConfigData.t_BloodAbyss[moduleId].times - BloodAbyssModel.times
	self.leftTime:setText(Desc.bloodAbyss_times:format(leftTime))
end

-- 倒计时
function BloodAbyssView:updateCountTimer()
	if self.isEnd then return end
	local actData = ActivityModel:getActityByType(GameDef.ActivityType.BloodAbyss)
	if not actData then return end
	local actId   = actData.id
	local status, addtime = ActivityModel:getActStatusAndLastTime(actId)
	if not addtime then return end

	if status == 2 and addtime == -1 then
		self.isEnd = false
		self.txt_countTimer:setText(Desc.activity_txt5)
	else
		local lastTime = addtime / 1000
		if lastTime == -1 then
			self.txt_countTimer:setText(Desc.activity_txt5)
		else
			if not tolua.isnull(self.txt_countTimer) then
				self.txt_countTimer:setText(TimeLib.GetTimeFormatDay(lastTime, 2))
			end
			local function onCountDown(time)
				if not tolua.isnull(self.txt_countTimer) then
					self.isEnd = false
					self.txt_countTimer:setText(TimeLib.GetTimeFormatDay(time, 2))
				end
			end
			local function onEnd(...)
				self.isEnd = true
				if not tolua.isnull(self.txt_countTimer) then
					--  self.activityEnable = true
					self.txt_countTimer:setText(Desc.activity_txt18)
				end
			end
			if self.timer then
				TimeLib.clearCountDown(self.timer)
			end
			self.timer = TimeLib.newCountDown(lastTime, onCountDown, onEnd, false, false, false)
		end
	end
end


function BloodAbyssView:_exit()

	TimeLib.clearCountDown(self.timer)
end


return BloodAbyssView