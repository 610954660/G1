--Date :2020-12-19
--Author : generated by FairyGUI
--Desc : 

local BloodAbyssRewardView,Super = class("BloodAbyssRewardView", Window)

function BloodAbyssRewardView:ctor()
	--LuaLog("BloodAbyssRewardView ctor")
	self._packName = "BloodAbyss"
	self._compName = "BloodAbyssRewardView"
	self._rootDepth = LayerDepth.PopWindow
	
end

function BloodAbyssRewardView:_initEvent( )
	
end

function BloodAbyssRewardView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:BloodAbyss.BloodAbyssRewardView
	self.blackbg = viewNode:getChildAutoType('blackbg')--GLabel
	self.frame = viewNode:getChildAutoType('frame')--GLabel
	self.list_reward = viewNode:getChildAutoType('list_reward')--GList
	--{autoFieldsEnd}:BloodAbyss.BloodAbyssRewardView
	--Do not modify above code-------------
end

function BloodAbyssRewardView:_initUI( )
	self:_initVM()
	self.taskData = {}
	for k,v in pairs(BloodAbyssModel.rewards) do
		self.taskData[k] = {}
		self.taskData[k].reward = v.reward
		self.taskData[k].times = v.times
		self.taskData[k].status = v.status
		if self.taskData[k].status == 1 then
			self.taskData[k].rank = 2
		elseif self.taskData[k].status == 2 then
				self.taskData[k].rank = 1
		else
			self.taskData[k].rank = 3
		end
	end
	TableUtil.sortByMap(self.taskData,{{key = "rank", asc = false},{key = "times", asc = false}})

	self.list_reward:setItemRenderer(function(idx,obj)
		local index 		= idx + 1
		local data 		= self.taskData[index]
		local txt_title 	= obj:getChildAutoType("txt_title")
		local list_reward 	= obj:getChildAutoType("list_reward")
		local btn_take 		= obj:getChildAutoType("btn_take")
		local checkReward 	= obj:getController("checkReward") -- 0 不可领取 1 可领取 2 已领取
		local txt_times 	= obj:getChildAutoType("txt_times")


		txt_title:setText(Desc.bloodAbyss_ttime:format(data.times))
		if BloodAbyssModel.totalTimes >= data.times then
			txt_times:setText(string.format("[color=#119717](%s/%s)[/color]",BloodAbyssModel.totalTimes,data.times))
		else
			txt_times:setText(string.format("[color=#FF3B3B](%s/%s)[/color]",BloodAbyssModel.totalTimes,data.times))
		end
		local status = data.status -1
		checkReward:setSelectedIndex(status)
		if status ~= 1 then btn_take:setTouchable(false) end
		local reward = data.reward
		list_reward:setItemRenderer(function(idx2,obj2)
			local rewardInfo = reward[idx2+1]
			local itemCell = BindManager.bindItemCell(obj2)
			itemCell:setData(rewardInfo.code,rewardInfo.amount,rewardInfo.type)
		end)
		list_reward:setData(reward)

		-- if status == 0 then 	--未完成
		-- elseif status == 1 then	--已完成未领取
		-- elseif status == 2 then --已领取
		-- end
		local img_red = btn_take:getChildAutoType("img_red")
		img_red:setVisible(status == 1 and true or false)
		btn_take:removeClickListener(11)
		btn_take:addClickListener(function( ... )
			if status ~= 1 then
				RollTips.show(Desc.CrossTeamPVP_notReached)
				return
			end
			local params = {}
			params.activityId = BloodAbyssModel:getActivityId()
			params.times = data.times
			params.onSuccess = function (res )
				if tolua.isnull(obj) then return end
				self:dailyTask_update()
			end
			RPCReq.Activity_BloodAbyss_GetReward(params, params.onSuccess)
		end,11)
	end)
	self.list_reward:setData(self.taskData)

end

function BloodAbyssRewardView:task_update( _,gamePlayType, recordId, seq )
	self.taskData = ModelManager.TaskModel:getAllShowTask(category)
	self.list_reward:setData(self.taskData)
end

--任务列表刷新
function BloodAbyssRewardView:dailyTask_update( ... )
	self:task_update()
end




return BloodAbyssRewardView