--Date :2020-12-19
--Author : generated by FairyGUI
--Desc : 

local BloodAbyssResultView,Super = class("BloodAbyssResultView", View)

function BloodAbyssResultView:ctor()
	--LuaLog("BloodAbyssResultView ctor")
	self._packName = "BloodAbyss"
	self._compName = "BloodAbyssResultView"
	--self._rootDepth = LayerDepth.Window
	self.isSend = false
end

function BloodAbyssResultView:_initEvent( )
	
end

function BloodAbyssResultView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:BloodAbyss.BloodAbyssResultView
	self.btn_rebattle = viewNode:getChildAutoType('btn_rebattle')--Button1
		self.btn_rebattle.title2 = viewNode:getChildAutoType('btn_rebattle/title2')--GTextField
	self.btn_save = viewNode:getChildAutoType('btn_save')--Button2
		self.btn_save.title2 = viewNode:getChildAutoType('btn_save/title2')--GTextField
	self.c1 = viewNode:getController('c1')--Controller
	self.c2 = viewNode:getController('c2')--Controller
	self.c3 = viewNode:getController('c3')--Controller
	self.down1 = viewNode:getChildAutoType('down1')--GImage
	self.down2 = viewNode:getChildAutoType('down2')--GImage
	self.hurtTxt = viewNode:getChildAutoType('hurtTxt')--GTextField
	self.hurtUpTxt = viewNode:getChildAutoType('hurtUpTxt')--GRichTextField
	self.hurtUpTxt11 = viewNode:getChildAutoType('hurtUpTxt11')--GRichTextField
	self.list_reward = viewNode:getChildAutoType('list_reward')--GComponent
	self.name1 = viewNode:getChildAutoType('name1')--GTextField
	self.name2 = viewNode:getChildAutoType('name2')--GRichTextField
	self.scoreTxt = viewNode:getChildAutoType('scoreTxt')--GTextField
	self.scoreUpTxt = viewNode:getChildAutoType('scoreUpTxt')--GRichTextField
	self.scoreUpTxt11 = viewNode:getChildAutoType('scoreUpTxt11')--GRichTextField
	self.up1 = viewNode:getChildAutoType('up1')--GImage
	self.up2 = viewNode:getChildAutoType('up2')--GImage
	--{autoFieldsEnd}:BloodAbyss.BloodAbyssResultView
	--Do not modify above code-------------
end

function BloodAbyssResultView:_initListener( )
	local reward = self._args.data.reward
	self.list_reward = self.list_reward:getChildAutoType("list_reward")
	self.list_reward:setItemRenderer(function(index, objItem)
		local itemcell = BindManager.bindItemCell(objItem:getChild("itemCell"))
		local award = reward[index+1]
		itemcell:setData(award.code, award.amount, award.type)
		itemcell:setFrameVisible(false)
		objItem:setVisible(false)
		objItem:removeClickListener(100)
		objItem:addClickListener(function( ... )
				itemcell:onClickCell()
			end,100)

		Scheduler.schedule(function()
			if tolua.isnull(self.view) then
				return
			end
			objItem:setVisible(true)
			local rotate = cc.RotateBy:create(0.15,{x = 0,y = 180,z = 0})
			local rotate2 = cc.RotateBy:create(0.15,{x = 0,y = -180,z = 0})
			local callBack = cc.CallFunc:create(function()
				SpineUtil.createSpineObj(objItem, vertex2(objItem:getWidth()/2,objItem:getHeight()/2), "wuti_chuxian", "Spine/ui/jiesuan", "efx_jiesuan", "efx_jiesuan",false)
			end)
			objItem:displayObject():runAction(cc.Sequence:create(rotate,callBack,rotate2))
		end,index * 0.125,1)
	end)
	Scheduler.schedule(function()
		if tolua.isnull(self.view) then
			return
		end
		self.list_reward:setData(reward)
	end,0.6,1)
	

	self.btn_rebattle:addClickListener(function()
		BloodAbyssModel:saveScore(false)
		--Dispatcher.dispatchEvent("bloodAbyss_battle")
		ViewManager.open("BloodAbyssMainView")
		self.isSend = true
		self:closeView()
	end)

	self.btn_save:addClickListener(function()
		BloodAbyssModel:saveScore(true)
		self.isSend = true
		self:closeView()
	end)

	self.name2:setText(self._args.data.boss and self._args.data.boss.name or "")
end

function BloodAbyssResultView:_initUI( )
	self:_initVM()
	self:_initListener()
	local data = self._args.data
	local battleData=FightManager.getBettleData(RewardModel:getArrayType())
	local totalHurt = data.selfHurt
	self.hurtTxt:setText(totalHurt)
	self.scoreTxt:setText(data.curScore)

	if data.maxScore > 0 then 
		if data.curScore > data.maxScore then
			self.c2:setSelectedIndex(0)
			local per = math.ceil(100*(1.0*(data.curScore - data.maxScore) / data.maxScore))
			self.scoreUpTxt:setText(per.."%）")
		else
			self.c2:setSelectedIndex(1)
			local per =  math.ceil(100*(1.0*( data.maxScore -data.curScore) / data.maxScore))
			self.scoreUpTxt:setText(per.."%）") 
		end

		if totalHurt > data.maxHurt then
			self.c1:setSelectedIndex(0)
			local per =  math.ceil(100*(1.0*(totalHurt - data.maxHurt) / data.maxHurt))
			self.hurtUpTxt:setText(per.."%）")
		else
			self.c1:setSelectedIndex(1)
			local per =  math.ceil(100*(1.0*( data.maxHurt -totalHurt) / data.maxHurt))
			self.hurtUpTxt:setText(per.."%）")
		end
	else
		self.c3:setSelectedIndex(1)
	end

	self._parentWin.view:getChildAutoType("tipLose"):setScale(0,0)
	self._parentWin.view:getChildAutoType("closeButton"):removeClickListener()
	
end

function BloodAbyssResultView:_exit()
	if not self.isSend  then
		BloodAbyssModel:saveScore(false)
	end
end


return BloodAbyssResultView