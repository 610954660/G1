--Name : AwardView.lua
--Author : generated by FairyGUI
--Date : 2020-4-30
--Desc : 

local AwardView,Super = class("AwardView", View)
local ItemCell = require "Game.UI.Global.ItemCell"
function AwardView:ctor()
	--LuaLog("AwardView ctor")
	self._packName = "UIPublic_ReWard"
	self._compName = "AwardView"
	--self._rootDepth = LayerDepth.Window

end

function AwardView:_initEvent( )
	
end

function AwardView:_initVM( )
	local vmRoot = self
	local viewNode = self.view
	---Do not modify following code--------
	--{vmFields}:UIPublic_ReWard.AwardView
		--{vmFieldsEnd}:UIPublic_ReWard.AwardView
	--Do not modify above code-------------
end

function AwardView:_initUI( )
	self:_initVM()
	if self._args.showNoReward then
		if not(self._args.data and self._args.data.reward) then
			self.view:getController("hasReward"):setSelectedIndex(1)
			return
		end
	end
    self.awardList = self.view:getChildAutoType("awardList"):getChildAutoType("list_reward1")
	self.awardList:setItemRenderer(function(index,obj)
		local cellObj = obj:getChildAutoType("itemCell")
		cellObj:setVisible(false)
		local itemcell = BindManager.bindItemCell(cellObj)
		local itemData = ItemsUtil.createItemData({data = self._args.data.reward[index+1]})
		itemcell:setItemData(itemData)
		Scheduler.schedule(function()
			if tolua.isnull(self.view) then
				return
			end
			cellObj:setVisible(true)
			local rotate = cc.RotateBy:create(0.15,{x = 0,y = 180,z = 0})
			local rotate2 = cc.RotateBy:create(0.15,{x = 0,y = -180,z = 0})
			local callBack = cc.CallFunc:create(function()
				SpineUtil.createSpineObj(cellObj, vertex2(cellObj:getWidth()/2,cellObj:getHeight()/2), "wuti_chuxian", "Spine/ui/jiesuan", "efx_jiesuan", "efx_jiesuan",false)
			end)
			cellObj:displayObject():runAction(cc.Sequence:create(rotate,callBack,rotate2))
		end,index * 0.125,1)
	end)

	self.awardList:setVisible(false)
	if self._args.data.reward and next(self._args.data.reward) then
		Scheduler.schedule(function()
			if tolua.isnull(self.view) then
				return
			end
			self.awardList:setVisible(true)
			self.awardList:setData(self._args.data.reward)
		end,0.5,1)
	end
end

function AwardView:_exit( ... )
	local closeCallBack = self._args.data.closeCallBack
	if closeCallBack then
		closeCallBack(self._args.data.closeCaller)
	end
	if ModelManager.PlayerModel then 
		ModelManager.PlayerModel:set_awardData(false)
	end
	
	Scheduler.scheduleNextFrame(function()
		Dispatcher.dispatchEvent(EventType.module_open_hint)
	end)
end




return AwardView