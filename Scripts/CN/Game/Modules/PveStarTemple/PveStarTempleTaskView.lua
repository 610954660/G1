--Name : PveStarTempleTaskView.lua
--Author : generated by FairyGUI
--Date : 2020-7-29
--Desc : 

local PveStarTempleTaskView,Super = class("PveStarTempleTaskView", Window)

function PveStarTempleTaskView:ctor()
	--LuaLog("PveStarTempleTaskView ctor")
	self._packName = "PveStarTemple"
	self._compName = "PveStarTempleTaskView"
	self._rootDepth = LayerDepth.PopWindow
	
end

function PveStarTempleTaskView:_initEvent( )
	
end

function PveStarTempleTaskView:_initVM( )
	local vmRoot = self
	local viewNode = self.view
	---Do not modify following code--------
	--{vmFields}:PveStarTemple.PveStarTempleTaskView
		--{vmFieldsEnd}:PveStarTemple.PveStarTempleTaskView
	--Do not modify above code-------------
end

function PveStarTempleTaskView:_initUI( )
	self:_initVM()
	self.taskList = self.view:getChildAutoType("taskList")
	self.roundNumber = 1
	self.taskList:setItemRenderer(function(index,obj)
		self:taskListRenderer(index,obj)
	end)

	self:updateTaskList()
end


function PveStarTempleTaskView:updateTaskList()
	self.taskIDList = ModelManager.PveStarTempleModel:getTaskIDList()
	self.roundNumber =  ModelManager.PveStarTempleModel:getRoundNumber()
	self.taskList:setNumItems(#self.taskIDList)
end

function PveStarTempleTaskView:taskListRenderer(index,obj)
	local taskID = self.taskIDList[index + 1]
	local taskConfigData = DynamicConfigData.t_PveStarTempleTaskConfig[self.roundNumber][taskID]
	local itemList = obj:getChildAutoType("itemList")
	local hasGet = ModelManager.PveStarTempleModel:taskRewardHasGet(taskConfigData.recordType,taskID)
	local taskValue = ModelManager.PveStarTempleModel:getTaskCount(taskConfigData.recordType)

	obj:getChildAutoType("txtName"):setText(taskConfigData.name)
	obj:getChildAutoType("txtCondition"):setText(string.format("(%s/%s)",taskValue,taskConfigData.count))
	obj:getController("hasGet"):setSelectedIndex(hasGet and 1 or 0)
	obj:getController("complete"):setSelectedIndex(taskValue >= taskConfigData.count and 1 or 0)
	obj:getChildAutoType("btnGoTo"):addClickListener(function()
		self:onBtnGotoClick(index + 1)
	end)

	obj:getChildAutoType("btnGet"):addClickListener(function()
		self:onBtnGetClick(index + 1)
	end)

	itemList:setItemRenderer(function (index2,obj2)
		self:itemListRenderer(obj2,taskConfigData.reward[index2 + 1],hasGet)
	end)
	itemList:setNumItems(#taskConfigData.reward)
	itemList:resizeToFit(#taskConfigData.reward)

	obj:getChildAutoType("btnGet"):getChildAutoType("img_red"):setVisible(taskValue >= taskConfigData.count and not hasGet)
end

function PveStarTempleTaskView:itemListRenderer(obj,data,hasGet)
	local itemCell = BindManager.bindItemCell(obj)
	itemCell:setData(data.code,data.amount,data.type)
	itemCell:setIsHook(hasGet)
end

function PveStarTempleTaskView:onBtnGotoClick(index)
	self:closeView()
end

function PveStarTempleTaskView:onBtnGetClick(index)
	local taskID = self.taskIDList[index]
	local taskConfigData = DynamicConfigData.t_PveStarTempleTaskConfig[self.roundNumber][taskID]
	Dispatcher.dispatchEvent(EventType.PveStarTemple_ReceiveTaskReward,{taskType = taskConfigData.recordType,taskID = taskID})
end

return PveStarTempleTaskView