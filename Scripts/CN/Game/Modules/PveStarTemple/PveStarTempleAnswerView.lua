--Name : PveStarTempleAnswerView.lua
--Author : generated by FairyGUI
--Date : 2020-7-31
--Desc : 

local PveStarTempleAnswerView,Super = class("PveStarTempleAnswerView", Window)

function PveStarTempleAnswerView:ctor()
	--LuaLog("PveStarTempleAnswerView ctor")
	self._packName = "PveStarTemple"
	self._compName = "PveStarTempleAnswerView"
	self._rootDepth = LayerDepth.PopWindow
	self.currQuestionIndex = false
	self.currQuestionList = false
	self.areaID = self._args.areaID
	self.pos = self._args.pos
	self.currAnswerID = false
end

function PveStarTempleAnswerView:_initEvent( )
	
end

function PveStarTempleAnswerView:_initVM( )
	local vmRoot = self
	local viewNode = self.view
	---Do not modify following code--------
	--{vmFields}:PveStarTemple.PveStarTempleAnswerView
		--{vmFieldsEnd}:PveStarTemple.PveStarTempleAnswerView
	--Do not modify above code-------------
end

function PveStarTempleAnswerView:_initUI( )
	self:_initVM()
	self.answerList = self.view:getChildAutoType("answerList")
	self.currRewardList = self.view:getChildAutoType("currRewardList")
	self.allComboRewardList = self.view:getChildAutoType("allComboRewardList")
	self.txtQuestionIndex = self.view:getChildAutoType("txtQuestionIndex")
	self.txtQuestion = self.view:getChildAutoType("txtQuestion")
	self.txtQuestionProgress = self.view:getChildAutoType("txtQuestionProgress")

	self.answerList:setItemRenderer(function(index,obj)
		self:answerListRenderer(index,obj)
	end)

	self.currRewardList:setItemRenderer(function(index,obj)
		self:currRewardListRenderer(index,obj)
	end)

	self.allComboRewardList:setItemRenderer(function(index,obj)
		self:allComboRewardListRenderer(index,obj)
	end)

	self.view:getChildAutoType("n24"):setURL(PathConfiger.getBg("bg_shop.jpg"))
	self.view:getChildAutoType("n13"):setURL(PathConfiger.getPveStarTempleBG("answer_frame"))
	self:updateQuestion()
	self:updateAllComboRewardList()
end

function PveStarTempleAnswerView:_exit()
	self.currQuestionIndex = false
	self.currQuestionList = false
	self.areaID = false
	self.pos = false
	self.currAnswerID = false
end

function PveStarTempleAnswerView:updateQuestion()
	self.currQuestionIndex = ModelManager.PveStarTempleModel:getCurrQuestionIndex()
	self.currQuestionList = ModelManager.PveStarTempleModel:getCurrQuestionList()
	local questionData = DynamicConfigData.t_question[self.currQuestionList[self.currQuestionIndex].QuestionId]
	local rewardID = DynamicConfigData.t_PveStarTempleAnswerConfig[4]["reward"..self.currQuestionIndex]
	local showRewardID =  DynamicConfigData.t_PveStarTempleAnswerConfig[4]["showReward"..self.currQuestionIndex]
	local rewardData = DynamicConfigData.t_reward[rewardID]["item"..showRewardID]
	self.txtQuestion:setText(questionData.issue)
	self.txtQuestionProgress:setText(string.format("[color=#ffd76d]%s[/color]/%s",self.currQuestionIndex,#self.currQuestionList))
	self.answerList:setNumItems(4)
	self.currRewardList:setNumItems(#rewardData)
end

function PveStarTempleAnswerView:updateAllComboRewardList()
	local rewardID = DynamicConfigData.t_PveStarTempleAnswerConfig[4].otherReward
	local showRewardID =  DynamicConfigData.t_PveStarTempleAnswerConfig[4].showOtherReward
	local rewardData = DynamicConfigData.t_reward[rewardID]["item"..showRewardID]
	self.allComboRewardList:setNumItems(#rewardData)
end

function PveStarTempleAnswerView:answerListRenderer(index,obj)
	local questionData = DynamicConfigData.t_question[self.currQuestionList[self.currQuestionIndex].QuestionId]
	local answerID = index + 1
	local answer = nil
	if answerID == 1 then
		answer = questionData.opt1
	elseif answerID == 2 then
		answer = questionData.opt2
	elseif answerID == 3 then
		answer = questionData.opt3
	elseif answerID == 4 then
		answer = questionData.opt4
	end

	local stateIndex = 0
	if self.currAnswerID then
		print(999,"答案",self.currAnswerID,questionData.right)
		stateIndex = answerID == questionData.right and 1 or 2
	end
	obj:getController("answerState"):setSelectedIndex(stateIndex)
	obj:setTitle(answer)
	obj:addClickListener(function()
		self:onAnswerClick(answerID)
	end,1)
end

function PveStarTempleAnswerView:currRewardListRenderer(index,obj)
	local rewardID = DynamicConfigData.t_PveStarTempleAnswerConfig[4]["reward"..self.currQuestionIndex]
	local showRewardID =  DynamicConfigData.t_PveStarTempleAnswerConfig[4]["showReward"..self.currQuestionIndex]
	local rewardData = DynamicConfigData.t_reward[rewardID]["item"..showRewardID][index + 1]
	local itemCell = BindManager.bindItemCell(obj:getChildAutoType("itemCell"))
	itemCell:setNoFrame(true)
	itemCell:setData(rewardData.code,rewardData.amount,rewardData.type)
	itemCell:setAmount(0)
	obj:getChildAutoType("txtCount"):setText(rewardData.amount)
end

function PveStarTempleAnswerView:allComboRewardListRenderer(index,obj)
	local rewardID = DynamicConfigData.t_PveStarTempleAnswerConfig[4].otherReward
	local showRewardID =  DynamicConfigData.t_PveStarTempleAnswerConfig[4].showOtherReward
	local rewardData = DynamicConfigData.t_reward[rewardID]["item"..showRewardID][index + 1]
	local itemCell = BindManager.bindItemCell(obj)
	itemCell:setData(rewardData.code, rewardData.amount, rewardData.type)
end

function PveStarTempleAnswerView:onAnswerClick(answerID)
	if self.currAnswerID then
		return
	end

	local questionID = self.currQuestionList[self.currQuestionIndex].QuestionId
	self.currAnswerID = answerID
	self:updateQuestion()

	ModelManager.PveStarTempleModel:setCurrQuestionIndex(self.currQuestionIndex + 1)
	Dispatcher.dispatchEvent(EventType.PveStarTemple_EevntUse,{areaID = self.areaID,pos = self.pos,param1 = questionID,param2 = answerID})

	Scheduler.schedule(function()
		self.currAnswerID = false
		if not self.currQuestionIndex or (self.currQuestionIndex + 1 > #self.currQuestionList) then
			self:closeView()
			return
		end
		self:updateQuestion()
	end,1,1)
end


return PveStarTempleAnswerView