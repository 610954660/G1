--Name : PveStarTempleController.lua
--Author : generated by FairyGUI
--Date : 2020-7-27
--Desc : 

local PveStarTempleController = class("PveStarTempleController",Controller)

--开始玩法
function PveStarTempleController:PveStarTemple_Start()
   -- ModelManager.BattleModel:reInit()
    ModelManager.PveStarTempleModel:setAllCard(nil)
    ModelManager.BattleModel:requestHeroArrayList({configType = GameDef.BattleArrayType.Normal,index = nil},function()
        ModelManager.PveStarTempleModel:setAllCard(ModelManager.BattleModel:getCardsByCategorys({0}))
        --ModelManager.BattleModel:reInit()
        if #ModelManager.PveStarTempleModel:getHeroList() < 1 then
            ViewManager.open("PveStarTempleSelectView")
        else
            ViewManager.open("PveStarTempleMainView")
        end
    end)
end

--C2S--
--获取属性
function PveStarTempleController:PveStarTemple_GetAttr(name)
    RPCReq.PveStarTemple_GetAttr({},function(data)
        printTable(999,"属性加成",data)
        ModelManager.PveStarTempleModel:setAttrList(data.attrs)
        ViewManager.open("PveStarTempleBuffView")
    end)
end

--设置自动拾取物品
function PveStarTempleController:PveStarTemple_SetAutoItem(name,value)
    RPCReq.PveStarTemple_SetAutoItem({auto = value},function(data)
        printTable(999,"自动拾取",data)
        ModelManager.PveStarTempleModel:setAuto(data.auto)
    end)
end

--设置上阵英雄的信息
function PveStarTempleController:PveStarTemple_SetArrayHeroInfo(name,heroList)
    printTable(999,"上阵",heroList)
    RPCReq.PveStarTemple_SetArrayHeroInfo({uuidList = heroList})
end

--扫荡
function PveStarTempleController:PveStarTemple_Sweep(name)
    RPCReq.PveStarTemple_Sweep({},function(data)
        print(999,data.sweep)
        if ViewManager.isShow("PveStarTempleMainView") then
            ViewManager.call("PveStarTempleMainView","handleAuto")
        end
    end)
end

--事件使用
function PveStarTempleController:PveStarTemple_EevntUse(name,args)
    printTable(999,"事件使用",args)
    RPCReq.PveStarTemple_EevntUse({areaId = args.areaID,pos = args.pos,parame1 = args.param1,parame2 = args.param2})
end

--发起战斗
function PveStarTempleController:PveStarTemple_Battle(name,args)
    printTable(999,"发起战斗",args)

    local starTempleGamePlay = GameDef.BattleArrayType.PveStarTemple
    local arrayList = {}
	arrayList[args.heroData.uuid] = {uuid = args.heroData.uuid,id = 11}
    ModelManager.BattleModel:requestBattleArrays(starTempleGamePlay,arrayList,function()	
		local function battleHandler(eventName)
				if eventName == "begin" then
					ModelManager.BattleModel:setBattleConfig({heroNum = 1,category=0,index = args.fightID,fightID = args.fightID,configType = starTempleGamePlay})
					RPCReq.PveStarTemple_Battle({areaId = args.areaID},function(data)
							printTable(086,"战斗结果",data)
							if data.bttleResult==false then
								if PveStarTempleModel:getBattleFlag() then
									RollTips.show("挑战失败")
								end
							end
					end)
					ViewManager.close("PveStarTempleFightView")
				elseif eventName == "end" then
					self:onBattle(eventName)
				end
		end
		Dispatcher.dispatchEvent(EventType.battle_requestFunc,battleHandler,{configType=GameDef.BattleArrayType.PveStarTemple})
    end)
end

--战斗结束
function PveStarTempleController:onBattle(name)
    if name == "end" and ViewManager.isShow("PveStarTempleMainView") then
        ViewManager.call("PveStarTempleMainView","handleAuto")
    end
end

--领取任务奖励
function PveStarTempleController:PveStarTemple_ReceiveTaskReward(name,args)
    printTable(999,"领取任务奖励",args)
    RPCReq.PveStarTemple_ReceiveTaskReward({taskType = args.taskType,taskId = args.taskID},function(data)
        ModelManager.PveStarTempleModel:updateTaskHasGet(args.taskType,data.taskId)
        if ViewManager.isShow("PveStarTempleTaskView") then
            ViewManager.call("PveStarTempleTaskView", "updateTaskList")
        end
    end)
end

--下一层
function PveStarTempleController:PveStarTemple_NextLayer()
    RPCReq.PveStarTemple_NextLayer({},function(data)
        ModelManager.PveStarTempleModel:setLayer(data.layer)
        ModelManager.PveStarTempleModel:setMaxLayer(data.maxLayer)
        ModelManager.PveStarTempleModel:setAreaList({})
        ModelManager.PveStarTempleModel:setMysteryShop({})
        ModelManager.PveStarTempleModel:setMonsterList(nil)
		if ViewManager.isShow("PveStarTempleMainView") then
			ViewManager.call("PveStarTempleMainView", "updateAreaList")
			ViewManager.call("PveStarTempleMainView", "updateSweep")
			ViewManager.call("PveStarTempleMainView", "updateLevel")
		end
    end)
end

--使用道具
function PveStarTempleController:PveStarTemple_ItemUse(name,args)
    printTable(999,"使用物品",args)
    RPCReq.Bag_UseItem({itemId = args.itemID,amount = args.amount,bagType = GameDef.BagType.PveStarTemple,ex = args.ex,strEx = args.strEx},function(res)
        if ViewManager.isShow("PveStarTempleAcidView") then
            ViewManager.call("PveStarTempleAcidView", "updateBossList")
            ViewManager.call("PveStarTempleAcidView", "updateItemCell")
        end

        if ViewManager.isShow("PveStarTempleMedcineView") then
            ViewManager.call("PveStarTempleMedcineView", "updateHeroList")
            ViewManager.call("PveStarTempleMedcineView", "updateItemCell")
        end

        if ViewManager.isShow("PveStarTempleMainView") then
            ViewManager.call("PveStarTempleMainView","handleAuto")
            ViewManager.call("PveStarTempleMainView","updateItemUseCount")
        end
    end)
end

--商店购买
function PveStarTempleController:PveStarTemple_BuyMall(name,uuid)
    printTable(999,"神秘商店购买",uuid)
    RPCReq.PveStarTemple_BuyMall({uuid = uuid})
end

--设置跳过战斗
function PveStarTempleController:PveStarTemple_SetBttleFlag(name,value)
    printTable(999,"设置跳过战斗",value)
    RPCReq.PveStarTemple_SetBttleFlag({battleFlag = value},function(data)
        printTable(999,"设置跳过战斗返回",data)
        ModelManager.PveStarTempleModel:setBattleFlag(data.battleFlag)
    end)
end

--获取使用道具次数
function PveStarTempleController:PveStarTemple_GetItemUseLimit(name,args)
    RPCReq.PveStarTemple_GetItemUseLimit({code = args.code},function(data)
        ModelManager.PveStarTempleModel:updateItemUseList(data)

        if not ViewManager.isShow("PveStarTempleMainView") then
            return
        end

        ViewManager.call("PveStarTempleMainView","updateItemUseCount")

        if args.index == 1 then
            ViewManager.open("PveStarTempleMedcineView")
        elseif args.index == 2 then
            ViewManager.open("PveStarTempleAcidView")
        elseif args.index == 3 then
            self:handleMysteryStore()
        end
    end)
end

--自动拾取物品
function PveStarTempleController:PveStarTemple_AutoItem(name,list)
    printTable(999,"自动拾取列表",list)
    RPCReq.PveStarTemple_AutoItem({list = list})
end

--打开神秘商店处理
function PveStarTempleController:handleMysteryStore()
    local itemCode = DynamicConfigData.t_PveStarTempleItemConfig[3][3].item[1].code
    local amount = ModelManager.PackModel:getItemsFromAllPackByCode(itemCode)
    local pack = ModelManager.PackModel:getPackByType(GameDef.BagType.PveStarTemple):getItemsByCode(itemCode)
    local useCount = ModelManager.PveStarTempleModel:getItemUseCount(itemCode)
    local useLimit = ModelManager.PveStarTempleModel:getItemUseLimit(itemCode)

    print(999,"神秘商店",itemCode,amount,useLimit,useCount)
    if amount < 1 then
        RollTips.show("数量不足")
        return
    end

    if useLimit - useCount < 1 then
        RollTips.show("使用次数不足")
        return
    end

    ModelManager.PveStarTempleModel:updateItemUseList({code = itemCode,count = useCount + 1})
    Dispatcher.dispatchEvent(EventType.PveStarTemple_ItemUse,{itemID = pack[1].__data.id,amount = 1})
end

--S2C--
--晨星会所1V1 PVE数据
function PveStarTempleController:PveStarTemple_SendPveStarTempleInfo(name,args)
   -- printTable(5656,"星辰圣所数据",args)
    ModelManager.PveStarTempleModel:setPveStarTempleData(args)
	PveStarTempleModel:setLayerReward(args.layerReward)
    if ViewManager.isShow("PveStarTempleMainView") then
        ViewManager.call("PveStarTempleMainView", "updateAuto")
        ViewManager.call("PveStarTempleMainView", "updateSweep")
        ViewManager.call("PveStarTempleMainView", "updateRoundTime")
        ViewManager.call("PveStarTempleMainView", "updateLevel")
        ViewManager.call("PveStarTempleMainView","updateItemUseCount")
    end
end

--事件完成或者领取结果
function PveStarTempleController:PveStarTemple_PostEventCompleteResults(name,args)
    printTable(086,"事件完成或领取结果",args)
    ModelManager.PveStarTempleModel:updateAreaEvent(args)
    if ViewManager.isShow("PveStarTempleMainView") then
        ViewManager.call("PveStarTempleMainView", "updateAreaList")
        ViewManager.call("PveStarTempleMainView","updateItemUseCount")
    end

    if args.event.eventType == ModelManager.PveStarTempleModel.PveStarTemple.Buff then
        self:handleBuff(args)
    end
end

--事件刷新
function PveStarTempleController:PveStarTemple_UpdatelayerMaster(name,args)
    printTable(086,"事件刷新",args)
	if PveStarTempleModel:getBattleFlag() then
		if args.layerArea.win then
			RollTips.show("挑战成功，区域已解锁")
		else
			RollTips.show("挑战失败")
		end
	end
    ModelManager.PveStarTempleModel:updateArea(args.layerArea)
    if ViewManager.isShow("PveStarTempleMainView") then
        ViewManager.call("PveStarTempleMainView", "updateAreaList")
       -- local battleFlag = ModelManager.PveStarTempleModel:getBattleFlag()
        if not FightManager.haveFight(GameDef.BattleArrayType.PveStarTemple) then
            ViewManager.call("PveStarTempleMainView","handleAuto")
        end
		--ViewManager.call("PveStarTempleMainView","handleAuto")
    end
end

--任务更新
function PveStarTempleController:PveStarTemple_UpdateTargetTask(name,args)
    printTable(999,"任务更新",args)
    ModelManager.PveStarTempleModel:updateTask(args.task)
    if ViewManager.isShow("PveStarTempleTaskView") then
        ViewManager.call("PveStarTempleTaskView", "updateTaskList")
    end
end

--发送上阵英雄
function PveStarTempleController:PveStarTemple_HeroData(name,args)
    printTable(999,"英雄数据更新",args)
    ModelManager.PveStarTempleModel:setHeroList(args.hero)
    if ViewManager.isShow("PveStarTempleMainView") then
        ViewManager.call("PveStarTempleMainView", "updateHeroList")
    end
end

--使用神秘商店
function PveStarTempleController:PveStarTemple_CallMallUseItem(name,args)
    print(999,"使用神秘商店返回")
    ModelManager.PveStarTempleModel:setMysteryShop(args.mall)
    for k,v in pairs(args.mall) do
        ModelManager.PveStarTempleModel:updateExploreShop(v)
    end
    RollTips.show("使用道具成功,商品已加入探索商店")
    ViewManager.open("PveStarTempleMysteryStoreView",{isMap = false})--探索商店PveStarTemple_ItemUse
end

--神秘商店回应
function PveStarTempleController:PveStarTemple_PostSingleMallData(name,args)
    printTable(999,"神秘商店返回",args)
    ModelManager.PveStarTempleModel:updateMysteryShop(args.mall)
    ModelManager.PveStarTempleModel:updateExploreShop(args.mall)

    if ViewManager.isShow("PveStarTempleMysteryStoreView") then
        ViewManager.call("PveStarTempleMysteryStoreView", "updateItemList")
    end

    if ViewManager.isShow("PveStarTempleExploreStoreView") then
        ViewManager.call("PveStarTempleExploreStoreView", "updateItemList")
    end
end

--层级所有奖励
function PveStarTempleController:PveStarTemple_LayerAllReward(name,args)
    --printTable(5656,"层级奖励",args)
    local rewards = {}
    if args.layerReward then
        for k,v in ipairs(args.layerReward) do
            local hasFind = false
            for k2,v2 in ipairs(rewards) do
                if v2.code == v.code then
                    v2.amount = v2.amount + v.amount
                    hasFind = true
                    break
                end
            end

            if not hasFind then
                table.insert(rewards,v)
            end
        end
    end
	PveStarTempleModel:setLayerReward(args.layerReward)
    --ViewManager.open("PveStarTempleRewardView", {rewardDatas = rewards})
	
	
	
end

--英雄或boss的血量
function PveStarTempleController:PveStarTemple_PostUpLayerHeroAndMonsterHp(name,args)
    printTable(999,"推送boss或英雄",args)
    if args.hero then
        ModelManager.PveStarTempleModel:updateHero(args.hero)
        if ViewManager.isShow("PveStarTempleMainView") then
            ViewManager.call("PveStarTempleMainView", "updateHeroList")
        end
    end

    if args.monster then
        ModelManager.PveStarTempleModel:updateMonster(args.monster)
    end
end

--重置玩法
function PveStarTempleController:PveStarTemple_Reset(name)
    ModelManager.PveStarTempleModel:setAreaList({})
    ModelManager.PveStarTempleModel:setMysteryShop({})
    ModelManager.PveStarTempleModel:setHeroList({})
    ModelManager.PveStarTempleModel:setMonsterList(nil)
    ModelManager.PveStarTempleModel:setTaskList({})
    ModelManager.PveStarTempleModel:setItemUseList(nil)
    ModelManager.PveStarTempleModel:setExploreShop({})
    ModelManager.PveStarTempleModel:setCurrQuestionList({})

    if ViewManager.isShow("PveStarTempleMainView") then
        local info = {
            text="玩法已重置，请重新进入",
            type = "ok",
            noClose = "yes",
            onOk= function()
                ViewManager.close("PveStarTempleMainView")
            end,
        }
        Alert.show(info)
    end
end

--物品奖励事件
function PveStarTempleController:PveStarTemple_PostEventTypeReward(name,args)
    printTable(5656,"奖励物品推送",args)
    if args.reward and next(args.reward) then
        ViewManager.open("AwardShowView",args)
    end
end

--自动拾取获得飘字提示
function PveStarTempleController:PveStarTemple_HandleAutoItem(name,args)
	PveStarTempleModel:addLayerReward(args.reward)
    --if not ModelManager.PveStarTempleModel:getAuto() then
        --return
    --end
    --printTable(5656,"奖励数据",args.reward)
    RollTips.showTipsGetRewardList(args.reward)
    -- local msgList = {}
    -- for i,v in ipairs(args.reward) do

    --     local itemConfig = ItemConfiger.getInfoByCode(v.code, v.type)
    --     local str = ""
    --     if v.type == 3 then
    --         str = string.format("获得%s%s个",itemConfig.name,v.amount)
    --     else
    --         str = string.format("获得%s%s",itemConfig.name,v.amount)
    --     end
    --     table.insert(msgList,str)
    -- end

    -- if #msgList > 0 then
    --     RollTips.showTipsList(msgList)
    -- end
end

--buff获得飘字提示
function PveStarTempleController:handleBuff(args)
    local config = ModelManager.PveStarTempleModel:getEventConfig(args.event.eventType,args.event.eventId).buffId[1]
    local combat = DynamicConfigData.t_combat[config.code]
    local symbol = config.value >= 0 and "+" or ""
    RollTips.show(string.format("获得%s%s%s%%加成",combat.name,symbol,config.value/100))
end

function PveStarTempleController:player_levelUp()
    ModelManager.PveStarTempleModel:setRedPoint()
end

return PveStarTempleController