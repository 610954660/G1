--Name : PveStarTempleMainView.lua
--Author : generated by FairyGUI
--Date : 2020-7-27
--Desc : 

local PveStarTempleMainView,Super = class("PveStarTempleMainView", Window)
local starTempleArea = require("Game.Modules.PveStarTemple.PveStarTempleArea")

local areaConfig =
{
	{count = 5,bossIndex = 4},
	{count = 5,bossIndex = 3},
	{count = 5,bossIndex = 3},
	{count = 5,bossIndex = 2},
	{count = 8,bossIndex = 8},
}

function PveStarTempleMainView:ctor()
	--LuaLog("PveStarTempleMainView ctor")
	self._packName = "PveStarTemple"
	self._compName = "PveStarTempleMainView"
	self._rootDepth = LayerDepth.Window
	self.heroData = false
	self.areaData = false
	self.itemData = false
	self.roundTime = false
	self.timer = false
	self.areaList = {}
	self.oneKeyChallege=false
	self.fightpower=false
	self.openValue=false
	self.currSelectHeroIndex=false
	self.currSelectUuid=false
end

function PveStarTempleMainView:_initEvent( )
	
end

function PveStarTempleMainView:_initVM( )
	local vmRoot = self
	local viewNode = self.view
	---Do not modify following code--------
	--{vmFields}:Tower.PveStarTempleMainView
		--{vmFieldsEnd}:Tower.PveStarTempleMainView
	--Do not modify above code-------------
end

function PveStarTempleMainView:_initUI( )
	self:_initVM()
	self.heroList = self.view:getChildAutoType("heroList")
	self.txtTime = self.view:getChildAutoType("txtTime")
	self.txtLevel = self.view:getChildAutoType("txtLevel")
	self.btnAttrAdd = self.view:getChildAutoType("btnAttrAdd")
	self.btnMedicine = self.view:getChildAutoType("btnMedicine")
	self.btnMysteryStore = self.view:getChildAutoType("btnMysteryStore")
	self.btnExploreStore = self.view:getChildAutoType("btnExploreStore")
	self.btnAcid = self.view:getChildAutoType("btnAcid")
	self.btnTargetReward = self.view:getChildAutoType("btnTargetReward")
	self.btnRank = self.view:getChildAutoType("btnRank")
	self.btnAuto = self.view:getChildAutoType("btnAuto")
	self.btnSweep = self.view:getChildAutoType("btnSweep")
	self.oneKeyChallege = self.view:getChildAutoType("oneKeyChallege")
	self.fightpower=self.view:getChildAutoType("fightpower")
	self.openValue=self.view:getChildAutoType("openValue")
	local boardObje=self.view:getChildAutoType("rewardBoard")
	self.rewardBoard = BindManager.bindRewardRecordBoard(boardObje)
	self.rewardBoard:setData(PveStarTempleModel.layerReward)

	
	
	
	self.btnHelp = self.view:getChildAutoType("btnHelp")

	for i = 1,5 do
		table.insert(self.areaList,starTempleArea.new({index = i,obj = self.view:getChildAutoType("area"..i),config = areaConfig[i]}))
	end

	self.btnAttrAdd:addClickListener(function ()
		self:onBtnAttrAddClick()
	end,1)

	self.btnMedicine:addClickListener(function ()
		self:onBtnMedicineClick()
	end,1)

	self.btnMysteryStore:addClickListener(function ()
		self:onBtnMysteryStoreClick()
	end,1)

	self.btnExploreStore:addClickListener(function ()
		self:onBtnExploreStoreClick()
	end,1)

	self.btnAcid:addClickListener(function ()
		self:onBtnAcidClick()
	end,1)

	self.btnTargetReward:addClickListener(function ()
		self:onBtnTargetRewardClick()
	end,1)

	self.btnRank:addClickListener(function ()
		self:onBtnRankClick()
	end,1)

	self.btnAuto:addClickListener(function()
		self:onBtnAutoClick()
	end,1)

	self.btnSweep:addClickListener(function()
		self:onBtnSweepClick()
	end,1)

	self.btnHelp:addClickListener(function()
		self:onBtnHelpClick()
	end,1)

	self.heroList:setItemRenderer(function(index,obj)
		self:heroListRenderer(index,obj)
	end)
	
	
	
	
	self.oneKeyChallege:addClickListener(function()		
			local starTempleGamePlay = GameDef.BattleArrayType.PveStarTemple
			local arrayList = {}
			arrayList[self.currSelectUuid] = {uuid = self.currSelectUuid,id = 11}
			ModelManager.BattleModel:requestBattleArrays(starTempleGamePlay,arrayList,function()

					local info={

					}
					local function success(data)
						print(086,data,"datadata")
					end
					RPCReq.PveStarTemple_LayerAllBattle(info,success)

			end)

	end)


	self.view:getChildAutoType("n49"):setURL(PathConfiger.getBg("pveStarTemplebg1.jpg"))

	self:updateAreaList()
    self:updateHeroList()
	self:updateAuto()
	self:updateSweep()
	self:updateRoundTime()
	self:updateLevel()
	self:updateItemUseCount()
	
	self.fightpower:setText(StringUtil.transValue(PveStarTempleModel:getAllcombat()))
	

	RedManager.register("V_PVESTARTEMPLE_TASK", self.btnTargetReward:getChildAutoType("imgRedPoint"))
	self:handleAuto()
end


function PveStarTempleMainView:PveStarTemple_updateLayerReward()
	self.rewardBoard:setData(PveStarTempleModel.layerReward)
end



function PveStarTempleMainView:_exit()
	for i = 1,5 do
		self.areaList[i]:clear()
	end

	if self.timer then
		TimeLib.clearCountDown(self.timer)
	end

	self.timer = false
	self.heroData = false
	self.areaData = false
	self.itemData = false
	self.areaList = false
end

function PveStarTempleMainView:updateItemUseCount()
	for k,v in pairs(DynamicConfigData.t_PveStarTempleItemConfig[3]) do
		if k == 2 or k == 3 then
			local itemCode = v.item[1].code
			local amount = ModelManager.PackModel:getItemsFromAllPackByCode(itemCode)

			if k == 2 then
				self.btnAcid:getChildAutoType("txtCount"):setText(amount)
			elseif k == 3 then
				self.btnMysteryStore:getChildAutoType("txtCount"):setText(amount)
			end
		end
	end
end


function PveStarTempleMainView:updateAreaList()
	print(5656,"updateAreaList  call")
	self.areaData = PveStarTempleModel:getAreaList()
	for i = 1,#areaConfig do
		print(5656,"updateAreaList  call 2")
		self.areaList[i]:updateData(self.areaData[i] or {},ModelManager.PveStarTempleModel:getLayer())
	end
end




function PveStarTempleMainView:updateAuto()
	self.btnAuto:setSelected(ModelManager.PveStarTempleModel:getAuto())
end

function PveStarTempleMainView:updateSweep()
	self.btnSweep:setVisible(ModelManager.PveStarTempleModel:canSweep())
	local areaData = DynamicConfigData.t_PveStarTemplePartConfig[PveStarTempleModel:getLayer()][1]
	self.oneKeyChallege:setVisible(not ModelManager.PveStarTempleModel:canSweep())
	self.openValue:setVisible(not ModelManager.PveStarTempleModel:canSweep())
	
	
	if PveStarTempleModel:getAllcombat()>=areaData.power or VipModel.level>= areaData.vip then
		self.oneKeyChallege:setGrayed(false)
	else
		self.oneKeyChallege:setGrayed(true)
	end
	local openText=""
	if areaData.power>0 then
	
		openText= string.format(Desc.PveStarTemple_combat,ColorUtil.formatColorString1(StringUtil.transValue(areaData.power), "#ffda47"))
	end
	if areaData.vip>0 then
		openText=openText..string.format(Desc.PveStarTemple_orVip,ColorUtil.formatColorString1("VIP"..areaData.vip, "#ffda47"))
	end

	self.openValue:setText(openText)
	
end

function PveStarTempleMainView:updatOne()
	self.btnSweep:setVisible(ModelManager.PveStarTempleModel:canSweep())
end


function PveStarTempleMainView:updateRoundTime()
	self.roundTime = (ModelManager.PveStarTempleModel:getRoundTime() - ModelManager.ServerTimeModel:getServerTimeMS()/1000)
	self.txtTime:setText(TimeLib.GetTimeFormatDay1(self.roundTime))

	if self.timer then
		TimeLib.clearCountDown(self.timer)
	end

	self.timer = TimeLib.newCountDown(self.roundTime,function(time)
		self:onCountDown(time)
	end, nil, false, false,false)
end

function PveStarTempleMainView:onCountDown(time)
	if tolua.isnull(self.txtTime) then return end
	self.txtTime:setText(TimeLib.GetTimeFormatDay1(time))
end

function PveStarTempleMainView:updateLevel()
	self.txtLevel:setText(ModelManager.PveStarTempleModel:getLayer())
end


function PveStarTempleMainView:updateHeroList()

	self.heroData= {}
	for k,v in pairs(ModelManager.PveStarTempleModel:getHeroList(true)) do
		table.insert(self.heroData,v)
	end
	table.sort(self.heroData,function (a,b)
			return a.combat > b.combat
	end)
	
	self.currSelectHeroIndex=PveStarTempleModel:getSelectHeroIndex()
	local heroInfo=self.heroData[self.currSelectHeroIndex]
	if heroInfo and heroInfo.hp<=0 then
		for i,v in ipairs(self.heroData) do
			if v.hp > 0 then
				self.currSelectHeroIndex = i
				PveStarTempleModel:setSelectHeroIndex(self.currSelectHeroIndex)
				heroInfo=self.heroData[self.currSelectHeroIndex]
				break
			end
		end
	end
	if heroInfo then
		self.currSelectUuid=heroInfo.uuid	
	end
	self.heroList:setNumItems(#self.heroData)
end



function PveStarTempleMainView:heroListRenderer(index,obj)
	

		
	print(086,self.currSelectHeroIndex,"heroListRenderer")
		
	local heroCell = BindManager.bindHeroCell(obj)
	heroCell:setData(self.heroData[index + 1])
	local isSelect = self.currSelectHeroIndex == index + 1
	obj:addEventListener(FUIEventType.Click,function (context)
			self:onHeroClick(index+1)
	end,1)
	obj:getController("state"):setSelectedPage(isSelect and "on" or "out")
end


function PveStarTempleMainView:onHeroClick(index)
	if self.heroData[index].hp <= 0 then
		RollTips.show(DescAuto[206]) -- [206]="阵亡英雄无法上阵"
		return
	end
	if self.currSelectHeroIndex ~= index then
		self.currSelectHeroIndex = index
		PveStarTempleModel:setSelectHeroIndex(self.currSelectHeroIndex)
		self:updateHeroList()
	end
end



function PveStarTempleMainView:onBtnAttrAddClick()
	Dispatcher.dispatchEvent(EventType.PveStarTemple_GetAttr)
end

function PveStarTempleMainView:onBtnMedicineClick()
	local isAllHeroDead = ModelManager.PveStarTempleModel:isAllHeroDead()

	if isAllHeroDead then
		RollTips.show(DescAuto[207]) -- [207]="已无可战斗探员"
		return
	end

	local heroList = ModelManager.PveStarTempleModel:getHPNotMaxHeroList()

	if #heroList < 1 then
		RollTips.show(DescAuto[208]) -- [208]="当前已无受伤探员"
		return
	end

	self:onItemClick(1)
end

function PveStarTempleMainView:onBtnMysteryStoreClick()
	self:onItemClick(3)
end

function PveStarTempleMainView:onBtnExploreStoreClick()
	self:onItemClick(4)
end

function PveStarTempleMainView:onBtnAcidClick()
	self:onItemClick(2)
end

function PveStarTempleMainView:onBtnTargetRewardClick()
	ViewManager.open("PveStarTempleTaskView")
end

function PveStarTempleMainView:onBtnRankClick()
	ViewManager.open("PublicRankView",{type = GameDef.RankType.PveStarTemple})
end

function PveStarTempleMainView:onBtnAutoClick()
	local isSelected = self.btnAuto:isSelected()
	ModelManager.PveStarTempleModel:setAuto(isSelected)
	self:handleAuto()
	Dispatcher.dispatchEvent(EventType.PveStarTemple_SetAutoItem,isSelected)
end

function PveStarTempleMainView:onBtnSweepClick()
	local hasSweep = ModelManager.PveStarTempleModel:hasSweep()
	if hasSweep then
		RollTips.show(DescAuto[209]) -- [209]="本层已扫荡过"
		return
	end
	Dispatcher.dispatchEvent(EventType.PveStarTemple_Sweep)
end

function PveStarTempleMainView:onBtnHelpClick()
	local info={}
	info['title'] = Desc["help_StrTitle72"]
	info['desc'] = Desc["help_StrDesc72"]
	ViewManager.open("GetPublicHelpView",info)
end

function PveStarTempleMainView:onItemClick(index)
	if index == 1 or index == 2 or index == 3 then
		local itemCode = DynamicConfigData.t_PveStarTempleItemConfig[3][index].item[1].code
		Dispatcher.dispatchEvent(EventType.PveStarTemple_GetItemUseLimit,{code = itemCode,index = index})
	elseif index == 4 then
		ViewManager.open("PveStarTempleExploreStoreView")--探索商店
	end
end

function PveStarTempleMainView:handleAuto()
	local isAuto = ModelManager.PveStarTempleModel:getAuto()
	if not isAuto then
		return
	end

	local list = {}
	for i = 1, #areaConfig do
		local infos = self.areaList[i]:handleAuto()
		for j = 1,#infos do
			table.insert(list,infos[j])
		end
	end
	Dispatcher.dispatchEvent("PveStarTemple_AutoItem",list)
end

return PveStarTempleMainView
