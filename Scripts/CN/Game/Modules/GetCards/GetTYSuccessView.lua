--Name : GetTYSuccessView.lua
--Author : generated by FairyGUI
--Date : 2020-6-19
--Desc : 

local GetTYSuccessView,Super = class("GetTYSuccessView", Window)
local ItemCell = require "Game.UI.Global.ItemCell"
function GetTYSuccessView:ctor()
	--LuaLog("GetTYSuccessView ctor")
	self._packName = "GetCards"
	self._compName = "GetTYSuccessView"
    self.resultList = self._args.resultList
    self.cost = self._args.cost
	self.id = self._args.id
	self.xhType = self._args.xhType
	self.activityId = self._args.activityId
	self._rootDepth = LayerDepth.PopWindow
	self.schedulerArr = {}
	self.spine1 = false
    --测试数据
    -- self.resultList = {}
    -- self.resultList[1] = {amount=1,resultType=0,code=53002,type=4,status=0}
end

function GetTYSuccessView:_initEvent( )
	self.view:getChildAutoType("blackbg1"):addClickListener(function()
		if self.view:getController("showCtrl"):getSelectedIndex() == 0 then
			self:closeSpine()
			self:updateWindow()
		else
			self:closeView()
		end
	end)
end

function GetTYSuccessView:_initVM( )
	local vmRoot = self
	local viewNode = self.view
	---Do not modify following code--------
	--{vmFields}:GetCards.GetTYSuccessView
		vmRoot.spineParent = viewNode:getChildAutoType("spineParent")--graph
		vmRoot.spineParent2 = viewNode:getChildAutoType("spineParent2")--graph
		vmRoot.awardList = viewNode:getChildAutoType("awardList")--list
		vmRoot.btn_again = viewNode:getChildAutoType("btn_again")--Button
		vmRoot.costItem = viewNode:getChildAutoType("costItem")--
		vmRoot.btn_confirm = viewNode:getChildAutoType("btn_confirm")--Button
	--{vmFieldsEnd}:GetCards.GetTYSuccessView
	--Do not modify above code-------------
end

function GetTYSuccessView:_initUI( )
	self:_initVM()
	self.textLoader = self.view:getChildAutoType("textLoader")
    self.costItemObj = BindManager.bindCostItem(self.costItem)
    self.costItemObj:setDarkBg(true)
    self.costItemObj:setData(self.cost[1].type, self.cost[1].code, self.cost[1].amount,true, false, false)
    self.canClickFlag = true
    --再次抽卡
	self.btn_again:addClickListener(function ( ... )
		if (not self.xhType) then 
			if not ModelManager.PlayerModel:isCostEnough(self.cost, true) then
				return
			end
			if not self.canClickFlag then
				return
			end
			self.canClickFlag = false
			local params = {}
			params.id = self.id
			params.onSuccess = function (res )
				 --printTable(1,"服务器返回",res)
				if tolua.isnull(self.view) then return end
				self.resultList = res.resultList
				self:aginSuceessUpdate()
				Dispatcher.dispatchEvent(EventType.update_getCardsView)
			end
			if CardLibModel:isBagFull(1) then 
				RollTips.show(Desc.getCard_bagFull)
				return 
			end
			RPCReq.HeroLottery_LuckyDraw(params, params.onSuccess)
			return
		elseif self.xhType == 1 then --使用道具 道具不足后可能切换钻石
			if not ModelManager.PlayerModel:isCostEnough(self.cost, true) then
				return
			end
			if not self.canClickFlag then
				return
			end
			self.canClickFlag = false
			
			local params = {}
			params.id = self.id
			params.activityId = self.activityId
			params.onSuccess = function (res )
				 --printTable(1,"服务器返回",res)
				if tolua.isnull(self.view) then return end
				local data = {}
				 self.resultList = res.resultList
				 local num = PackModel:getItemsFromAllPackByCode(self.cost[1].code)
				if num-self.cost[1].amount>=0 then --还是道具
					data.id = self.id
			    	data.xhType = 1
					data.cost = self.cost
				else --使用后道具不足
					if self.id == 50 then  --仙魔
						data.id = 52
						data.xhType = 2
						data.cost = DynamicConfigData.t_heroLottery[52].cost --钻石消耗
					elseif self.id == 51 then  --仙魔
						data.id = 53
						data.xhType = 2
						data.cost = DynamicConfigData.t_heroLottery[53].cost --钻石消耗
					elseif self.id == 60 then  --异界
						data.id = 62
						data.xhType = 2
						data.cost = DynamicConfigData.t_heroLottery[62].cost --钻石消耗
					elseif self.id == 61 then  --异界
						data.id = 63
						data.xhType = 2
						data.cost = DynamicConfigData.t_heroLottery[63].cost --钻石消耗
					-- elseif self.id == 70 then   --精英
					-- 	data.id = 72
					-- 	data.xhType = 2
					-- 	data.cost = DynamicConfigData.t_heroLottery[72].cost --钻石消耗
					-- elseif self.id == 71 then  --精英
					-- 	data.id = 73
					-- 	data.xhType = 2
					-- 	data.cost = DynamicConfigData.t_heroLottery[73].cost --钻石消耗
					-- elseif self.id == 80 then   --魔王降临 异界召唤2
					-- 	data.id = 82
					-- 	data.xhType = 2
					-- 	data.cost = DynamicConfigData.t_heroLottery[72].cost --钻石消耗
					-- elseif self.id == 81 then  --魔王降临 异界召唤2
					-- 	data.id = 83
					-- 	data.xhType = 2
					-- 	data.cost = DynamicConfigData.t_heroLottery[73].cost --钻石消耗
					end
				end
				self:aginSuceessUpdate(data)
				Dispatcher.dispatchEvent(EventType.update_getCardsView)
			 end
			if CardLibModel:isBagFull(1) then 
				RollTips.show(Desc.getCard_bagFull)
				return 
			end
			 RPCReq.HeroLottery_ActivityDraw(params, params.onSuccess)
		elseif self.xhType == 2 then
			if not ModelManager.PlayerModel:isCostEnough(self.cost, true) then
				return
			end
			if not self.canClickFlag then
				return
			end
			self.canClickFlag = false
			local info = {
				text=string.format(Desc.getCard_6,self.cost[1].amount,1000,DynamicConfigData.t_heroLottery[self.id].count),
				type="yes_no",
			}
			if CardLibModel:isBagFull(DynamicConfigData.t_heroLottery[self.id].count) then 
				RollTips.show(Desc.getCard_bagFull)
				return 
			end
			info.onYes = function()
				local num = PackModel:getItemsFromAllPackByCode(self.cost[1].code)
				local params = {}
				params.id = self.id
				params.activityId = self.activityId
				params.onSuccess = function (res )
					 --printTable(1,"服务器返回",res)
					if tolua.isnull(self.view) then return end
					local data = {}
					 self.resultList = res.resultList
					 if num-self.cost[1].amount>=self.cost[1].amount then
						data.id = self.id
						data.xhType = 2
						data.cost = self.cost
					 end
					 self:aginSuceessUpdate(data)
					 Dispatcher.dispatchEvent(EventType.update_getCardsView)
				 end
				
				 RPCReq.HeroLottery_ActivityDraw(params, params.onSuccess)
			end
			info.onNo = function(res)
				self.canClickFlag = true
			end
			Alert.show(info);
		end
	end)

	self.btn_confirm:addClickListener(function( ... )
   	  	ViewManager.close("GetTYSuccessView")
    end)
    
	self.awardList:setItemRenderer(function(index,obj)
		if self.schedulerArr[index] then
        	Scheduler.unschedule(self.schedulerArr[index])
        	self.schedulerArr[index] = false
        end
        local interTime = 1/#self.resultList
        if interTime >= 0.1 then
        	interTime = 0.1
		end

		if (not obj.playedAnim) then
			obj:setVisible(false)
			self.schedulerArr[index] = Scheduler.scheduleOnce(index*interTime, function( ... )
        	    if obj and  (not tolua.isnull(obj)) then
        	    	obj:setVisible(true)
        	    	if obj:getTransition("t0") then
        	    		obj:getTransition("t0"):play(function( ... )
		        			    local spine =  SpineUtil.createSpineObj(obj, vertex2(obj:getWidth()/2,obj:getHeight()/2), "wuti_chuxian", "Spine/ui/jiesuan", "efx_jiesuan", "efx_jiesuan",false)
					    end);
        	    	end
        	    end
			end)
			-- obj.playedAnim = true;
		end

		local data = self.resultList[index+1];
		if self.resultList[index+1].type == GameDef.GameResType.Hero then
			local curData = self.resultList[index+1]
			local heroCell = BindManager.bindHeroCellShow(obj)
			local data = {}
			data.star = DynamicConfigData.t_hero[curData.code].heroStar
			data.category = DynamicConfigData.t_hero[curData.code].category
			data.code = curData.code
			data.level = 1
			heroCell:setData(data)
		elseif data.isEmblem then -- 纹章
			local spData = data.specialData and data.specialData.heraldry or false
			if (spData) then
				local c = DynamicConfigData.t_Emblem[spData.heraldryId]
				local d = {
					code = spData.heraldryId,
					category = spData.category,
					exp = spData.exp,
					star = spData.star,
					color = data.color,
					pos = c.pos
				}
				local itemCell = BindManager.bindEmblemCell(obj)
				-- itemCell:showFrame(true)
				-- itemCell:setIsBig(false)
				itemCell:setData(d)
				obj:addClickListener(function()
					itemCell:showItemTips()
				end)
			end
		else
			local itemData = ItemsUtil.createItemData({data = self.resultList[index+1]})
			local itemcell = BindManager.bindItemCell(obj)
			-- itemcell:setIsBig(false)
			itemcell:setItemData(itemData,CodeType.ITEM)
		end
	end)
	self.awardList:setVirtual()

	self.awardList:setItemProvider(
		function(index)
			if self.resultList[index+1].type == GameDef.GameResType.Hero then
				return "ui://hgm3oko8dp3dxcwwwm"
			elseif self.resultList[index+1].isEmblem then
				return "ui://hgm3oko8h32o2"--"ui://hgm3oko8gaxd1o"
			else
				return "ui://hgm3oko8o10na"
			end
		end
	)

   self:play_spine()

    -- self:updateWindow()
end

function GetTYSuccessView:play_spine( ... )
	self.view:getController("showCtrl"):setSelectedIndex(0)
	self.spineNode = SpineMnange.createSpineByName("Spine/ui/chouka/efx_zhaomu")
    self.spineParent:displayObject():addChild(self.spineNode)
    self.spineNode:setAnimation(0, "ui_teyizhaomu_up", false);
    self.spineNode:setCompleteListener(function(name)
			self.view:getController("showCtrl"):setSelectedIndex(1)
			self.canClickFlag = true
			self:updateWindow()
    end)
end

function GetTYSuccessView:closeSpine( ... )
	self.spineParent:displayObject():removeAllChildren()
	self.view:getController("showCtrl"):setSelectedIndex(1)
	self.canClickFlag = true
end

function GetTYSuccessView:aginSuceessUpdate(data)
	if data and data.id then
		self._args = data
		self.cost = self._args.cost
		self.id = self._args.id
		self.xhType = self._args.xhType
	end

	if tolua.isnull(self.view) then
		return
	end 
	
	self:play_spine()
	-- self:updateWindow()
end

function GetTYSuccessView:updateWindow(  )
	if self._args.type == GameDef.GamePlayType.ChaptersFastBattle or self._args.type == GameDef.GamePlayType.ChaptersHangUp then
		self.textLoader:setURL("UI/AwardShow/xingdongshouyi.png")
	elseif self._args.type == GameDef.GamePlayType.HeroChange then
		self.textLoader:setURL("UI/AwardShow/cailiaofanhui.png")
	else
		self.textLoader:setURL("UI/AwardShow/gongxihuode.png")
	end
	if not self.spine1 then
		local spine1 =  SpineUtil.createSpineObj(self.spineParent2, vertex2(self.spineParent:getWidth()/2,self.spineParent:getHeight()/2), "gongxihuode", "Spine/ui/jiesuan", "efx_jiesuan", "efx_jiesuan",false)
		spine1:setCompleteListener(function( name )
			spine1:setAnimation(0,"gongxihuode_loop",true)
		end)
		self.spine1 = spine1
	end
	-- printTable(1,"显示的数据：",self.resultList)
	local arr = EmblemModel:awardListResetEmblemData(self.resultList)
	self.resultList = {}
	local emblemConf = DynamicConfigData.t_Emblem
	for key, value in pairs(arr) do
		local configInfo=ItemConfiger.getInfoByCode(value.code,value.type)
		value["color"]=1
		if configInfo then
			value["color"]=configInfo.color
		end
		-- 纹章特殊处理
		if configInfo and configInfo.type == 28 then
			local spData = value.specialData and value.specialData.heraldry or false
			local id = spData and spData.heraldryId or false
			if id and emblemConf[id] then
				value["color"] = emblemConf[id].rank
				value["isEmblem"] = true
			end
		end
		table.insert( self.resultList, value)
	end
	self.awardList:setData(self.resultList)
	local heroList = {}
	for k,v in pairs(self.resultList) do
		if v.type == GameDef.GameResType.Hero then
			table.insert(heroList,v)
		end
	end

	if #heroList > 0 then
		local maxStar = 0
		local cardCode=0
		for k,v in pairs(heroList) do
			local  star = DynamicConfigData.t_hero[v.code].heroStar
			if maxStar < star then
				maxStar = star
				cardCode=v.code
			end
		end

		Dispatcher.dispatchEvent(EventType.event_getHighStarHero,maxStar,cardCode)
	end
	self.costItemObj:setData(self.cost[1].type, self.cost[1].code, self.cost[1].amount,true, false, false)
end

function GetTYSuccessView:_exit(  )
	for i,v in ipairs(self.schedulerArr) do
		if self.schedulerArr[i] then
        	Scheduler.unschedule(self.schedulerArr[i])
        	self.schedulerArr[i] = false
        end
	end
end

return GetTYSuccessView