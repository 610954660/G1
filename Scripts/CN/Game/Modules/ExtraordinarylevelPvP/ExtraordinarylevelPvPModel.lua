--Date :2020-12-23
--Author : generated by FairyGUI
--Desc :

local ExtraordinarylevelPvPModel = class("ExtraordinarylevelPvP", BaseModel)
local _defTemp = {
    GameDef.BattleArrayType.CrossSuperMundaneDefFirst,
    GameDef.BattleArrayType.CrossSuperMundaneDefTwo
}
local _ackTemp = {
    GameDef.BattleArrayType.CrossSuperMundaneAckFirst,
    GameDef.BattleArrayType.CrossSuperMundaneAckTwo
}
function ExtraordinarylevelPvPModel:ctor()
    self.ExtraordinarylevelMainInfo = {}
    --段位赛主界面数据
    self.myRank = 0
    self.curPVPType = 0
    self.curPVPModule = 0
    self.heroTempItems = {}
    self.severData = {}
    self._CrossPVPType = {
        _ack = 0,
        _def = 1
    }
    self.controller = {}
    self.needPlay = false
    self.battleRecord = {}
    self.recordIndex = 0
    self.matchType = 1
    --1常规赛2王者赛
    self:initListeners()
    self.wangzhezhizhengInfo = {}
    self.saijichuangqi = {}
    self.saijichuangqiPlayerInfo = {}
    self.listValue = {}
    self.battleResultInfo = {}
     --战斗结果数据
    self.danwaiRewardMap = {}
 --首通段位领取奖励列表
    self.isTimeWeehours=false--是否是凌晨11点半
end

function ExtraordinarylevelPvPModel:init()
end

function ExtraordinarylevelPvPModel:isExtraordinarylevelType(ArrayType)
    local isType = false
    if
        ArrayType == GameDef.BattleArrayType.CrossSuperMundaneAckFirst or
            ArrayType == GameDef.BattleArrayType.CrossSuperMundaneAckTwo or
            ArrayType == GameDef.BattleArrayType.CrossSuperMundaneDefFirst or
            ArrayType == GameDef.BattleArrayType.CrossSuperMundaneDefTwo
     then
        isType = true
    end
    return isType
end

function ExtraordinarylevelPvPModel:isExtraordinaryAckType(ArrayType)
    local isType = false
    if ArrayType == GameDef.BattleArrayType.CrossSuperMundaneAckFirst or
        ArrayType == GameDef.BattleArrayType.CrossSuperMundaneAckTwo 
     then
        isType = true
    end
    return isType
end


function ExtraordinarylevelPvPModel:setMatchType(type)
    self.matchType = type
end

function ExtraordinarylevelPvPModel:getMatchType()
    return self.matchType
end

function ExtraordinarylevelPvPModel:setSeasonNotify(data)
    self.severData = next(data) and data or {}
    if data.dan then
        self.ExtraordinarylevelMainInfo = data
    end
    if data and data.danReward then
        for key, value in pairs(data.danReward) do
            if value.receive==false then
                self.danwaiRewardMap[key] = true
            end
        end
        Dispatcher.dispatchEvent(EventType.extraordinarylevelPvP_shoutongduanweijiangli)
    end
    Dispatcher.dispatchEvent(EventType.extraordinarylevelPvP_mainInfo)
    self:setDuanweiRewardRed()--手达奖励
    self:setDuanweiRewardRed()--首通红点
end
function ExtraordinarylevelPvPModel:getSeverData()
    return self.severData
end

function ExtraordinarylevelPvPModel:getMainSubInfo(fun)
    -- self:getSysSeasonInfo()
   -- self:getAllDanReward()
    self:weehoursRed()
    self:reqGetMyRanks(
        function(rank)
            local data = {}
            local remainTimes, maxTime = MaterialCopyModel:getRemainTumes(GameDef.GamePlayType.CrossSuperMundane)
            data.dayTimes = remainTimes
            if next(self.severData) then
                data.seasonTime = (self.severData.endTime) - ServerTimeModel:getServerTime()
            else
                data.seasonTime = 0
            end
            if rank == 0 then
                data.rank = Desc.Rank_notInRank
            elseif rank > 999 then
                data.rank = "999+"
            else
                data.rank = rank
            end
            data.red = "M_EXTRAODINARYRED"
            data.moduleId = ModuleId.ExtraordinarylevelMain.id
            fun(data)
        end
    )
end

function ExtraordinarylevelPvPModel:reqGetMyRanks(func)
    RPCReq.CrossSuperMundane_GetRank(
        {type = 1},
        function(data)
            printTable(33, "Rank_GetMyRankData call", data)
            self.myRank = 0
            if data and data.record then
                for i = 1, #data.record, 1 do
                    local rankItem = data.record[i]
                    if rankItem.playerId == PlayerModel.userid then
                        self.myRank = i
                    end
                end
            end
            if func then
                func(self.myRank)
            end
        end
    )
end

function ExtraordinarylevelPvPModel:weehoursRed()--凌晨11点半的红点显示
        local remineTime = TimeLib.getDayResidueSecond()
        if remineTime <= 60 * 30 then
            self.isTimeWeehours=true
        else
            self.isTimeWeehours=false
        end
        MaterialCopyModel:setExtraordRed()--副本次数
end


function ExtraordinarylevelPvPModel:getMainInfo()
    return self.ExtraordinarylevelMainInfo or {}
end

function ExtraordinarylevelPvPModel:getRobotInfo(playerId, config)
    local conf = config[playerId]
    local data = false
    if (conf) then
        -- 基本信息
        local baseInfo = {
            head = conf.head,
            level = conf.level,
            name = conf.name,
            playerId = playerId,
            score = conf.score,
            sex = conf.sex
        }
        -- 队伍信息
        local arrayInfo = {}
        local fightConf = DynamicConfigData.t_fight
        for _, fightId in pairs(conf.fightId) do
            local c = fightConf[fightId]
            if (c) then
                local combat = c.monstercombat
                local heroInfos = {}
                for _, posIndex in pairs(c.monsterStand) do
                    local d = {
                        code = c["monsterId" .. posIndex],
                        level = c["level" .. posIndex],
                        star = c["star" .. posIndex],
                        type = 2
                    }
                    if posIndex < 4 then
                        d.id = 10 + posIndex
                    elseif posIndex < 7 then
                        d.id = 20 + posIndex - 3
                    else
                        d.id = 30 + posIndex - 6
                    end
                    table.insert(heroInfos, d)
                end
                local info = {
                    combat = combat,
                    heroInfos = heroInfos,
                    arrayType = fightId
                }
                table.insert(arrayInfo, info)
            end
        end
        data = {
            playerInfo = baseInfo,
            arrayInfo = arrayInfo
        }
    end
    return data
end
function ExtraordinarylevelPvPModel:getAIEnemyInfos(playerId, index)
    local data = self:getRobotInfo(playerId, DynamicConfigData.t_SMRobot)
    return data.arrayInfo[index] or {}
end

function ExtraordinarylevelPvPModel:setCurPVPModule(moduleId)
    self.curPVPModule = moduleId
end
function ExtraordinarylevelPvPModel:getCurPVPModule()
    return self.curPVPModule
end

function ExtraordinarylevelPvPModel:getPVPEnum()
    if (self.curPVPType == 0) then
        return _ackTemp
    elseif (self.curPVPType == 1) then
        return _defTemp
    end
end

function ExtraordinarylevelPvPModel:isExtraordinaryPVPType(configType)
    for key, id in pairs(_ackTemp) do
        if id == configType then
            return true
        end
    end
    for key, id in pairs(_defTemp) do
        if id == configType then
            return true
        end
    end
    return false
end

function ExtraordinarylevelPvPModel:setCurPVPType(typ)
    self.curPVPType = typ or 0
end
function ExtraordinarylevelPvPModel:getCurPVPType()
    return self.curPVPType
end

function ExtraordinarylevelPvPModel:checkHeroInTeam(uuid)
    for key, value in pairs(self.heroTempItems[self.curPVPType]) do
        for k, heroInfo in pairs(value.array) do
            if heroInfo.uuid == uuid then
                return self.controller[key]
            end
        end
    end
    return false
end

function ExtraordinarylevelPvPModel:setHeroToTeam(seatId, heroInfo, uuid)
    local curHeroTemp = self:getCurHeroTempInfo()
    if not heroInfo then
        for key, heroInfo in pairs(curHeroTemp.array) do
            if heroInfo.uuid == uuid then
                curHeroTemp.array[key] = nil
                break
            end
        end
    else
        local hero = {}
        hero.uuid = heroInfo.uuid
        hero.code = heroInfo.code
        hero.id = seatId
        curHeroTemp.array[hero.uuid] = hero
    end
    self:checkTeamHasEmpty()
end

function ExtraordinarylevelPvPModel:checkTeamHasEmpty(num)
    local team = self:getPVPEnum()
    for type, data in pairs(team) do
       -- local curHeroTemp = self.heroTempItems[self.curPVPType][data]
        --local key = ""
        -- "CrossArena_teamEmpty"..self.curPVPType..data
        --RedManager.updateValue(key, TableUtil.GetTableLen(curHeroTemp.array) < 1)
    end
end

function ExtraordinarylevelPvPModel:getCurHeroTempInfo()
    return self.heroTempItems[self.curPVPType][self.curPVPModule]
end

function ExtraordinarylevelPvPModel:SeatItem_seatInfoUpdate()
	local mapConfig = BattleModel:getBattleConfig()
	if not self:isCrossPVPType(mapConfig.configType) then return end
    local seats = BattleModel:getSeatInfos()
    local array = self:getCurHeroTempInfo().array
    for uuid, d in pairs(array) do
        for _, seat in ipairs(seats) do
            if (seat.uuid == uuid) then
                d.id = seat.seatId
                -- return
            end
        end
    end
end 

function ExtraordinarylevelPvPModel:getCurTempForSever()
	if self.curPVPType == self._CrossPVPType._ack then
		self:getAckTemp()
	else
		self:getDefTemp()
	end
end

function ExtraordinarylevelPvPModel:checkHeroTypeInTeam(code)
	for key,value in pairs(self:getTypeHeroTempInfo()) do
		for k,v in pairs(value.array) do
			local heroInfo = CardLibModel:getHeroByUid(v.uuid)
			if heroInfo.code == code  then
				for l,s in pairs(self:getPVPEnum()) do
					if s == key then
						return l
					end
				end
			end
		end
	end
	return false
end

function ExtraordinarylevelPvPModel:getTypeHeroTempInfo(typ)
    local typ = typ or self.curPVPType
    return self.heroTempItems[typ]
end

function ExtraordinarylevelPvPModel:loginPlayerDataFinish()
    self:getDefTemp()
    self:getAckTemp()
end

function ExtraordinarylevelPvPModel:getArrayByType(type)
    return self.heroTempItems[self.curPVPType][type]
end

function ExtraordinarylevelPvPModel:getDefTemp()
    self.heroTempItems[self._CrossPVPType._def] = {}
    for key, id in pairs(_defTemp) do
        self.heroTempItems[self._CrossPVPType._def][id] = {}
        self.heroTempItems[self._CrossPVPType._def][id].arrayType = id
        self.heroTempItems[self._CrossPVPType._def][id].array = {}
        self.heroTempItems[self._CrossPVPType._def][id].isHide = false
        self.controller[id] = key
    end
    for k, v in ipairs(_defTemp) do
        self:doHandle(
            self._CrossPVPType._def,
            v,
            function()
                local state = false
                for key, value in pairs(self.heroTempItems[self._CrossPVPType._def]) do
                    if next(value.array) then
                        state = false
                    else
                        state = true
                    end
                end
                --  RedManager.updateValue("V_CrossArenapvp_defand", state)
            end
        )
    end
end
function ExtraordinarylevelPvPModel:doHandle(type, v, cal)
    local requseInfo = {
        fightId = DynamicConfigData.t_Basics[1].fightId,
        playerId = 0,
        gamePlay = v
    }
    local function success(data)
        if (data.array) then
            local tb = {}
            tb.arrayType = v
            tb.array = {}
            local isHide = false
            for uuid, seat in pairs(data.array) do
                local hero = {}
                hero.uuid = seat.uuid
                hero.code = tonumber(seat.uuid)
                hero.id = seat.id
                tb.array[hero.uuid] = hero
                if seat.isHide then
                    isHide = true
                end
            end
            tb.isHide = isHide
            self.heroTempItems[type][v] = tb
        end
        if cal then
            cal()
        end
    end
    RPCReq.Battle_GetOpponentBattleArray(requseInfo, success)
end

function ExtraordinarylevelPvPModel:getAckTemp()
    self.heroTempItems[self._CrossPVPType._ack] = {}
    for key, id in pairs(_ackTemp) do
        self.heroTempItems[self._CrossPVPType._ack][id] = {}
        self.heroTempItems[self._CrossPVPType._ack][id].arrayType = id
        self.heroTempItems[self._CrossPVPType._ack][id].array = {}
        self.heroTempItems[self._CrossPVPType._ack][id].isHide = false
        self.controller[id] = key
    end
    for _, v in ipairs(_ackTemp) do
        self:doHandle(self._CrossPVPType._ack, v)
    end
end

function ExtraordinarylevelPvPModel:isCrossPVPType(configType)
    for key, id in pairs(_ackTemp) do
        if id == configType then
            return true
        end
    end
    for key, id in pairs(_defTemp) do
        if id == configType then
            return true
        end
    end
    return false
end

function ExtraordinarylevelPvPModel:istwoZhenrongOpen()
    local isOpen = false
    local mathchType = self:getMatchType()
    local curLevel, nextLevel, curexp = SecretWeaponsModel:getEquipLvAndExp()
    local limtLv = DynamicConfigData.t_Basics[1].Openconditions
    if mathchType == 2 and limtLv < curLevel then
        isOpen = true
    end
    return isOpen
end

function ExtraordinarylevelPvPModel:saveTeamToSever(callBack)
    local tb = {}
    tb.arrays = {}
    --得到当前是常规赛还王者赛
    local matchType = self:getMatchType()
    for key, value in pairs(self.heroTempItems[self.curPVPType]) do
        if
            matchType == 1 and
                (value.arrayType == GameDef.BattleArrayType.CrossSuperMundaneAckFirst or
                    value.arrayType == GameDef.BattleArrayType.CrossSuperMundaneDefFirst)
         then
            if table.nums(value.array) == 0 then
                return RollTips.show(Desc.CrossPVPDesc2)
            end
            table.insert(tb.arrays, value)
        elseif matchType == 2 and self:istwoZhenrongOpen() == true then
            if table.nums(value.array) == 0 then
                return RollTips.show(Desc.CrossPVPDesc2)
            end
            table.insert(tb.arrays, value)
        elseif
            matchType == 2 and self:istwoZhenrongOpen() == false and
                (value.arrayType == GameDef.BattleArrayType.CrossSuperMundaneAckFirst or
                    value.arrayType == GameDef.BattleArrayType.CrossSuperMundaneDefFirst)
         then
            if table.nums(value.array) == 0 then
                return RollTips.show(Desc.CrossPVPDesc2)
            end
            table.insert(tb.arrays, value)
        end
    end
    RPCReq.Battle_UpdateArrayMap(
        tb,
        function(param)
            if (param) then
                for key, v in pairs(self.heroTempItems[self.curPVPType]) do
                    BattleModel.__arrayInfos[key] = self:getArrayByType(key)
                end
                if callBack then
                    callBack()
                end
            end
        end
    )
end

function ExtraordinarylevelPvPModel:isDefArrayType(arrayType)
    return arrayType == GameDef.BattleArrayType.CrossSuperMundaneDefFirst or
        arrayType == GameDef.BattleArrayType.CrossSuperMundaneDefTwo
end

function ExtraordinarylevelPvPModel:isAckArrayType(arrayType)
    return arrayType == GameDef.BattleArrayType.CrossSuperMundaneAckFirst or
        arrayType == GameDef.BattleArrayType.CrossSuperMundaneAckTwo
end

function ExtraordinarylevelPvPModel:getSuperMundName(id)
    local str = ""
    local configinfo = DynamicConfigData.t_SuperMundName[id]
    if configinfo then
        str = configinfo.servername
    end
    return str
end

function ExtraordinarylevelPvPModel:getXialaListArr()
    local listDesc = {}
    local listData = {}
    self.listValue = {}
    for i = 1, #self.saijichuangqi, 1 do
        local itemInfo = self.saijichuangqi[i]
        local mundName = self:getSuperMundName(i)
        table.insert(listDesc, mundName)
        table.insert(listData, i)
        local info = self.listValue[i]
        if not info then
            info = {}
        end
        for j = 1, itemInfo, 1 do
            table.insert(info, j)
        end
        self.listValue[i] = info
    end
    return listDesc, listData, self.listValue
end

--##获取系统赛季信息
function ExtraordinarylevelPvPModel:getSysSeasonInfo()
    local function success(data)
        printTable(159, "获取系统赛季信息返回", data)
        if data and data.seasonInfo then
            self.ExtraordinarylevelMainInfo = data.seasonInfo
        end
        Dispatcher.dispatchEvent(EventType.extraordinarylevelPvP_mainInfo)
    end
    local info = {}
    printTable(159, "获取系统赛季信息", info)
    RPCReq.CrossSuperMundane_GetSysSeasonInfo(info, success)
end

function ExtraordinarylevelPvPModel:openBattlePreView(info)
    self:setCurPVPType(self._CrossPVPType._ack)
    local battleCall = function(param, args)
        if (param == "cancel") then
        elseif (param == "begin") then
            self:CrossSuperMundaneBattle()
        elseif (param == "next") then
            self:checkNextFight(args)
        elseif (param == "end") then
            if self.battleResultInfo.promotion == 0 then --#晋级标志位 0成功进晋级 1失败
                ViewManager.open("ExtraordinaryPVPjingjiSucView", {dan = self.battleResultInfo.dan})
            elseif self.battleResultInfo.promotion == 1 then
                ViewManager.open("ExtraordinaryPVPjingjiLoseView", {dan = self.battleResultInfo.dan})
            end
            local isWin = false
            if self.battleResultInfo.battleRet > 1 then
                isWin = true
            end
            local params = {}
            params.isWin = isWin
            params.reward = self.battleResultInfo.addRes
            params.type = GameDef.GamePlayType.CrossSuperMundane
            ModelManager.PlayerModel:set_awardData(params)
            Dispatcher.dispatchEvent(EventType.show_gameReward, {gamePlayType = GameDef.GamePlayType.CrossSuperMundane})
        -- local reward = clone(ModelManager.PlayerModel:get_awardData(GameDef.GamePlayType.HorizonPvp))
        -- PlayerModel:set_awardByType(GameDef.GamePlayType.HorizonPvp,{})
        end
    end
    local args = {
        fightID = DynamicConfigData.t_Basics[1].fightId,
        configType = GameDef.BattleArrayType.CrossSuperMundaneAckFirst,
        customPrepare = true,
        serverId = info.pkInfo.serverId,
        playerId = info.pkInfo.id
    }
    Dispatcher.dispatchEvent(EventType.battle_requestFunc, battleCall, args)
end

function ExtraordinarylevelPvPModel:setNeedPlay(state)
    self.needPlay = state
end
function ExtraordinarylevelPvPModel:setBattleData(battleRecord)
    self.needPlay = true
    self.battleRecord = battleRecord
    self.recordIndex = 0
    self:checkNextFight()
end

function ExtraordinarylevelPvPModel:checkNextFight(args)
    local fightId = table.remove(self.battleRecord, 1)
    if fightId then
        self.recordIndex = self.recordIndex + 1
        BattleModel:requestBattleRecord(fightId, nil, GameDef.GamePlayType.CrossSuperMundane)
    else
        self.recordIndex = 0
        Dispatcher.dispatchEvent(EventType.battle_end, args)
    end
end
function ExtraordinarylevelPvPModel:getRecordIndex()
	return self.recordIndex
end

function ExtraordinarylevelPvPModel:Battle_BattleRecordData(_, args)
    local arrayType = args.battleData.gamePlayInfo.arrayType
    if not self:isCrossPVPType(arrayType) then
        return
    end
    args.battleData.gamePlayInfo.arrayType = GameDef.BattleArrayType.CrossSuperMundaneAckFirst
    if self.needPlay then
        Dispatcher.dispatchEvent(EventType.Battle_replayRecord, {isRecord = false, battleData = args.battleData})
    end
end

--是否开启王者赛
function ExtraordinarylevelPvPModel:isKingOpen()
    local isOpen = false
    local mainInfo = self:getMainInfo()
    if next(mainInfo) == nil then
        return isOpen
    end
    local serverTime = ServerTimeModel:getServerTime()
    local oPentime = mainInfo.kingTime - serverTime
    if oPentime > 0 then
        isOpen = false
    else
        isOpen = true
    end
    return isOpen
end

function ExtraordinarylevelPvPModel:isplayerKingOpen() --玩家是否可打王者赛
    local isOpen = false
    local mainInfo = self:getMainInfo()
    local timeopen = self:isKingOpen()
    if next(mainInfo) == nil then
        return
    end
    local dan = mainInfo.dan
    if dan == 18 and timeopen then
        isOpen = true
    end
    return isOpen
end

function ExtraordinarylevelPvPModel:getIsJingjisai() --是否是在竞技赛
    local is = false
    local mainInfo = self:getMainInfo()
    if next(mainInfo) == nil then
        return
    end
    local max = self:getCurduanExp(mainInfo.dan)
    if mainInfo.danScore >= max then
        is = true
    end
    return is
end

function ExtraordinarylevelPvPModel:getDanChinese(dan) --得到段位等级中文名
    local str = ""
    local levelInfo = DynamicConfigData.t_Levelrule[dan]
    str = levelInfo.name
    return str
end

function ExtraordinarylevelPvPModel:getDuanweiChinese() --得到段位等级中文名
    local str = ""
    local mainInfo = self:getMainInfo()
    if next(mainInfo) == nil then
        return str
    end
    local levelInfo = DynamicConfigData.t_Levelrule[mainInfo.dan]
    str = levelInfo.name
    return str
end

function ExtraordinarylevelPvPModel:getCurduanExp(dan) --得到当前段位最大经验值
    local num = 0
    local configInfo = DynamicConfigData.t_Levelrule[dan]
    if configInfo then
        num = configInfo.bigintegral
    end
    return num
end

function ExtraordinarylevelPvPModel:getCurHuanchongExp(dan) --得到当前段位最大缓冲积分
    local num = 0
    local configInfo = DynamicConfigData.t_Levelrule[dan]
    if configInfo then
        num = configInfo.Bufferintegral
    end
    return num
end

function ExtraordinarylevelPvPModel:getCurduanStar(dan) --得到当前段位晋级赛星数
    local num = 0
    local configInfo = DynamicConfigData.t_Levelrule[dan]
    if configInfo then
        for i = 1, #configInfo.frequency, 1 do
            if configInfo.identification == 1 then
                local starInfo = configInfo.frequency[i]
                num = num + starInfo.num
            end
        end
    end
    return num
end

function ExtraordinarylevelPvPModel:isCurJingjisai(dan, danScore) --当前是否处于晋级赛
    local isJingjisai = false
    local configInfo = DynamicConfigData.t_Levelrule[dan]
    local maxExp = self:getCurduanExp(dan)
    if danScore >= maxExp and configInfo.identification == 1 then
        isJingjisai = true
    end
    return isJingjisai
end

function ExtraordinarylevelPvPModel:getDuanweiReward(dan)
    local danReward = self.danwaiRewardMap or {}
    local configReward = DynamicConfigData.t_LevelAward[1]
    local temp = {}
    for key, value in pairs(configReward) do
        temp[#temp + 1] = value
    end
    TableUtil.sortByMap(temp, {{key = "Level", asc = false}})
    for k, v in pairs(temp) do
        local limitLv = tonumber(v.Level)
        if limitLv > dan and not danReward[v.Level] then
            return v, false
        elseif limitLv <= dan and not danReward[v.Level] then
            return v, true
        end
    end
    return {}, false
end

function ExtraordinarylevelPvPModel:getDuanweiRewardList()
    local temp = {}
    local mainInfo = self:getMainInfo()
    if not mainInfo then
        return temp
    end
    local dan = mainInfo.maxDan or 1
    local danReward = self.danwaiRewardMap or {}
    local configReward = DynamicConfigData.t_LevelAward[1]
    -- TableUtil.sortByMap(configReward, {{key = "level", asc = false}})
    for key, value in pairs(configReward) do
        local limitLv = tonumber(value.Level)
        if dan < limitLv then --未达成
            value["getRewardIdex"] = 1
        elseif dan >= limitLv and not danReward[value.Level] then --可领取
            value["getRewardIdex"] = 0
        elseif dan >= limitLv and danReward[value.Level] then --已领取
            value["getRewardIdex"] = 2
        end
        temp[#temp + 1] = value
    end
    TableUtil.sortByMap(temp, {{key = "getRewardIdex", asc = false}, {key = "Level", asc = true}})
    return temp
end

function ExtraordinarylevelPvPModel:setDuanweiRewardRed()
    local red=false
    local mainInfo = self:getMainInfo()
    if not mainInfo then
        return red
    end
    local dan = mainInfo.maxDan or 1
    local danReward = self.danwaiRewardMap or {}
    local configReward = DynamicConfigData.t_LevelAward[1]
    -- TableUtil.sortByMap(configReward, {{key = "level", asc = false}})
    for key, value in pairs(configReward) do
        local limitLv = tonumber(value.Level)
       if dan >= limitLv and not danReward[value.Level] then --可领取
            red=true
            break
       end
    end
    RedManager.updateValue("M_EXTRAOREFIRSTDANRED", red)    
end


function ExtraordinarylevelPvPModel:getDanIcon(dan)
    local configInfo=DynamicConfigData.t_Levelrule[dan]
    if configInfo then
        return string.format("%s%s.png", "Icon/ExtraordinaryLevel/dan", configInfo.showLevel)
    else
        return ""
    end
end

function ExtraordinarylevelPvPModel:getCurseasonId() --当前赛季Id
    local mainInfo = self:getMainInfo()
    if next(mainInfo) == nil then
        return 1
    end
    return mainInfo.seasonId
end

function ExtraordinarylevelPvPModel:setWangzhezhizheng(info)
    self.wangzhezhizhengInfo = info
    self:setWangzhezhizhengRed()
end

function ExtraordinarylevelPvPModel:getWangzhezhizheng()
    return self.wangzhezhizhengInfo
end

function ExtraordinarylevelPvPModel:setWangzhezhizhengRed()
    local red=false
    local winNum = self.wangzhezhizhengInfo.winNum or 0
    local lingquMap = self.wangzhezhizhengInfo.danKingReward or {}
    local configInfo = DynamicConfigData.t_Kingcard
    for key, value in pairs(configInfo) do
        local info = lingquMap[key] or {}
            local putongindex = true    --false是已领取后端奇葩的设定
            if info.state == nil then
                putongindex = true
            else
                putongindex = info.state
            end
            local speciaIndex = true
            if info.bugState == nil then
                speciaIndex = true
            else
                speciaIndex = info.bugState
            end
            if self.wangzhezhizhengInfo.buyDanKing == true then
                if winNum>=value.victoryTimes and (putongindex == true or speciaIndex == true) then
                    red=true
                    break
                end
            else
                if winNum>=value.victoryTimes and (putongindex == true) then
                    red=true
                    break
                end
            end
        end
        RedManager.updateValue("M_EXTRAOREKINGRED", red)   
    end


--王者之证活动界面数据
function ExtraordinarylevelPvPModel:getWangzhezhizhengconfigInfo(isSort)
    local temp = {}
    local configInfo = DynamicConfigData.t_Kingcard
    local lingquMap = self.wangzhezhizhengInfo.danKingReward or {}
    for key, value in pairs(configInfo) do
        local info = lingquMap[key] or {}
        local index = true
        if info.state == nil then
            index = true
        else
            index = info.state
        end
        local speciaIndex = true
        if info.bugState == nil then
            speciaIndex = true
        else
            speciaIndex = info.bugState
        end
        if index == false and speciaIndex == false then
            value["getRewardIdex"] = 1
        else
            value["getRewardIdex"] = 0
        end
        temp[#temp + 1] = value
    end
    if isSort == true then
        TableUtil.sortByMap(temp, {{key = "getRewardIdex", asc = false}, {key = "id", asc = false}})
    end
    return temp
end

--
function ExtraordinarylevelPvPModel:getDanByscore(score)
    local config = DynamicConfigData.t_Levelrule
    local max = #config
    for i = max, 1, -1 do
        local item = config[i]
        if score >= item.Smallintegral then
            local lv = item.level 
            if lv >= max then
                lv = max
            end
            return lv
        end
    end
    return 1
end

--###战斗
function ExtraordinarylevelPvPModel:CrossSuperMundaneBattle()
    local matchType = self:getMatchType()
    local function success(data)
        printTable(159, "战斗信息返回", data)
        if data.dan then
            self.ExtraordinarylevelMainInfo["dan"] = data.dan
            self.ExtraordinarylevelMainInfo["maxDan"] = data.maxDan
        end
        if data.joinKing==nil then
            self.ExtraordinarylevelMainInfo["joinKing"] =  false--#为ture参加王者赛 
        else
            self.ExtraordinarylevelMainInfo["joinKing"] =data.joinKing
        end
        self.battleResultInfo = data
        self:setBattleData(clone(data.battleRecord) )
        Dispatcher.dispatchEvent(EventType.extraordinarylevelPvP_BattleEnd)
        local mainInfo = self:getMainInfo()
        if next(mainInfo) == nil then
            return
        end
        self:getSelfResults(2, mainInfo.seasonId, 1)
        self:setDuanweiRewardRed()--首通红点
    end
    local info = {
        matchType = matchType --1:integer #匹配 1 常规,王者
    }
    printTable(159, "战斗", info)
    RPCReq.CrossSuperMundane_Battle(info, success)
end

--###匹配
function ExtraordinarylevelPvPModel:CrossSuperMundaneMatch(matchType)
    local function success(data)
        printTable(159, "战斗信息返回", data)
        CrossPVPModel:setMatchingPlayer(data)
        if data.retCode == 12 or data.retCode == 13 then
            ViewManager.open("ExtraordinaryMatchingView", data)
        -- else
        --     RollTips.show("数据不对吧")
        end
        -- Dispatcher.dispatchEvent(EventType.worldChallenge_HonourInfoupdateInfo)
    end
    local info = {
        matchType = matchType --1:integer #匹配 1 常规,王者
    }
    self:setMatchType(matchType)
    printTable(159, "战斗", info)
    RPCReq.CrossSuperMundane_Match(info, success)
end

--#获取记录
function ExtraordinarylevelPvPModel:crossSuperMundaneRecord()
    local function success(data)
        printTable(159, "获取记录返回", data)
    end
    local info = {}
    printTable(159, "获取记录", info)
    RPCReq.CrossSuperMundane_Record(info, success)
end

--#获取排行榜
function ExtraordinarylevelPvPModel:getRank(type)
    local function success(data)
        printTable(159, "获取排行榜返回", data)
        if data and data.record then
            Dispatcher.dispatchEvent(EventType.extraordinarylevelPvP_rankInfoup, data.record)
        end
    end
    local info = {
        type = type --1:integer #1赛区排行 2好友排行(好友 客户端自己排)
    }
    printTable(159, "获取排行榜", info)
    RPCReq.CrossSuperMundane_GetRank(info, success)
end

--#获取个人战绩
function ExtraordinarylevelPvPModel:getSelfResults(type, index, viewType)
    local function success(data)
        printTable(159, "获取个人战绩返回", data)
        if viewType == 1 then --主界面单个刷新
            if data and data.record then
                Dispatcher.dispatchEvent(EventType.extraordinarylevelPvP_zijizhanji, data.record)
            end
        else
            if data and data.record then
                if type == 1 then --总战绩
                    Dispatcher.dispatchEvent(EventType.extraordinarylevelPvP_gerenzongzhanji, data.record)
                else
                    Dispatcher.dispatchEvent(EventType.extraordinarylevelPvP_gerenzhanji, data.record)
                end
            end
        end
    end
    local info = {
        type = type, --1:integer #1总成绩,2赛季战绩
        index = index --2:integer #只有是赛季战绩才传
    }
    printTable(159, "获取个人战绩", info)
    RPCReq.CrossSuperMundane_SelfResults(info, success)
end

--#获取赛季传奇
function ExtraordinarylevelPvPModel:getSeasonPlayerRankData(assignId, seasonId)
    local function success(data)
        printTable(159, "获取赛季传奇返回", data)
        if data and data.rank then
            local map = self.saijichuangqiPlayerInfo[assignId]
            if not map then
                map = {}
            end
            map[seasonId] = data.rank
            self.saijichuangqiPlayerInfo[assignId] = map
            Dispatcher.dispatchEvent(
                EventType.extraordinarylevelPvP_saijiqchuangqi,
                {assignId = assignId, seasonId = seasonId}
            )
        end
    end
    local info = {
        assignId = assignId, -- 			1:integer #赛区ID
        seasonId = seasonId --			2:integer #赛季id
    }
    printTable(159, "获取赛季传奇", info)
    RPCReq.CrossSuperMundane_GetSeasonPlayerRankData(info, success)
end

--#获取全部传奇赛区
function ExtraordinarylevelPvPModel:getAllSeasonInfo()
    local function success(data)
        printTable(159, "获取全部传奇赛区返回", data)
        self.saijichuangqi = data.maxSeasonId
        Dispatcher.dispatchEvent(EventType.extraordinarylevelPvP_saijichuangqi)
    end
    local info = {}
    printTable(159, "获取全部传奇赛区", info)
    RPCReq.CrossSuperMundane_GetAllSeasonInfo(info, success)
end

--#购买门票
function ExtraordinarylevelPvPModel:buyTickets(number)
    local function success(data)
        printTable(159, "购买门票返回", data)
        -- Dispatcher.dispatchEvent(EventType.worldChallenge_HonourInfoupdateInfo)
    end
    local info = {
        number = number --1:integer #门票数量
    }
    printTable(159, "购买门票", info)
    RPCReq.CrossSuperMundane_BuyTickets(info, success)
end

--#获取段位奖励
function ExtraordinarylevelPvPModel:getAllDanReward()
    local function success(data)
        printTable(159, "获取段位奖励返回", data)
        if data and data.danReward then
            self.danwaiRewardMap = data.danReward
        end
        Dispatcher.dispatchEvent(EventType.extraordinarylevelPvP_shoutongduanweijiangli)
    end
    local info = {}
    printTable(159, "获取段位奖励", info)
    RPCReq.CrossSuperMundane_GetAllDanReward(info, success)
end

--#领取段位奖励
function ExtraordinarylevelPvPModel:receiveDanReward(index)
    local function success(data)
        printTable(159, "领取段位奖励返回", data)
        if data and data.ret then
            self.danwaiRewardMap[data.ret] = true
        end
        self:setDuanweiRewardRed()--首通红点
        Dispatcher.dispatchEvent(EventType.extraordinarylevelPvP_shoutongduanweijiangli)
    end
    local info = {
        index = index --1:integer #领取位置
    }
    printTable(159, "领取段位奖励", info)
    RPCReq.CrossSuperMundane_ReceiveDanReward(info, success)
end

--#领取王者之证奖励
function ExtraordinarylevelPvPModel:receiveDanKingReward(index, buy)
    local function success(data)
        printTable(159, "领取王者之证奖励返回", data)
        Dispatcher.dispatchEvent(EventType.extraordinarylevelPvP_wangzhezhizheng)
    end
    local info = {
        index = index, --1:integer #领取位置
        buy = buy --2:integer #1普通奖励 ,2购买奖励
    }
    printTable(159, "领取王者之证奖励", info)
    RPCReq.CrossSuperMundane_ReceiveDanKingReward(info, success)
end

return ExtraordinarylevelPvPModel
