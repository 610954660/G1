--Name : backgroundTimeLimitGiftView.lua
--Author : generated by FairyGUI
--Date : 2020-7-10
--Desc :

local backgroundTimeLimitGiftView, Super = class("backgroundTimeLimitGiftView", Window)
local ItemCell = require "Game.UI.Global.ItemCell"
function backgroundTimeLimitGiftView:ctor()
    --LuaLog("backgroundTimeLimitGiftView ctor")
    self._packName = "TimeLimitGift"
    self._compName = "TimeLimitGiftView"
    self._rootDepth = LayerDepth.PopWindow
    self.viewIndexTag = GameDef.ActivityType.SurpriseGiftEx
    self.data = false
    self.tabIndex = 1
    self.timerList = {}
end

function backgroundTimeLimitGiftView:_initEvent()
    local params = {}
    params.onSuccess = function(res)
    end
    --RPCReq.Activity_SurpriseGift_GetGiftList(params, params.onSuccess)
end

function backgroundTimeLimitGiftView:_initVM()
    local vmRoot = self
    local viewNode = self.view
    ---Do not modify following code--------
    --{vmFieldsEnd}:TimeLimitGift.backgroundTimeLimitGiftView
    --Do not modify above code-------------
end

function backgroundTimeLimitGiftView:_initUI()
    self:_initVM()
    self.data = ModelManager.backgroundTimeLimitGiftModel:getData()

    if #self.data < 1 then
        self:closeView()
        return
    end

    printTable(999, "数据", self.data)
    --self.tabIndex = 1
    self.tabIndex = ModelManager.backgroundTimeLimitGiftModel.tabIndex or 1
    self.tabList = self.view:getChildAutoType("tabList")
    self.itemList = self.view:getChildAutoType("itemList")
    self.btnBuy = self.view:getChildAutoType("btnBuy")
    self.txtLevel = self.view:getChildAutoType("txtLevel")
    self.txtRate = self.view:getChildAutoType("txtRate")
    self.txtheroRate = self.view:getChildAutoType("txtheroRate")
    self.txtHero = self.view:getChildAutoType("txtHero")
    self.txtTimeLimit = self.view:getChildAutoType("txtTimeLimit")
    self.txtBuyLimit = self.view:getChildAutoType("txtTimeLimit")
    self.btn_enteryueka = self.view:getChildAutoType("btn_enteryueka")
    self.tabList:setItemRenderer(
        function(index, obj)
            self:tabListRenderer(index, obj)
        end
    )

    self.itemList:setItemRenderer(
        function(index, obj)
            self:itemListRenderer(index, obj)
        end
    )

    self.btnBuy:addClickListener(
        function()
            self:onBtnBuyClick()
        end,
        1
    )

    if self._args.giftID then
        for i, v in ipairs(self.data) do
            if v.id == self._args.giftID then
                self.tabIndex = i
                break
            end
        end
    end

    self:updateTabList()
    self:updateItemList()
    self:updateTimeCount()
    self:updateTimeText()
    self:updateInfo()

    if not self._args.isAutoOpen then
        ModelManager.backgroundTimeLimitGiftModel:setNotShowRed()
    end
end

function backgroundTimeLimitGiftView:_initEvent(...)
    if not tolua.isnull(self.btn_enteryueka) then
        self.btn_enteryueka:addClickListener(
            function(...)
                ModuleUtil.openModule(ModuleId.MonthlyCard.id, true)
            end
        )
    end
end

function backgroundTimeLimitGiftView:_exit()
    for k, v in pairs(self.timerList) do
        TimeLib.clearCountDown(v)
    end
    if ModelManager.backgroundTimeLimitGiftModel and ModelManager.backgroundTimeLimitGiftModel.tabIndex ~= nil then
        ModelManager.backgroundTimeLimitGiftModel.tabIndex = 1
    end
    self.timerList = {}
    self.data = false
end

function backgroundTimeLimitGiftView:updateTabList()
    printTable(999, "显示礼包", self.data)
    self.tabList:setNumItems(#self.data)
end

function backgroundTimeLimitGiftView:updateInfo()
    local data = self.data[self.tabIndex]
    if not data then
        return
    end
    local config = backgroundTimeLimitGiftModel:getBgInfo(self.viewIndexTag, self.data[self.tabIndex].id)
    if not config then
        return
    end
    if config and (config.giftType == 5 or config.giftType == 6) then
        if not tolua.isnull(self.btn_enteryueka) then
            self.btn_enteryueka:setVisible(true)
        end
    else
        if not tolua.isnull(self.btn_enteryueka) then
            self.btn_enteryueka:setVisible(false)
        end
    end
    if not config.title then
       return 
    end
    local titleInfo=json.decode(config.title)
    if titleInfo and  titleInfo[1] == 1 then --类型1带标题图片和数字和百分比
        self.view:getController("type"):setSelectedIndex(0)
        self.txtHero:setText(config.level)
        self.txtheroRate:setText(string.format("%s%%", config.discount))
        self.view:getChildAutoType("img_screttitle1"):setURL(
            string.format("UI/TimeLimitGift/LimitGiftRate_%s.png", titleInfo[2])
        )
    elseif titleInfo and titleInfo[1] == 2 then --类型2只带标题图片和百分比
        self.view:getController("type"):setSelectedIndex(1)
        self.txtheroRate:setText(string.format("%s%%", config.discount))
        self.view:getChildAutoType("img_screttitle2"):setURL(
            string.format("UI/TimeLimitGift/LimitGiftRate_%s.png", titleInfo[2])
        )
    elseif titleInfo and titleInfo[1] == 3 then --类型3只带标题图片
        self.view:getController("type"):setSelectedIndex(2)
        printTable(152, ">>>>>>>>>>>", titleInfo[2])
        self.view:getChildAutoType("img_screttitle3"):setURL(
            string.format("UI/TimeLimitGift/LimitGiftRate_%s.png", titleInfo[2])
        )
    end
    self.view:getChildAutoType("img_scretbg"):setURL(string.format("UI/TimeLimitGift/%s", config.bg))
    self.view:getChildAutoType("img_scretbg1"):setURL(string.format("UI/TimeLimitGift/%s", config.model))
    self.btnBuy:setTitle(string.format(DescAuto[317], config.price)) -- [317]="%s元购买"
end

function backgroundTimeLimitGiftView:updateItemList()
    local config = backgroundTimeLimitGiftModel:getBgInfo(self.viewIndexTag, self.data[self.tabIndex].id)
    if not config then
        return
    end
    self.itemList:setNumItems(#config.giftItem)
end

function backgroundTimeLimitGiftView:updateTimeCount()
    for k, v in pairs(self.timerList) do
        TimeLib.clearCountDown(v)
    end
    self.timerList = {}

    for k, v in pairs(self.data) do
        self.timerList[k] =
            TimeLib.newCountDown(
            v.endStamp - ServerTimeModel:getServerTime(),
            function(time)
                self:onCountDown(k, time)
            end,
            function()
                self:onCountEnd(k)
            end,
            false,
            false,
            false
        )
    end
end

function backgroundTimeLimitGiftView:updateTimeText()
    if self.data[self.tabIndex] then
        local lastTime = self.data[self.tabIndex].endStamp - ServerTimeModel:getServerTime()
        self.txtTimeLimit:setText(TimeLib.GetTimeFormatDay1(lastTime > 0 and lastTime or 0))
    end
end

function backgroundTimeLimitGiftView:onCountDown(key, time)
    if key ~= self.tabIndex then
        return
    end
    self.txtTimeLimit:setText(TimeLib.GetTimeFormatDay1(time))
end

function backgroundTimeLimitGiftView:onCountEnd(key)
    TimeLib.clearCountDown(self.timerList[key])
    local data = self.data[key]
    if not data then
        return
    end
    print(999, "计时到了", key, self.data[key].id)

    backgroundTimeLimitGiftModel:deleteData(self.data[key].id)
end

function backgroundTimeLimitGiftView:tabListRenderer(index, obj)
    local config = backgroundTimeLimitGiftModel:getBgInfo(self.viewIndexTag, self.data[index + 1].id)
    if config then
        obj:getChildAutoType("img_red"):setVisible(false)
        obj:addClickListener(
            function(...)
                self:onTabItemClick(index + 1)
            end,
            100
        )
        obj:getController("button"):setSelectedIndex(index + 1 == self.tabIndex and 1 or 0)
        obj:setTitle(config.name)
    end
end

function backgroundTimeLimitGiftView:itemListRenderer(index, obj)
    local itemCell = BindManager.bindItemCell(obj)
    local serverConfig = backgroundTimeLimitGiftModel:getBgInfo(self.viewIndexTag, self.data[self.tabIndex].id)
    if not serverConfig then
        return
    end
    local config =serverConfig.giftItem[index + 1]
    itemCell:setData(config.code, config.amount, config.type)
end

function backgroundTimeLimitGiftView:onTabItemClick(index)
    if self.tabIndex == index then
        return
    end

    self.tabIndex = index
    printTable(8848, ">>>>self.tabIndex>>>", self.tabIndex)
    self:updateTabList()
    self:updateInfo()
    self:updateItemList()
    self:updateTimeText()
end

function backgroundTimeLimitGiftView:onBtnBuyClick()
    local info = {}
    info.text = DescAuto[318] -- [318]="是否确认购买？"
    info.type = "yes_no"
    info.mask = true
    info.onYes = function()
        if not self.data or not self.data[self.tabIndex] then
            return
        end
        local giftID = self.data[self.tabIndex].id
        local config =backgroundTimeLimitGiftModel:getBgInfo(self.viewIndexTag, self.data[self.tabIndex].id)
        ModelManager.RechargeModel:directBuy(config.price, GameDef.StatFuncType.SFT_SurpriseGiftEx, giftID, config.name,nil,config.showName1)
    end
    Alert.show(info)
end

function backgroundTimeLimitGiftView:Event_updateTimeLimit(name)
    if tolua.isnull(self.view) then
        return
    end
    self.data = backgroundTimeLimitGiftModel:getData()
    print(999, "更新时间", #self.data)
    local num = 0
    if self.data == nil or next(self.data) == nil then
        num = 0
    else
        num = #self.data
    end
    if not self.data or num < 1 then
        --Dispatcher.dispatchEvent("close_ActivityView")
        self:closeView()
        return
    end

    if not self.tabIndex or self.tabIndex > num then
        self.tabIndex = num
    end

    self:updateTabList()
    self:updateItemList()
    self:updateTimeCount()
    self:updateTimeText()
    self:updateInfo()
    RedManager.updateValue("V_ACTIVITY_" .. GameDef.ActivityType.SurpriseGift, false)
end

return backgroundTimeLimitGiftView
