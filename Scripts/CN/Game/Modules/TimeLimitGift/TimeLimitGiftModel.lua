--Name : TimeLimitGiftModel.lua
--Author : generated by FairyGUI
--Date : 2020-7-10
--Desc : 


local TimeLimitGiftModel = class("TimeLimitGiftModel", BaseModel)

function TimeLimitGiftModel:ctor()
    self.giftList = {}
    self.timer = false
    self.notShowRed = false
    self.tabIndex = 1
end

function TimeLimitGiftModel:init()

end

--初始化数据
--当前激活的礼包列表map, 为空则没有激活的礼包
function TimeLimitGiftModel:initData(giftList)
	print(999,"TimeLimitGiftModel initData")
	self.giftList = {}

	for k,v in pairs(giftList) do
		table.insert(self.giftList,v)
	end

	table.sort(self.giftList, function(a,b)
		return a.id<b.id
	end)
    printTable(8848,">>>self.giftList>>",self.giftList)
    self:updateData()
end

-- 判断某个礼包存不存在 
-- moduleId 模块id
local equipIdRange={603,605}    -- 装备提升礼包id范围  SurpriseGift表
function TimeLimitGiftModel:hasGiftByModuleId(moduleId)
    local hasGift = false
    local openId = false
    if moduleId == 145 or moduleId == 148 then  
        openId = 59 
    end
    for k,v in pairs(self.giftList) do
        if moduleId == 145 then 
            if v.id >= equipIdRange[1] and v.id <= equipIdRange[2] then
                hasGift = true
                self.tabIndex = k
                break
            end
        elseif moduleId == 148 then
            if v.id == 609 then
                hasGift = true
                self.tabIndex = k
                break
            end
        end
    end
	local txt = false
    if not hasGift then
        if moduleId == 145 then
            txt = Desc.TimeLimitGift_txt1
        elseif moduleId == 148 then
            txt = Desc.TimeLimitGift_txt2
        end
        openId = false
    end
    return hasGift,openId,txt
end



function TimeLimitGiftModel:updateData()
	ActivityModel:updateTimitGift(GameDef.ActivityType.SurpriseGift,self.giftList)
	self:check_redDot()
	Dispatcher.dispatchEvent(EventType.Event_updateTimeLimit) --更新UI
    -- Dispatcher.dispatchEvent(EventType.activity_TimeLimitGiftActiveUpdate)
    if #self.giftList < 1 and self.timer then
        TimeLib.clearCountDown(self.timer)
        self.timer = false
    end
end

function TimeLimitGiftModel:deleteData(id)
	for k,v in pairs(self.giftList) do
		if v.id == id then
			table.remove(self.giftList,k)
			break
		end
	end
	self:updateData()
end

function TimeLimitGiftModel:getData()
    printTable(150,"233333333333333",self.giftList)
	return self.giftList
end

function TimeLimitGiftModel:clearTimeScheduler()
	if self.timer then
        TimeLib.clearCountDown(self.timer)
        self.timer = false
    end
end

--主界面计时 获取最小活动时间
function TimeLimitGiftModel:timeScheduler(txtComp)
    if self.timer then
        TimeLib.clearCountDown(self.timer)
        self.timer = false
    end

    local second = self:getCurrTime()
    if not second then
        return
    end

    self.timer = TimeLib.newCountDown(second,function(time)
        if tolua.isnull(txtComp) then
            return
        end
        txtComp:setVisible(true)
        txtComp:setText(time)
    end,function()
        if tolua.isnull(txtComp) then
            return
        end
        txtComp:setText(TimeLib.formatTime(0))
        self:timeScheduler(txtComp)
    end,false,false,true)
end

function TimeLimitGiftModel:getCurrTime()
	local minTime = nil
    local removeList = {}
	for k,v in pairs(self.giftList) do
		local lastTime = v.endStamp - ServerTimeModel:getServerTime()
		if lastTime > 0 and (not minTime or minTime > lastTime)then
			minTime = lastTime
            break
		end
    end
    
    for k,v in pairs(self.giftList) do
		local lastTime = v.endStamp - ServerTimeModel:getServerTime()
	    if lastTime <= 0 then
            table.insert(removeList,v.id)
		end
	end

    for k,v in pairs(removeList) do
        self:deleteData(v)
    end

	return minTime
end

function TimeLimitGiftModel:setNotShowRed()
    self.notShowRed = true
    RedManager.updateValue("V_ACTIVITY_"..GameDef.ActivityType.SurpriseGift,false)
end

function TimeLimitGiftModel:check_redDot()
    if self.notShowRed then
        return
    end
	RedManager.updateValue("V_ACTIVITY_"..GameDef.ActivityType.SurpriseGift, #self.giftList > 0)
end

function TimeLimitGiftModel:clear()
    if self.timer then
        TimeLib.clearCountDown(self.timer)
        self.timer = false
    end
end


return TimeLimitGiftModel
