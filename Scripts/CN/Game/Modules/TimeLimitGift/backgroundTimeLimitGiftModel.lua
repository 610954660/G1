--Name : backgroundTimeLimitGiftModel.lua
--Author : generated by FairyGUI
--Date : 2020-7-10
--Desc : 


local backgroundTimeLimitGiftModel = class("backgroundTimeLimitGiftModel", BaseModel)

function backgroundTimeLimitGiftModel:ctor()
    self.giftList = {}
    self.timer = false
    self.notShowRed = false
    self.tabIndex = 1
    self.showContent = {}
end

function backgroundTimeLimitGiftModel:init()

end

--初始化数据
--当前激活的礼包列表map, 为空则没有激活的礼包
function backgroundTimeLimitGiftModel:initData(giftList)
	self.giftList = {}

	for k,v in pairs(giftList) do
		table.insert(self.giftList,v)
	end

	table.sort(self.giftList, function(a,b)
		return a.id<b.id
	end)
    self:updateData()
end


function backgroundTimeLimitGiftModel:updateData()
	ActivityModel:updateTimitGift(GameDef.ActivityType.SurpriseGiftEx,self.giftList)
	self:check_redDot()
	Dispatcher.dispatchEvent(EventType.Event_updateTimeLimit)
    -- Dispatcher.dispatchEvent(EventType.activity_TimeLimitGiftActiveUpdate)
    if #self.giftList < 1 and self.timer then
        TimeLib.clearCountDown(self.timer)
        self.timer = false
    end
end

function backgroundTimeLimitGiftModel:deleteData(id)
	for k,v in pairs(self.giftList) do
		if v.id == id then
			table.remove(self.giftList,k)
			break
		end
	end
	self:updateData()
end

function backgroundTimeLimitGiftModel:getData()
    printTable(150,"233333333333333",self.giftList)
	return self.giftList
end


function backgroundTimeLimitGiftModel:clearTimeScheduler()
	if self.timer then
        TimeLib.clearCountDown(self.timer)
        self.timer = false
    end
end

function backgroundTimeLimitGiftModel:timeScheduler(txtComp)
    if self.timer then
        TimeLib.clearCountDown(self.timer)
        self.timer = false
    end

    local second = self:getCurrTime()
    if not second then
        return
    end

    self.timer = TimeLib.newCountDown(second,function(time)
        if tolua.isnull(txtComp) then
            return
        end
        txtComp:setVisible(true)
        txtComp:setText(time)
    end,function()
        if tolua.isnull(txtComp) then
            return
        end
        txtComp:setText(TimeLib.formatTime(0))
        self:timeScheduler(txtComp)
    end,false,false,true)
end

function backgroundTimeLimitGiftModel:getCurrTime()
	local minTime = nil
    local removeList = {}
	for k,v in pairs(self.giftList) do
		local lastTime = v.endStamp - ServerTimeModel:getServerTime()
		if lastTime > 0 and (not minTime or minTime > lastTime)then
			minTime = lastTime
            break
		end
    end
    
    for k,v in pairs(self.giftList) do
		local lastTime = v.endStamp - ServerTimeModel:getServerTime()
	    if lastTime <= 0 then
            table.insert(removeList,v.id)
		end
	end

    for k,v in pairs(removeList) do
        self:deleteData(v)
    end

	return minTime
end

function backgroundTimeLimitGiftModel:setNotShowRed()
    self.notShowRed = true
    RedManager.updateValue("V_ACTIVITY_"..GameDef.ActivityType.SurpriseGiftEx,false)
end

function backgroundTimeLimitGiftModel:check_redDot()
    if self.notShowRed then
        return
    end
	RedManager.updateValue("V_ACTIVITY_"..GameDef.ActivityType.SurpriseGiftEx, #self.giftList > 0)
end

function backgroundTimeLimitGiftModel:getBgInfo(viewIndexTag,giftId)--得到界面显示数据
    local actData = ModelManager.ActivityModel:getActityByType(viewIndexTag)
	if not actData  then
		return false
    end
   -- if next(self.showContent)==nil then
        if actData.showContent and actData.showContent.giftList then
            for key, value in pairs(actData.showContent.giftList) do
                  self.showContent[value.giftId]=  value
            end
          end
    --end
    return  self.showContent[giftId] or false
end



function backgroundTimeLimitGiftModel:clear()
    if self.timer then
        TimeLib.clearCountDown(self.timer)
        self.timer = false
    end
end


return backgroundTimeLimitGiftModel
