--Date :2021-01-13
--Author : generated by FairyGUI
--Desc : 

local PopularVoteView,Super = class("PopularVoteView",View)

function PopularVoteView:ctor()
	--LuaLog("PopularVoteView ctor")
	self._packName = "PopularVote"
	self._compName = "PopularVoteView"
	--self._rootDepth = LayerDepth.Window
	self.tabListData = {}
	self.cardListData = {}
	self.timer= {}
	self.isEnd = false
	self.popularHeroId = false
	self.loveHeroId = false
end

function PopularVoteView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:PopularVote.PopularVoteView
	self.btn_buy = viewNode:getChildAutoType('btn_buy')--btn_buy
		self.btn_buy.img_red = viewNode:getChildAutoType('btn_buy/img_red')--GImage
	self.btn_help = viewNode:getChildAutoType('btn_help')--GButton
	self.btn_reward = viewNode:getChildAutoType('btn_reward')--btn_reward
		self.btn_reward.img_red = viewNode:getChildAutoType('btn_reward/img_red')--GImage
	self.cardList = viewNode:getChildAutoType('cardList')--GList
	self.tabList = viewNode:getChildAutoType('tabList')--GList
	self.txt_leftTime = viewNode:getChildAutoType('txt_leftTime')--GTextField
	--{autoFieldsEnd}:PopularVote.PopularVoteView
	--Do not modify above code-------------
end

function PopularVoteView:_initEvent( )
	self.btn_help:removeClickListener()
	self.btn_help:addClickListener(function()
		local info = {}
	    info['title'] = Desc.PopularVoteView_helpTitle
	    info['desc'] = Desc.PopularVoteView_helpContent
	    ViewManager.open("GetPublicHelpView",info)
	end)

	self.btn_buy:addClickListener(function()
		ViewManager.open("PopularVoteAdvanceView")
	end)

	self.btn_reward:addClickListener(function()
		ViewManager.open("PopularVoteRewardView")
		--ModelManager.PopularVoteModel.isSaleTime = true
		--Dispatcher.dispatchEvent(EventType.PopularVote_refreshView)
	end)
end

function PopularVoteView:_initUI( )
	self:_initVM()
	local params = {}
	params.activityType = GameDef.ActivityType.HeroVote
	params.onSuccess = function(data)
		ModelManager.PopularVoteModel:setRankData(data or {})
		self.cardListData = ModelManager.PopularVoteModel:getPopularVoteAllCardInfo() 
		self.popularHeroId = ModelManager.PopularVoteModel.popularHeroId
		self.loveHeroId = ModelManager.PopularVoteModel.loveHeroId
		self:setCardList()
	end
	RPCReq.Activity_HeroVote_GetRankData(params,params.onSuccess)
	self.tabListData = ModelManager.PopularVoteModel:getPopularVoteTabInfo()
	self:setTabList()
	self.tabList:setSelectedIndex(0)
	RedManager.register("V_POPULAR_VOTE_REWARD",self.btn_reward.img_red)
	local dayStr = DateUtil.getOppostieDays()
	FileCacheManager.setBoolForKey("PopularVoteLoginRedDot"..dayStr, true)
	PopularVoteModel:checkPopularVoteLoginRedDot()
	self:updateCountTimer()
end

function PopularVoteView:setCardList( )
	self.cardList:setItemRenderer(function(idx,obj)
        local index = idx + 1
        local data = self.cardListData[index]
        local cardInfo = DynamicConfigData.t_hero[data.heroCode]
        local icon = obj:getChildAutoType("icon/icon")
        icon:setURL(PathConfiger.getHeroCardex(data.heroCode))
        local img_category = obj:getChildAutoType("img_category")
        img_category:setURL(PathConfiger.getCardCategory(cardInfo.category))
        local txt_num = obj:getChildAutoType("txt_num")
        local cardData = ModelManager.PopularVoteModel.votesAll[data.heroCode]
        txt_num:setText(string.format(Desc.PopularVote_Str3,cardData and cardData.votesNum or 0))
		local stempCtr = obj:getController("stempCtr")
		if self.popularHeroId and self.loveHeroId and (self.popularHeroId == self.loveHeroId) and (self.popularHeroId == data.heroCode) then 
			stempCtr:setSelectedIndex(3)
		elseif self.popularHeroId and self.popularHeroId == data.heroCode then 
			stempCtr:setSelectedIndex(1)
		elseif self.loveHeroId and self.loveHeroId == data.heroCode then 
			stempCtr:setSelectedIndex(2)
		else
			stempCtr:setSelectedIndex(0)
		end
		local btn_support = obj:getChildAutoType("btn_support")
        btn_support:removeClickListener(6)
        btn_support:addClickListener(
			function()
				ViewManager.open("PopularVoteTipsView",{heroId = data.heroCode}) 
		end,6)
		local btn_popular = obj:getChildAutoType("btn_popular")
		btn_popular:removeClickListener(6)
        btn_popular:addClickListener(
			function()
				local info = {}
			    info['title'] = Desc.PopularVoteView_popularTitle
			    info['desc'] = Desc.PopularVoteView_popularContent
			    ViewManager.open("GetPublicHelpView",info)
		end,6)
		local btn_love = obj:getChildAutoType("btn_love")
		btn_love:removeClickListener(6)
        btn_love:addClickListener(
			function()
				local info = {}
			    info['title'] = Desc.PopularVoteView_loveTitle
			    info['desc'] = Desc.PopularVoteView_loveContent
			    ViewManager.open("GetPublicHelpView",info)
		end,6)
		local btn_hero = obj:getChildAutoType("btn_hero")
        btn_hero:removeClickListener(6)
        btn_hero:addClickListener(
			function()
				local heroConfig = DynamicConfigData.t_hero[data.heroCode]
				local conf = DynamicConfigData.t_HeroTotems
				local arr = conf[heroConfig.category]
				local h = false
				for _, d in pairs(arr) do
					if (d.hero == data.heroCode) then
						h = d
						break
					end
				end
				local info = {index = 1,heroId = data.heroCode, heroList = {h}};
        		ViewManager.open("HeroInfoView", info);
		end,6)
    end)
    self.cardList:setData(self.cardListData)
end

function PopularVoteView:setTabList( )
	self.tabList:setItemRenderer(function(idx,obj)
		local index = idx + 1
        local title = obj:getChildAutoType("title")
        title:setText(Desc["common_category"..self.tabListData[index]])
        if idx == 0 then 
			obj:addClickListener(
				function()
					self.cardListData = ModelManager.PopularVoteModel:getPopularVoteAllCardInfo()
					printTable(6,"self.cardListData",self.cardListData)
					self:setCardList()
			end)
        else
			obj:addClickListener(
				function()
					self.cardListData = ModelManager.PopularVoteModel:getPopularVoteCardInfo(self.tabListData[index])
					printTable(6,"self.cardListData",self.cardListData)
					self:setCardList()
			end)
        end
    end)
    self.tabList:setData(self.tabListData)
end

-- 倒计时
function PopularVoteView:updateCountTimer()
    if self.isEnd then return end
    local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.HeroVote)
    if not actData then return end
    local actId   = actData.id
    local status, addtime = ModelManager.ActivityModel:getActStatusAndLastTime(actId)
    if not addtime then return end

    if status == 2 and addtime == -1 then
        self.isEnd = false
        self.txt_leftTime:setText(Desc.activity_txt5)
    else
    	local encoreTime = ModelManager.PopularVoteModel:getPopularVoteEncoreTime()
        local lastTime = (addtime / 1000) - (encoreTime*24*60*60)
        if lastTime == -1 then
            self.txt_leftTime:setText(Desc.activity_txt5)
        else
            if not tolua.isnull(self.txt_leftTime) then
                self.txt_leftTime:setText(TimeLib.GetTimeFormatDay(lastTime, 2))
            end
            local function onCountDown(time)
                if not tolua.isnull(self.txt_leftTime) then
                    self.isEnd = false
                    self.txt_leftTime:setText(TimeLib.GetTimeFormatDay(time, 2))
                end
            end
            local function onEnd(...)
                self.isEnd = true
                if not tolua.isnull(self.txt_leftTime) then
                --  self.activityEnable = true
                self.txt_leftTime:setText(Desc.activity_txt18)
                end
            end
            if self.timer then
                TimeLib.clearCountDown(self.timer)
            end
            self.timer = TimeLib.newCountDown(lastTime, onCountDown, onEnd, false, false, false)
        end
    end
end

function PopularVoteView:PopularVote_updateData()
	self.popularHeroId = ModelManager.PopularVoteModel:getHeroVotePopularHeroId()
	self.loveHeroId = ModelManager.PopularVoteModel:getHeroVoteLoveHeroId()
	self.cardList:setNumItems(#self.cardListData)
end 

function PopularVoteView:_exit()
    TimeLib.clearCountDown(self.timer)
end

return PopularVoteView