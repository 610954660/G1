--Date :2021-01-13
--Author : generated by FairyGUI
--Desc : 

local PopularVoteBuyView,Super = class("PopularVoteBuyView", Window)

function PopularVoteBuyView:ctor()
	--LuaLog("PopularVoteBuyView ctor")
	self._packName = "PopularVote"
	self._compName = "PopularVoteBuyView"
	--self._rootDepth = LayerDepth.Window
	self.buyCardListData = {}
	self.timer= {}
	self.isEnd = false
end

function PopularVoteBuyView:_initEvent( )
	self.btn_help:removeClickListener()
	self.btn_help:addClickListener(function()
		local info = {}
	    info['title'] = Desc.PopularVoteBuyView_helpTitle
	    info['desc'] = Desc.PopularVoteBuyView_helpContent
	    ViewManager.open("GetPublicHelpView",info) 
	end)

	self.btn_rank:addClickListener(function()
		ViewManager.open("PopularVoteRankView")
	end)

	self.btn_reward:addClickListener(function()
		ViewManager.open("PopularVoteRewardView")
		-- ModelManager.PopularVoteModel.isSaleTime = false
		-- Dispatcher.dispatchEvent(EventType.PopularVote_refreshView)
	end)
end

function PopularVoteBuyView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:PopularVote.PopularVoteBuyView
	self.btn_help = viewNode:getChildAutoType('btn_help')--GButton
	self.btn_rank = viewNode:getChildAutoType('btn_rank')--GComponent
	self.btn_reward = viewNode:getChildAutoType('btn_reward')--btn_reward
		self.btn_reward.img_red = viewNode:getChildAutoType('btn_reward/img_red')--GImage
	self.buyCardList = viewNode:getChildAutoType('buyCardList')--GList
	self.txt_leftTime = viewNode:getChildAutoType('txt_leftTime')--GTextField
	--{autoFieldsEnd}:PopularVote.PopularVoteBuyView
	--Do not modify above code-------------
end

function PopularVoteBuyView:_initUI( )
	self:_initVM()
	local params = {}
	params.activityType = GameDef.ActivityType.HeroVote
	params.onSuccess = function(data)
		ModelManager.PopularVoteModel:setRankData(data or {})
		local popularHeroId = ModelManager.PopularVoteModel.popularHeroId
		local loveHeroId = ModelManager.PopularVoteModel.loveHeroId 
		self.buyCardListData[1] = popularHeroId 
		self.buyCardListData[2] = loveHeroId 
		self.buyCardListData[3] = loveHeroId 
		self:setBuyCardList()
	end
	RPCReq.Activity_HeroVote_GetRankData(params,params.onSuccess)
	RedManager.register("V_POPULAR_VOTE_REWARD",self.btn_reward.img_red)
	self:updateCountTimer()
	local dayStr = DateUtil.getOppostieDays()
	FileCacheManager.setBoolForKey("PopularVoteLoginRedDot"..dayStr, true)
	PopularVoteModel:checkPopularVoteLoginRedDot()
end

function PopularVoteBuyView:setBuyCardList()
	self.buyCardList:setItemRenderer(function(idx,obj)
        local index = idx + 1
        local showDiscountCtr = obj:getController("showDiscountCtr")
        local stempCtr = obj:getController("stempCtr")
        local showCtr = obj:getController("showCtr")
        local txt_discount = obj:getChildAutoType("txt_discount")
        local heroId = self.buyCardListData[index]
        if idx == 0 then --人气
       		stempCtr:setSelectedIndex(0)
        elseif idx == 1 then --心仪
	       	stempCtr:setSelectedIndex(1)
        elseif idx == 2 then --碎片
	       	stempCtr:setSelectedIndex(2)
        end
        if not heroId or heroId == 0 then 
        	showCtr:setSelectedIndex(1) --无投票
        else
        	showCtr:setSelectedIndex(0) --有投票
        	local heroInfo = false
        	if idx == 0 then --人气
        		heroInfo = ModelManager.PopularVoteModel:getHeroVoteTableInfo(heroId,1)
	        elseif idx == 1 then --心仪
        		heroInfo = ModelManager.PopularVoteModel:getHeroVoteTableInfo(heroId,2)
	       	else
	       		heroInfo = ModelManager.PopularVoteModel:getHeroVoteTableInfo(heroId,3)
	      	end
	      	--折扣
	      	if heroInfo.discount > 0 then 
       			showDiscountCtr:setSelectedIndex(1)
       			txt_discount:setText(string.format(Desc.PopularVote_Str4,heroInfo.discount))
       		else
       			showDiscountCtr:setSelectedIndex(0)
       		end
       		--奖励
       		local reward = heroInfo.sale
       		local rewardList = obj:getChildAutoType("rewardList")
	        rewardList:setItemRenderer(function (id,itemCell)
   				itemCell = BindManager.bindItemCell(itemCell)
   				local data = reward[id+1]
  				itemCell:setData(data.code, data.amount, data.type)
	        end)
       		rewardList:setData(reward)
       		--icon
	        local cardInfo = DynamicConfigData.t_hero[heroId]
	        local lhicon = BindManager.bindLihuiDisplay(obj:getChild("cardIcon/lihuiDisplay"))
			lhicon:setData(heroId)
			lhicon:pause()
			--购买次数
			local txt_buyNum = obj:getChildAutoType("txt_buyNum")
			local buyNum = ModelManager.PopularVoteModel.sale[heroInfo.id] or 0
			local num = heroInfo.limit - buyNum
			txt_buyNum:setText(string.format(Desc.PopularVote_Str7,num))
			--按钮
	        local btn_buy = obj:getChildAutoType("btn_buy")
	        local cost = btn_buy:getController("cost")
	        local button = btn_buy:getController("button")
	        if heroInfo.buyType == 1 then --人民币
	        	cost:setSelectedIndex(0)
	        	btn_buy:setText(string.format(Desc.PopularVote_Str10,heroInfo.price))
	        	btn_buy:removeClickListener(6)
		        btn_buy:addClickListener(
					function()
						ModelManager.RechargeModel:directBuy(heroInfo.price, GameDef.StatFuncType.SFT_HeroVoteSale, heroInfo.id, heroInfo.name,nil, heroInfo.showName1)
				end,6)
	        elseif heroInfo.buyType == 2 then --货币
	        	cost:setSelectedIndex(1)
	        	btn_buy:setText(Desc.PopularVote_Str11)
	        	btn_buy:getChildAutoType("icon"):setURL(PathConfiger.getMoneyIcon(heroInfo.cost[1].code))
	        	btn_buy:getChildAutoType("cost"):setText(heroInfo.cost[1].amount)
	        	btn_buy:removeClickListener(6)
		        btn_buy:addClickListener(
					function()
						if not PlayerModel:isCostEnough({{type = heroInfo.cost[1].type, code = heroInfo.cost[1].code, amount = heroInfo.cost[1].amount}}) then
							return
						end
						local params = {}
						params.activityType = GameDef.ActivityType.HeroVote
						params.id = heroInfo.id
						printTable(6,"params",params)
						RPCReq.Activity_HeroVote_Sale(params)
				end,6)
	        end
	        if num == 0 then 
	        	cost:setSelectedIndex(0)
	        	button:setSelectedIndex(2)
	        	btn_buy:setText(Desc.PopularVote_Str14)
	        	btn_buy:setTouchable(false)
	        else
	        	button:setSelectedIndex(0)
	        	btn_buy:setTouchable(true)
	        end
        end
    end)
    self.buyCardList:setData(self.buyCardListData)
end


-- 倒计时
function PopularVoteBuyView:updateCountTimer()
    if self.isEnd then return end
    local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.HeroVote)
    if not actData then return end
    local actId   = actData.id
    local status, addtime = ModelManager.ActivityModel:getActStatusAndLastTime(actId)

    if not addtime then return end

    if status == 2 and addtime == -1 then
        self.isEnd = false
        self.txt_leftTime:setText(Desc.activity_txt5)
    else
        local lastTime = addtime / 1000
        if lastTime == -1 then
            self.txt_leftTime:setText(Desc.activity_txt5)
        else
            if not tolua.isnull(self.txt_leftTime) then
                self.txt_leftTime:setText(TimeLib.GetTimeFormatDay(lastTime, 2))
            end
            local function onCountDown(time)
                if not tolua.isnull(self.txt_leftTime) then
                    self.isEnd = false
                    self.txt_leftTime:setText(TimeLib.GetTimeFormatDay(time, 2))
                end
            end
            local function onEnd(...)
                self.isEnd = true
                if not tolua.isnull(self.txt_leftTime) then
                --  self.activityEnable = true
                self.txt_leftTime:setText(Desc.activity_txt18)
                end
            end
            if self.timer then
                TimeLib.clearCountDown(self.timer)
            end
            self.timer = TimeLib.newCountDown(lastTime, onCountDown, onEnd, false, false, false)
        end
    end
end

function PopularVoteBuyView:PopularVote_updateData( )
	self.buyCardList:setNumItems(#self.buyCardListData)
end

function PopularVoteBuyView:_exit()
    TimeLib.clearCountDown(self.timer)
end

return PopularVoteBuyView