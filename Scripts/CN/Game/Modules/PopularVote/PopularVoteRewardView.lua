--Date :2021-01-13
--Author : generated by FairyGUI
--Desc : 

local PopularVoteRewardView,Super = class("PopularVoteRewardView", Window)

function PopularVoteRewardView:ctor()
	--LuaLog("PopularVoteRewardView ctor")
	self._packName = "PopularVote"
	self._compName = "PopularVoteRewardView"
	self._rootDepth = LayerDepth.PopWindow
	self.rewardListData = {}
end

function PopularVoteRewardView:initRewardListData()
	local info = DynamicConfigData.t_HeroVoteReward[ModelManager.PopularVoteModel.moduleId]
	for _,v in pairs(info) do
		table.insert(self.rewardListData,v)
	end
	table.sort( self.rewardListData, function (a,b)
		return a.times < b.times
	end )
end

function PopularVoteRewardView:_initEvent( )
	
end

function PopularVoteRewardView:getIndex()
	for index, data in ipairs(self.rewardListData) do
		local num = ModelManager.PopularVoteModel.votesPersonNum
		if (num >= data.times) and not ModelManager.PopularVoteModel.reward[data.times] then --可领取
			return index-1
		end
	end
	return 0
end

function PopularVoteRewardView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:PopularVote.PopularVoteRewardView
	self.blackbg = viewNode:getChildAutoType('blackbg')--GLabel
	self.frame = viewNode:getChildAutoType('frame')--GLabel
	self.rewardList = viewNode:getChildAutoType('rewardList')--GList
	--{autoFieldsEnd}:PopularVote.PopularVoteRewardView
	--Do not modify above code-------------
end

function PopularVoteRewardView:_initUI( )
	self:_initVM()
	self:initRewardListData()
	self:setRewardList()
end

function PopularVoteRewardView:setRewardList()
	self.rewardList:setItemRenderer(function (idx,obj)
		local index = idx + 1
		local data = self.rewardListData[index]
		local txt_condition = obj:getChildAutoType('txt_condition')
		local txt_progress = obj:getChildAutoType('txt_progress')
		local rewardList = obj:getChildAutoType('rewardList')
		local btn_get = obj:getChildAutoType('btn_get')
		local btnStateCtr = obj:getController('btnStateCtr')
		txt_condition:setText(string.format(Desc.PopularVote_Str2,data.times))
		local reward = data.reward
		rewardList:setItemRenderer(function (id,itemCell)
			local i = id+1
			itemCell = BindManager.bindItemCell(itemCell)
			itemCell:setData(reward[i].code, reward[i].amount, reward[i].type)
		end)
		rewardList:setData(reward)
		local num = ModelManager.PopularVoteModel.votesPersonNum
		local color = num >= data.times and "#119717" or "#d12121"
		txt_progress:setText(string.format(Desc.PopularVote_Str1,color,num,data.times))
		if (num >= data.times) and not ModelManager.PopularVoteModel.reward[data.times] then --可领取
			btnStateCtr:setSelectedIndex(1)
		elseif (num >= data.times) and ModelManager.PopularVoteModel.reward[data.times] then --已领取
			btnStateCtr:setSelectedIndex(2)
		else
			btnStateCtr:setSelectedIndex(0)
		end
		btn_get:removeClickListener(6)
        btn_get:addClickListener(
			function()
				local params = {}
				params.activityType = GameDef.ActivityType.HeroVote
				params.times = data.times
				RPCReq.Activity_HeroVote_PlayerGetVoteReward(params)
		end,6)
	end)
	self.rewardList:setData(self.rewardListData)
	self.rewardList:scrollToView(self:getIndex())
end

function PopularVoteRewardView:PopularVote_updateData()
	self.rewardList:setNumItems(#self.rewardListData)
end

return PopularVoteRewardView