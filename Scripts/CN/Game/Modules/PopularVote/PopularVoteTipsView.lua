--Date :2021-01-13
--Author : generated by FairyGUI
--Desc : 

local PopularVoteTipsView,Super = class("PopularVoteTipsView", Window)

function PopularVoteTipsView:ctor()
	--LuaLog("PopularVoteTipsView ctor")
	self._packName = "PopularVote"
	self._compName = "PopularVoteTipsView"
	self._rootDepth = LayerDepth.PopWindow
	self.heroId = false
	self.voteNum = false
	self.maxNum = 0
end

function PopularVoteTipsView:_initEvent( )
	self.btn_add:addClickListener(function()
		local num = math.floor(self.dslider:getValue() + 1)
		if num >= self.maxNum then
			num = self.maxNum 
		end
		self.voteNum = num
		self.dslider:setValue(num)
		self.txt_inputNum:setText(string.format(Desc.PopularVote_Str5,num))
	end)

	self.btn_back:addClickListener(function()
		local num = math.floor(self.dslider:getValue() - 1)
		if num <= 0 then
			num = 0
		end
		self.voteNum = num
		self.dslider:setValue(num)
		self.txt_inputNum:setText(string.format(Desc.PopularVote_Str5,num))
	end)

	self.btn_send:addClickListener(function()
  		local itemCode = ModelManager.PopularVoteModel:getPopularVoteItem()
		if not PlayerModel:isCostEnough({{type = 3, code = itemCode, amount = 1}}) then
			return
		end
		local params = {}
		params.heroCode = self.heroId
		params.votesNum = self.voteNum
		params.activityType = GameDef.ActivityType.HeroVote
		RPCReq.Activity_HeroVote_PlayerVote(params)
		ViewManager.close("PopularVoteTipsView")
	end)
end

function PopularVoteTipsView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:PopularVote.PopularVoteTipsView
	self.btn_add = viewNode:getChildAutoType('$btn_add')--GButton
	self.btn_back = viewNode:getChildAutoType('$btn_back')--GButton
	self.dslider = viewNode:getChildAutoType('$dslider')--GSlider
	self.blackbg = viewNode:getChildAutoType('blackbg')--GLabel
	self.btn_send = viewNode:getChildAutoType('btn_send')--GComponent
	self.frame = viewNode:getChildAutoType('frame')--GLabel
	self.icon = viewNode:getChildAutoType('icon')--GLoader
	self.img_category = viewNode:getChildAutoType('img_category')--GLoader
	self.txt_inputNum = viewNode:getChildAutoType('txt_inputNum')--GRichTextField
	self.txt_myNum = viewNode:getChildAutoType('txt_myNum')--GRichTextField
	self.txt_num = viewNode:getChildAutoType('txt_num')--GTextField
	self.txt_outputNum = viewNode:getChildAutoType('txt_outputNum')--GRichTextField
	--{autoFieldsEnd}:PopularVote.PopularVoteTipsView
	--Do not modify above code-------------
end

function PopularVoteTipsView:_initUI( )
	self:_initVM()
	self.heroId = self._args.heroId
	self.icon:setURL(PathConfiger.getHeroCardex(self.heroId))
    local cardInfo = DynamicConfigData.t_hero[self.heroId]
    self.img_category:setURL(PathConfiger.getCardCategory(cardInfo.category))
  	local itemCode = ModelManager.PopularVoteModel:getPopularVoteItem()
	local heroData = ModelManager.PopularVoteModel.votesAll[self.heroId]
  	local loveData = ModelManager.PopularVoteModel.votesPerson[self.heroId]
	local votesNum = heroData and heroData.votesNum or 0
  	local loveNum = loveData and loveData.votesNum or 0
    self.txt_num:setText(string.format(Desc.PopularVote_Str3,votesNum))
	local num = ModelManager.PackModel:getItemsFromAllPackByCode(itemCode) 
	self.voteNum = num
	self.maxNum = num
	if loveNum == 0 then 
		self.txt_myNum:setText("")
	else
		self.txt_myNum:setText(string.format(Desc.PopularVote_Str12,loveNum))
	end
    self.txt_outputNum:setText(string.format(Desc.PopularVote_Str6,num))
	self.txt_inputNum:setText(string.format(Desc.PopularVote_Str5,num))
	local function onChanged( )
		local num = math.floor(self.dslider:getValue() + 0.5)
		if num >= self.maxNum then
			num = self.maxNum
		end
		self.voteNum = num
		self.dslider:setValue(num)
		self.txt_inputNum:setText(string.format(Desc.PopularVote_Str5,num))
	end
	self.dslider:addEventListener(FUIEventType.Changed,onChanged)
    self.dslider:setValue(num)
	self.dslider:setMax(num)
end

function PopularVoteTipsView:PopularVote_updateItemNum( )
	local itemCode = ModelManager.PopularVoteModel:getPopularVoteItem()
	local num = ModelManager.PackModel:getItemsFromAllPackByCode(itemCode) 
	self.voteNum = num
	self.maxNum = num
    self.txt_outputNum:setText(string.format(Desc.PopularVote_Str6,num))
	self.txt_inputNum:setText(string.format(Desc.PopularVote_Str5,num))
end

return PopularVoteTipsView