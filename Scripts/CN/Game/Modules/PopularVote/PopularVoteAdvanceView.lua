--Date :2021-01-13
--Author : generated by FairyGUI
--Desc : 

local PopularVoteAdvanceView,Super = class("PopularVoteAdvanceView", Window)

function PopularVoteAdvanceView:ctor()
	--LuaLog("PopularVoteAdvanceView ctor")
	self._packName = "PopularVote"
	self._compName = "PopularVoteAdvanceView"
	self._rootDepth = LayerDepth.PopWindow
	self.cardListData = {}
	self.timer= {}
	self.isEnd = false
end

function PopularVoteAdvanceView:_initEvent( )
	self.btn_help:removeClickListener()
	self.btn_help:addClickListener(function()
		local info = {}
	    info['title'] = Desc.PopularVoteAdvanceView_helpTitle
	    info['desc'] = Desc.PopularVoteAdvanceView_helpContent
	    ViewManager.open("GetPublicHelpView",info) 
	end)

	self.closeButton:addClickListener(function()
		ViewManager.close("PopularVoteAdvanceView")
	end)
	self.blackbg:addClickListener(function()
		ViewManager.close("PopularVoteAdvanceView")
	end)
end

function PopularVoteAdvanceView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:PopularVote.PopularVoteAdvanceView
	self.blackbg = viewNode:getChildAutoType('blackbg')--GLabel
	self.btn_help = viewNode:getChildAutoType('btn_help')--GButton
	self.cardList = viewNode:getChildAutoType('cardList')--GList
	self.closeButton = viewNode:getChildAutoType('closeButton')--GButton
	self.txt_discount = viewNode:getChildAutoType('txt_discount')--GTextField
	self.txt_leftTime = viewNode:getChildAutoType('txt_leftTime')--GRichTextField
	--{autoFieldsEnd}:PopularVote.PopularVoteAdvanceView
	--Do not modify above code-------------
end

function PopularVoteAdvanceView:_initUI( )
	self:_initVM()
	local params = {}
	params.activityType = GameDef.ActivityType.HeroVote
	params.onSuccess = function(data)
		ModelManager.PopularVoteModel:setRankData(data or {})
		local popularHeroId = ModelManager.PopularVoteModel.popularHeroId
		local popularHeroNum = ModelManager.PopularVoteModel.popularHeroNum
		local loveHeroId = ModelManager.PopularVoteModel.loveHeroId
		local loveHeroNum = ModelManager.PopularVoteModel.loveHeroNum   
		self.cardListData[1] = {heroId = popularHeroId, num = popularHeroNum}
		self.cardListData[2] = {heroId = loveHeroId, num = loveHeroNum}
		self:setcardList()
		if not popularHeroId then 
			local info = DynamicConfigData.t_HeroVoteTable[ModelManager.PopularVoteModel.moduleId][1]
			self.txt_discount:setText(info.discount)
		else
			local info = ModelManager.PopularVoteModel:getHeroVoteTableInfo(popularHeroId,1)
			self.txt_discount:setText(info.discount)
		end
	end
	RPCReq.Activity_HeroVote_GetRankData(params,params.onSuccess)
	self:updateCountTimer()
end

function PopularVoteAdvanceView:setcardList()
	self.cardList:setItemRenderer(function (idx,obj)
		local index = idx + 1
        local data = self.cardListData[index]
        local heroId = data.heroId
        local num = data.num
        local showCtr = obj:getController("showCtr")
        local showDiscountCtr = obj:getController("showDiscountCtr")
        local icon = obj:getChildAutoType("icon")
        local img_category = obj:getChildAutoType("img_category")
        local txt_discount = obj:getChildAutoType("txt_discount")
        local txt_num = obj:getChildAutoType("txt_num")
        local txt_title = obj:getChildAutoType("txt_title")
        txt_num:setText(string.format(Desc.PopularVote_Str3,num))
        if not heroId or heroId == 0 then 
        	showCtr:setSelectedIndex(1)
        	showDiscountCtr:setSelectedIndex(0)
        else
        	showCtr:setSelectedIndex(0)
        	icon:setURL(PathConfiger.getHeroCardex(heroId))
        	local cardInfo = DynamicConfigData.t_hero[heroId]
        	img_category:setURL(PathConfiger.getCardCategory(cardInfo.category))
        	if idx == 0 then --人气
        		local heroInfo = ModelManager.PopularVoteModel:getHeroVoteTableInfo(heroId,1)
	        	if heroInfo.discount > 0 then 
	       			showDiscountCtr:setSelectedIndex(1)
	       			txt_discount:setText(string.format(Desc.PopularVote_Str4,heroInfo.discount))
	       		else
	       			showDiscountCtr:setSelectedIndex(0)
	       		end
	       		txt_title:setText(Desc.PopularVote_Str8)
	       	else --心仪
        		local heroInfo = ModelManager.PopularVoteModel:getHeroVoteTableInfo(heroId,2)
	       		if heroInfo.discount > 0 then 
	       			showDiscountCtr:setSelectedIndex(1)
	       			txt_discount:setText(string.format(Desc.PopularVote_Str4,heroInfo.discount))
	       		else
	       			showDiscountCtr:setSelectedIndex(0)
	       		end
	       		txt_title:setText(Desc.PopularVote_Str9)
	       	end
        end
	end)
	self.cardList:setData(self.cardListData)
end

-- 倒计时
function PopularVoteAdvanceView:updateCountTimer()
    if self.isEnd then return end
    local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.HeroVote)
    if not actData then return end
    local actId   = actData.id
    local status, addtime = ModelManager.ActivityModel:getActStatusAndLastTime(actId)
    if not addtime then return end

    if status == 2 and addtime == -1 then
        self.isEnd = false
        self.txt_leftTime:setText(Desc.activity_txt5)
    else
    	local encoreTime = ModelManager.PopularVoteModel:getPopularVoteEncoreTime()
        local lastTime = (addtime / 1000) - (encoreTime*24*60*60)
        if lastTime == -1 then
            self.txt_leftTime:setText(Desc.activity_txt5)
        else
            if not tolua.isnull(self.txt_leftTime) then
                self.txt_leftTime:setText(TimeLib.GetTimeFormatDay(lastTime, 2))
            end
            local function onCountDown(time)
                if not tolua.isnull(self.txt_leftTime) then
                    self.isEnd = false
                    self.txt_leftTime:setText(TimeLib.GetTimeFormatDay(time, 2))
                end
            end
            local function onEnd(...)
                self.isEnd = true
                if not tolua.isnull(self.txt_leftTime) then
                --  self.activityEnable = true
                self.txt_leftTime:setText(Desc.activity_txt18)
                end
            end
            if self.timer then
                TimeLib.clearCountDown(self.timer)
            end
            self.timer = TimeLib.newCountDown(lastTime, onCountDown, onEnd, false, false, false)
        end
    end
end

function PopularVoteAdvanceView:_exit()
    TimeLib.clearCountDown(self.timer)
end

return PopularVoteAdvanceView