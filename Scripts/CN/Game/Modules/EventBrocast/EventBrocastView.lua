--Date :2021-01-15
--Author : generated by FairyGUI
--Desc : 

local EventBrocastView,Super = class("EventBrocastView", Window)

function EventBrocastView:ctor()
	--LuaLog("EventBrocastView ctor")
	self._packName = "EventBrocast"
	self._compName = "EventBrocastView"
	self._rootDepth = LayerDepth.PopWindow
	
	self.titleBoardObj = false
	self.voteBoardObj = false
	self.rewardBoardObj = false
	
	self.curPageIndex = 0
	self.clickFuc = false
	self.newsDataList = false
	self._bgClose = false
end

function EventBrocastView:_initEvent( )
	
end

function EventBrocastView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:EventBrocast.EventBrocastView
	self.blackbg = viewNode:getChildAutoType('blackbg')--GLabel
	self.boardCtrl = viewNode:getController('boardCtrl')--Controller
	self.btn_next = viewNode:getChildAutoType('btn_next')--GComponent
	self.btn_prev = viewNode:getChildAutoType('btn_prev')--GComponent
	self.closeButton = viewNode:getChildAutoType('closeButton')--GButton
	self.rewardBoard = viewNode:getChildAutoType('rewardBoard')--rewardBoard
		self.rewardBoard.btn_getReward = viewNode:getChildAutoType('rewardBoard/btn_getReward')--GButton
		self.rewardBoard.img_title = viewNode:getChildAutoType('rewardBoard/img_title')--GLoader
		self.rewardBoard.list_reward = viewNode:getChildAutoType('rewardBoard/list_reward')--GList
		self.rewardBoard.txt_content = viewNode:getChildAutoType('rewardBoard/txt_content')--GRichTextField
	self.titleBoard = viewNode:getChildAutoType('titleBoard')--titleBoard
		self.titleBoard.txt_content = viewNode:getChildAutoType('titleBoard/txt_content')--GRichTextField
	self.voteBoard = viewNode:getChildAutoType('voteBoard')--VoteBoard
		self.voteBoard.img_title = viewNode:getChildAutoType('voteBoard/img_title')--GLoader
		self.voteBoard.modelItem1 = viewNode:getChildAutoType('voteBoard/modelItem1')--modelitem
			self.voteBoard.modelItem1.btn_vote = viewNode:getChildAutoType('voteBoard/modelItem1/btn_vote')--btn_vote
			self.voteBoard.modelItem1.lihui = viewNode:getChildAutoType('voteBoard/modelItem1/lihui')--lihuiMark
				self.voteBoard.modelItem1.lihui.lihuiDisplay = viewNode:getChildAutoType('voteBoard/modelItem1/lihui/lihuiDisplay')--GButton
				self.voteBoard.modelItem1.lihui.mark = viewNode:getChildAutoType('voteBoard/modelItem1/lihui/mark')--GImage
			self.voteBoard.modelItem1.txt_combat = viewNode:getChildAutoType('voteBoard/modelItem1/txt_combat')--GTextField
			self.voteBoard.modelItem1.txt_level = viewNode:getChildAutoType('voteBoard/modelItem1/txt_level')--GTextField
			self.voteBoard.modelItem1.txt_name = viewNode:getChildAutoType('voteBoard/modelItem1/txt_name')--GTextField
		self.voteBoard.modelItem2 = viewNode:getChildAutoType('voteBoard/modelItem2')--modelitem
			self.voteBoard.modelItem2.btn_vote = viewNode:getChildAutoType('voteBoard/modelItem2/btn_vote')--btn_vote
			self.voteBoard.modelItem2.lihui = viewNode:getChildAutoType('voteBoard/modelItem2/lihui')--lihuiMark
				self.voteBoard.modelItem2.lihui.lihuiDisplay = viewNode:getChildAutoType('voteBoard/modelItem2/lihui/lihuiDisplay')--GButton
				self.voteBoard.modelItem2.lihui.mark = viewNode:getChildAutoType('voteBoard/modelItem2/lihui/mark')--GImage
			self.voteBoard.modelItem2.txt_combat = viewNode:getChildAutoType('voteBoard/modelItem2/txt_combat')--GTextField
			self.voteBoard.modelItem2.txt_level = viewNode:getChildAutoType('voteBoard/modelItem2/txt_level')--GTextField
			self.voteBoard.modelItem2.txt_name = viewNode:getChildAutoType('voteBoard/modelItem2/txt_name')--GTextField
		self.voteBoard.modelItem3 = viewNode:getChildAutoType('voteBoard/modelItem3')--modelitem
			self.voteBoard.modelItem3.btn_vote = viewNode:getChildAutoType('voteBoard/modelItem3/btn_vote')--btn_vote
			self.voteBoard.modelItem3.lihui = viewNode:getChildAutoType('voteBoard/modelItem3/lihui')--lihuiMark
				self.voteBoard.modelItem3.lihui.lihuiDisplay = viewNode:getChildAutoType('voteBoard/modelItem3/lihui/lihuiDisplay')--GButton
				self.voteBoard.modelItem3.lihui.mark = viewNode:getChildAutoType('voteBoard/modelItem3/lihui/mark')--GImage
			self.voteBoard.modelItem3.txt_combat = viewNode:getChildAutoType('voteBoard/modelItem3/txt_combat')--GTextField
			self.voteBoard.modelItem3.txt_level = viewNode:getChildAutoType('voteBoard/modelItem3/txt_level')--GTextField
			self.voteBoard.modelItem3.txt_name = viewNode:getChildAutoType('voteBoard/modelItem3/txt_name')--GTextField
		self.voteBoard.txt_content = viewNode:getChildAutoType('voteBoard/txt_content')--GRichTextField
	--{autoFieldsEnd}:EventBrocast.EventBrocastView
	--Do not modify above code-------------
	
	
	self.titleBoardObj = BindManager.bindClass("Game.Modules.EventBrocast.TitleBoard", self.titleBoard)
	self.voteBoardObj = BindManager.bindClass("Game.Modules.EventBrocast.VoteBoard", self.voteBoard)
	self.rewardBoardObj = BindManager.bindClass("Game.Modules.EventBrocast.RewardBoard", self.rewardBoard)
	
	self.newsDataList = EventBrocastModel:getShowNewList()
end

function EventBrocastView:_initListener( )
	
	self.btn_next:addClickListener(function()
		self.curPageIndex = self.curPageIndex + 1
		self:updatePage()
	end)

	self.btn_prev:addClickListener(function()
		self.curPageIndex = self.curPageIndex - 1
		self:updatePage()
	end)

end

function EventBrocastView:_initUI( )
	self:_initVM()
	self:_initListener()
	
	self:updatePage()
end


function EventBrocastView:showDesc(txt_desc, str)
	local textStr = string.gsub(str, "<br>","\n")
--	local textLen = StringUtil.utf8len(textStr)
	
--	local n = 1
	txt_desc:setText(textStr);
	--[[local function updateText()
		local str = StringUtil.utf8sub(textStr,0, n)
		txt_desc:setText(str);
		n = n + 1
		if n > textLen then
			txt_desc:displayObject():stopAllActions()
			self.clickFuc = false
			if self.isAuto then
				txt_desc:displayObject():runAction(cc.Sequence:create(cc.DelayTime:create(3),cc.CallFunc:create(function() self:runNext() end)))
			end
		end
	end--]]
	
	--txt_desc:displayObject():stopAllActions()
	--txt_desc:displayObject():runAction(cc.RepeatForever:create(cc.Sequence:create(cc.DelayTime:create(0.02),cc.CallFunc:create(function() updateText() end))))
	
	--[[self.clickFuc = function()
		txt_desc:displayObject():stopAllActions()
		txt_desc:setTitle(textStr)
	end--]]
end

function EventBrocastView:updatePage()
	if self.curPageIndex == 0 then  --欢迎页
		self.boardCtrl:setSelectedIndex(0)
		self:showDesc(self.titleBoard.txt_content, Desc.eventBrocast_welcome)
	elseif self.curPageIndex == #self.newsDataList + 1 then --领奖页
		self.boardCtrl:setSelectedIndex(2)
		self:showDesc(self.rewardBoard.txt_content, Desc.eventBrocast_bye)
	else --内容页
		self.boardCtrl:setSelectedIndex(1)
		local news = self.newsDataList[self.curPageIndex]
		self.voteBoardObj:setData(news)
		local config = DynamicConfigData.t_EventContent[news.id]
		self.voteBoardObj:setTitle(config.photoName)
		local playerName1 = news.playerMap[1] and news.playerMap[1].name or ""
		local playerName2 = news.playerMap[2] and news.playerMap[2].name or ""
		local playerName3 = news.playerMap[3] and news.playerMap[3].name or ""
		self:showDesc(self.voteBoard.txt_content, string.format(config.content, playerName1,playerName2,playerName3))
	end
	
	self:updateBtns()
end

function EventBrocastView:updateBtns()
	self.btn_prev:setVisible(self.curPageIndex ~= 0)
	self.btn_next:setVisible(self.curPageIndex <= #self.newsDataList)

end



return EventBrocastView