--Date :2021-01-21
--Author : generated by FairyGUI
--Desc : 

local NewYearActivityModel = class("NewYearActivity", BaseModel)

function NewYearActivityModel:ctor()
    self.isInitConfig = false
    self.bigBossId = false
    self.bigId = false
    self.mapPointConfig = {} --1小怪 2宝箱 3小boss 4大boss 5出生点 6不可行走
    self.pointTypeConfig = {}
    self.newYearBoss = {}
    self.newYearBigBoss = {}
    self.newYearBigBossMaxDifficult = {}

    self.mapCellList = {} --地图格子坐标
    self.bossTimes = 0 --大BOSS可挑战次数
    self.killNum = 0 --大BOSS击退次数
    self.drawTimes = 0 --可以抽奖的次数
    self.contribute = 0 --贡献值
    self.totalScore = 0 --大boss积分
    self.maxScore = 0 --大boss最大积分
    self.nextId = 0 --下个刷新的小BOSS
    self.refreshMs = false --大BOSS刷新时间
    self.bossInfo = {} --BOSS信息
    self:initListeners()
end

function  NewYearActivityModel:setMapCellList(data)
    self.mapCellList = data
end

function NewYearActivityModel:init()
    
end

function NewYearActivityModel:setNewYearActivityData(data)
    if data.times then 
        self.bossTimes = data.times
        self:checkBigBossRed()
        Dispatcher.dispatchEvent(EventType.NewYearActivity_BossTimesUpdate)
    end
    if data.killNum then 
        self.killNum = data.killNum
        Dispatcher.dispatchEvent(EventType.NewYearActivity_KillNumUpdate)
    end
    if data.drawTimes then 
        self.drawTimes = data.drawTimes
        self:checkRedPackRed()
        Dispatcher.dispatchEvent(EventType.NewYearActivity_DrawTimesUpdate)
    end
    if data.contribute then 
        self.contribute = data.contribute
        Dispatcher.dispatchEvent(EventType.NewYearActivity_ContributeUpdate)
    end
    if data.nextId then 
        self.nextId = data.nextId
        Dispatcher.dispatchEvent(EventType.NewYearActivity_NextIdUpdate)
    end
    if data.totalScore then 
        self.totalScore = data.totalScore
    end
    if data.maxScore then 
        self.maxScore = data.maxScore
    end
    if data.refreshMs then 
        self.refreshMs = data.refreshMs
    end
    if data.bossInfo then 
        self.bossInfo = {}
        for _, v in pairs(data.bossInfo) do
           self.bossInfo[v.id] = v
        end
        self:checkSmallBossRed()
        Dispatcher.dispatchEvent(EventType.NewYearActivity_BossInfoUpdate)
    end
end

function NewYearActivityModel:getBossData(id)
    return self.bossInfo[id]
end

-- function NewYearActivityModel:getBigBossOpenDay()
--    local bossTimer = false
--    local limit[1] = DynamicConfigData.t_NewYearBoss[self.bigId].limit
--    local openLimitDay = limit[2]
--    local openDay = ServerTimeModel:getOpenDay()
--    if openLimitDay < openLimitDay then 
--         bossTimer = openLimitDay - openLimitDay
--    end
--    return bossTimer
-- end

function NewYearActivityModel:initConfig()
    self.isInitConfig = true
    --地图点配置
    for _, v in pairs(DynamicConfigData.t_ClientPoint) do
        self.mapPointConfig[v.type] = self.mapPointConfig[v.type] or {}
        table.insert(self.mapPointConfig[v.type],v)
        for _, pos in ipairs(v.birthPoint) do
            local key = pos.row .."_".. pos.col
            self.pointTypeConfig[key] = v
        end
    end
    --boss配置
    for _, v in ipairs(DynamicConfigData.t_NewYearBoss) do
        self.newYearBoss[v.id] = v
        if v.type == 4 then
            self.bigBossId = v.bossId 
            self.bigId = v.id
        end
    end
    --大boss配置
    for i, v in pairs(DynamicConfigData.t_NewYearBigBoss) do
        self.newYearBigBoss[i] = self.newYearBigBoss[i] or {}
       for _, j in pairs(v) do
            self.newYearBigBoss[i][j.difficult] = j
            if not self.newYearBigBossMaxDifficult[i] or self.newYearBigBossMaxDifficult[i] < j.difficult then 
                self.newYearBigBossMaxDifficult[i] = j.difficult
            end
       end
    end
end

--根据地图类型获取地图位置
function NewYearActivityModel:getMapPosConfig(mapType)
    if not self.isInitConfig then self:initConfig() end
    return self.mapPointConfig[mapType] or {}
end

--根据位置获取地图类型
function NewYearActivityModel:getMapTypeConfig(row,col)
     local key = row .."_".. col
    if not self.isInitConfig then self:initConfig() end
    return self.pointTypeConfig[key] and self.pointTypeConfig[key].type or 0
end

function NewYearActivityModel:getPointConfig(row,col)
     local key = row .."_".. col
    if not self.isInitConfig then self:initConfig() end
    return self.pointTypeConfig[key] or {}
end

--移动到BOSS区域外一圈最近的距离格子，返回格子的行列
function NewYearActivityModel:moveToBoss(row,col,heroPos)
    local key = row .."_".. col
    local cellList = self.pointTypeConfig[key].standPoint
    local cell = self:getCanMoveCell(cellList,heroPos)
    return cell
end

--移动到小怪/宝箱外一圈最近的距离格子，返回格子的行列
function NewYearActivityModel:moveToBox(row,col,heroPos)
    local cellList = self:getRoundCell(row,col)
    local cell = self:getCanMoveCell(cellList,heroPos)
    return cell
end

--周围一圈的格子中两点距离最短的格子
function NewYearActivityModel:getCanMoveCell(cellList,heroPos)
    printTable(6,"cellList",cellList)
    local cell = false
    local nowDistance = false
    for _, v in ipairs(cellList) do
        print(6,"pos ",v.row,v.col)
        local cellPos = self.mapCellList[v.row][v.col]
        local x1 = heroPos.x
        local y1 = heroPos.y
        local x2 = cellPos.x
        local y2 = cellPos.y
        local distance = math.sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2))
        if not nowDistance or nowDistance > distance then 
            nowDistance = distance
            cell = v
        end
    end
    return cell
end

--获取区域范围外一圈的格子(单个格子)
function NewYearActivityModel:getRoundCell(row, col)
    local roundCell = {}
    for i = 1, 8 do
        if i == 1 then --左上
            local xx = row - 1 
            local yy = col + 1 
            if not self:isObstacleCell(xx,yy) then 
                table.insert(roundCell,{row = xx, col = yy})
            end
        elseif i == 2 then --上
            local xx = row
            local yy = col + 1 
            if not self:isObstacleCell(xx,yy) then 
                table.insert(roundCell,{row = xx, col = yy})
            end
        elseif i == 3 then --右上
            local xx = row + 1
            local yy = col + 1 
            if not self:isObstacleCell(xx,yy) then 
                table.insert(roundCell,{row = xx, col = yy})
            end
        elseif i == 4 then --左
            local xx = row - 1
            local yy = col 
            if not self:isObstacleCell(xx,yy) then 
                table.insert(roundCell,{row = xx, col = yy})
            end
        elseif i == 5 then --左下
            local xx = row - 1
            local yy = col - 1
            if not self:isObstacleCell(xx,yy) then 
                table.insert(roundCell,{row = xx, col = yy})
            end
        elseif i == 6 then --下
            local xx = row 
            local yy = col - 1
            if not self:isObstacleCell(xx,yy) then 
                table.insert(roundCell,{row = xx, col = yy})
            end
        elseif i == 7 then --右下
            local xx = row + 1
            local yy = col - 1
            if not self:isObstacleCell(xx,yy) then 
                table.insert(roundCell,{row = xx, col = yy})
            end
        elseif i == 8 then --右
            local xx = row + 1
            local yy = col 
            if not self:isObstacleCell(xx,yy) then 
                table.insert(roundCell,{row = xx, col = yy})
            end
        end
    end
    return roundCell
end

function NewYearActivityModel:isObstacleCell(row,col)
    local key = row .."_".. col
    local mapType = self.pointTypeConfig[key] and self.pointTypeConfig[key].type or 0
    return mapType == 6
end

--获取Boss配置
function NewYearActivityModel:getNewYearBossConfig(id)
    if not self.isInitConfig then self:initConfig() end 
    return self.newYearBoss[id]
end

--获取大boss配置
function NewYearActivityModel:getNewYearBigBossConfig(num,difficult)
    if not self.isInitConfig then self:initConfig() end
    return self.newYearBigBoss[num][difficult] or {}
end

--获取大bossId
function NewYearActivityModel:getBigBossId()
    if not self.isInitConfig then self:initConfig() end
    return self.bigBossId
end

function NewYearActivityModel:getBigId()
    if not self.isInitConfig then self:initConfig() end
    return self.bigId
end

--获取大boss最大难度
function NewYearActivityModel:getNewYearBigBossMaxDifficult(num)
if not self.isInitConfig then self:initConfig() end
    return self.newYearBigBossMaxDifficult[num]
end

--获取BOSS击退所需积分
function NewYearActivityModel:getBossRepulseRange(num)
    local info = DynamicConfigData.t_NewYearActivity[1].repulseRange
    for _, v in ipairs(info) do
        if num >= v.minNum and num <= maxNum then 
            return v.score
        end
    end
    return 0
end

function NewYearActivityModel:getRedPackNum()
    local contribute = DynamicConfigData.t_NewYearActivity[1].contribute
    for _, v in ipairs(contribute) do
        if self.contribute < v then 
            return v - self.contribute
        end
    end
    return 0
end

--登录游戏检查红点
function NewYearActivityModel:public_enterGame() 
	self:checkContributeItemRed()
end

function NewYearActivityModel:pack_item_change(_,data)
    local contributeCost = DynamicConfigData.t_NewYearActivity[1].contributeCost
	if data[1] and data[1].itemCode and data[1].itemCode == contributeCost then	
		self:checkContributeItemRed()
	end
end

--贡献道具红点
function NewYearActivityModel:checkContributeItemRed()
    local contributeCost = DynamicConfigData.t_NewYearActivity[1].contributeCost
    local haveNum = ModelManager.PackModel:getItemsFromAllPackByCode(contributeCost) 
    RedManager.updateValue("V_NEW_YEAR_CONTRIBUTE_ITEM",haveNum > 0)
end

--小BOSS红点
function NewYearActivityModel:checkSmallBossRed()
    local redDot = false
    for _, v in pairs(self.bossInfo) do
        local bossInfo = self:getNewYearBossConfig(v.id)
        if bossInfo.type == 3 then 
            if v.status == 2 then 
                redDot = true
                break
            end
        end
    end
    RedManager.updateValue("V_NEW_YEAR_SMALL_BOSS",redDot)
end

--大BOSS红点
function NewYearActivityModel:checkBigBossRed()
    local redDot = self.bossTimes > 0
    RedManager.updateValue("V_NEW_YEAR_BIG_BOSS",redDot)
end

--红包红点
function NewYearActivityModel:checkRedPackRed()
    local redDot = self.drawTimes > 0
    RedManager.updateValue("V_NEW_YEAR_BIG_RED_PACK",redDot)
end
return NewYearActivityModel
