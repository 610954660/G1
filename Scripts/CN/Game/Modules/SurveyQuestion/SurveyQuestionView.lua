--Date :2021-01-27
--Author : generated by FairyGUI
--Desc : 

local SurveyQuestionView,Super = class("SurveyQuestionView", Window)

function SurveyQuestionView:ctor()
	--LuaLog("SurveyQuestionView ctor")
	self._packName = "SurveyQuestion"
	self._compName = "SurveyQuestionView"
	self._rootDepth = LayerDepth.PopWindow
	
	self.showContent=false
	self.chooseId=false
	
	
	self.supportCount=0
	self.opposeCount=0
end

function SurveyQuestionView:_initEvent( )
	
end

function SurveyQuestionView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:SurveyQuestion.SurveyQuestionView
	self.txt_countTimer = viewNode:getChildAutoType('$txt_countTimer')--GTextField
	self.acEndTime = viewNode:getChildAutoType('acEndTime')--GGroup
	self.bg = viewNode:getChildAutoType('bg')--GLoader
	self.blackbg = viewNode:getChildAutoType('blackbg')--GLabel
	self.btn_Vote = viewNode:getChildAutoType('btn_Vote')--GButton
	self.closeButton = viewNode:getChildAutoType('closeButton')--GButton
	self.hadVote = viewNode:getController('hadVote')--Controller
	self.opposeCom = viewNode:getChildAutoType('opposeCom')--voteProgeessCom
		self.opposeCom.checkTag = viewNode:getChildAutoType('opposeCom/checkTag')--GTextField
		self.opposeCom.perCent = viewNode:getChildAutoType('opposeCom/perCent')--GTextField
		self.opposeCom.progressBar = viewNode:getChildAutoType('opposeCom/progressBar')--GProgressBar
	self.rewardList = viewNode:getChildAutoType('rewardList')--GList
	self.scrollText1 = viewNode:getChildAutoType('scrollText1')--scrollTextCom
	self.scrollText2 = viewNode:getChildAutoType('scrollText2')--scrollTextCom
	self.supportCom = viewNode:getChildAutoType('supportCom')--voteProgeessCom
		self.supportCom.checkTag = viewNode:getChildAutoType('supportCom/checkTag')--GTextField
		self.supportCom.perCent = viewNode:getChildAutoType('supportCom/perCent')--GTextField
		self.supportCom.progressBar = viewNode:getChildAutoType('supportCom/progressBar')--GProgressBar
	self.tabList = viewNode:getChildAutoType('tabList')--GList
	self.voteResult = viewNode:getChildAutoType('voteResult')--GRichTextField
	--{autoFieldsEnd}:SurveyQuestion.SurveyQuestionView
	--Do not modify above code-------------
end

function SurveyQuestionView:_initListener( )
	
	self.tabList:regUnscrollItemClick(function (i)
			self.chooseId=i+1
			self.btn_Vote:setGrayed(false)
			self.btn_Vote:setTouchable(true)
	end)
	
	self.btn_Vote:addClickListener(function()
			SurveyQuestionModel:surveyOnVote(self.chooseId,function ()
				
			end)
	end)

	--self.closeButton:addClickListener(function()

	--end)

	self.rewardList:setItemRenderer(function(index, obj)
        local rewardData=self.showContent.rewards[index+1]
		obj:setTitle("第"..(index+1).."天")
		local itemcell=BindManager.bindItemCell(obj:getChildAutoType("itemCell"))
		local itemData = ItemsUtil.createItemData({data = rewardData})
		itemcell:setItemData(itemData)	
	end)

end

function SurveyQuestionView:_initUI( )
	self:_initVM()
	self:_initListener()
	self:setData()
	self:updateCountTimer()
end

function SurveyQuestionView:setData( )
	local acConfig=SurveyQuestionModel:getAciveConfig()
	self.showContent=acConfig.showContent
	self.rewardList:setNumItems(#self.showContent.rewards)
	self.scrollText1:setTitle(self.showContent.title)
	self.scrollText2:setTitle(self.showContent.desc)
	self:setActiveData()
	if not self.chooseId then
		self.btn_Vote:setGrayed(true)
		self.btn_Vote:setTouchable(false)
	end
	--self:activityVoteEnd()
end

function SurveyQuestionView:setActiveData()
	local activeData=SurveyQuestionModel:getAciveData()
	if activeData.choseId then
		self.hadVote:setSelectedPage("yes")
		if activeData.choseId==1 then
			self.supportCom:getController("c1"):setSelectedPage("select")
		else
			self.opposeCom:getController("c1"):setSelectedPage("select")
		end
	end
	if next(activeData.records)~=nil then
		local supportCount=0
		local opposeCount=0
		for k, v in pairs(activeData.records) do
               if v.choseId==1 then
				   supportCount=v.times
			   else
				   opposeCount=v.times
			   end
		end
		local allCount=supportCount+opposeCount
		self.supportCom.progressBar:setMax(allCount)
		self.supportCom.progressBar:setValue(supportCount)
		
		self.supportCount=supportCount
		self.opposeCount=opposeCount
		
	
		self.supportCom.perCent:setText(math.floor((supportCount/allCount)*100+0.5).."%")
		self.opposeCom.progressBar:setMax(allCount)
		self.opposeCom.progressBar:setValue(opposeCount)
		self.opposeCom.perCent:setText(math.floor((opposeCount/allCount)*100+0.5).."%")
	end

end



function SurveyQuestionView:activity_SurveyQuestionUpdate(_,args)
	self:setActiveData()
end


function SurveyQuestionView:activityVoteEnd()
	Scheduler.unschedule(self.timer)
	self.hadVote:setSelectedPage("end")
	if self.supportCount>self.opposeCount then
		self.voteResult:setText(string.format(Desc.Survey_desc7,Desc.Survey_desc5))
	end
	if self.supportCount<self.opposeCount then
		self.voteResult:setText(string.format(Desc.Survey_desc7,Desc.Survey_desc6))
	end
	if self.supportCount==self.opposeCount then
		self.voteResult:setText(string.format(Desc.Survey_desc7,"相等"))
	end
	

end


-- 倒计时
function SurveyQuestionView:updateCountTimer()
	if self.isEnd then return end
	local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.Survey)
	if not actData then return end
	local actId   = actData.id
	local status, addtime = ModelManager.ActivityModel:getActStatusAndLastTime(actId)
	
	local serverTime = ModelManager.ServerTimeModel:getServerTimeMS()
	local activeData=SurveyQuestionModel:getAciveData()

	if not addtime then return end
	
	

	addtime=activeData.voteEndMs-serverTime
	if serverTime>activeData.voteEndMs then
		self:activityVoteEnd()
		self.isEnd = true
	else
		local lastTime = math.floor(addtime / 1000)
		if not tolua.isnull(self.txt_countTimer) then
				self.txt_countTimer:setText(TimeLib.GetTimeFormatDay(lastTime, 2))
		end
		local function onCountDown(time)
		if not tolua.isnull(self.txt_countTimer) then
					self.isEnd = false
					self.txt_countTimer:setText(TimeLib.GetTimeFormatDay(time, 2))
			end
		end
		local function onEnd(...)
			self.isEnd = true
			if not tolua.isnull(self.txt_countTimer) then
				    self:activityVoteEnd()
					self.txt_countTimer:setText(Desc.activity_txt18)
			end
		end
			if self.timer then
				TimeLib.clearCountDown(self.timer)
			end
			self.timer = TimeLib.newCountDown(lastTime, onCountDown, onEnd, false, false, false)
	    end
end


function SurveyQuestionView:_exit()
	Scheduler.unschedule(self.timer)
end



return SurveyQuestionView