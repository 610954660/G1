--Date :2021-01-13
--Author : generated by FairyGUI
--Desc : 

local CrossLaddersChampModel = class("CrossLaddersChamp", BaseModel)

local __checkWinGroup = {
    {1,2,9},
    {3,4,10},
    {5,6,11},
    {7,8,12},
    {9,10,13},
    {11,12,14},
    {13,14,15},
}



function CrossLaddersChampModel:ctor()
    self:initListeners()
    self.statusInfo = {}        -- 活动状态信息
    self.preEnemyInfo   = {}    -- 预选赛对战信息
    self.stage  = GameDef.SkyLadChampionStage.End   -- 比赛阶段
    self.status = false
    self.allGroupInfo   = {}    -- 所有的分组
    self.myGroupInfo    = {}    -- 自己所在的分组
    self.nodeInfo       = {}    -- 当前组所有玩家的信息
    self.myRank     = false     -- 我的排名
    self.myScore    = 0     -- 我的积分
    self.startTimeMs    = 0
    self.curEndTimeMs   = 0
    self.battleResultInfo = {} -- 战斗返回的数据
    self.fightData  = {};
    self.isFight    = {}
    self.isFight2    = {}
    self.allTeamInfo    = {}
    self.isFighting = false
    self.lineEffectState = {
        [1] = {false,false,false,false,false,false,false},
        [2] = {false,false,false,false,false,false,false},
    } -- 线的特效
    self.myNodeInfo = {}
    self.likeTimes      = 0 -- 总使用点赞次数
    self.totalLike  = 0 -- 目标玩家总点赞次数
    self.guessInfo  = {}    -- 竞猜数据
    self.guessRecordInfo = {}   -- 历史竞猜数据 取最新的
    self.heroHouseInfo = {}     -- 英雄殿数据
    self.myGuessInfo = {}
    self.fightRecordInfo = {}
    self.enemyInfo      = {}
    self.flagStage = false
    self.quizCion   = 0 --竞猜币
    self.recordId   = false
    self.isFigthtRecord     = false
    self.playerList     = {} -- 今日点过赞的玩家
    self.haveRankPlayerNum = 0
    self.myRankData = {}
    self.myMatchInfo = {{},{}}  -- 我的比赛信息
    self.isLookQuiz = false
end

function CrossLaddersChampModel:init()

end

function CrossLaddersChampModel:initData(data)  
    printTable(8850,">>>data>>>",data)
    self:setLikeTimes(data and data.likeTimes or 0)
    self.playerList = data.playerList or {}
    self:updateRed()
end

function CrossLaddersChampModel:setLikeTimes(likeTimes)
    self.likeTimes = likeTimes or 0
end

-- #活动状态通知
-- SkyLadChampion_UpdateStatus 15097 {
--     request {
--        stage      1:integer   # 阶段
--        status     2:integer   # 状态
--        startMs    3:integer   # 开始时间
--        curEndMs
--        endMs      4:integer   # 结束时间
--     }
-- }
function CrossLaddersChampModel:initStatusInfo(data)
    self.statusInfo = data or {}
    self.stage      = data.stage or GameDef.SkyLadChampionStage.End
    self.startTimeMs    = data.startMs or 0
    self.status     = data.status or false
    if self.status and (self.status == GameDef.SkyLadChampionStatus.Pre) then
        self.myGuessInfo = {}
    end
    self.curEndTimeMs   = data.curEndMs or 0
    if self.stage == GameDef.SkyLadChampionStage.End then
        self.nodeInfo = {}
    end
    self:updateRed()
    Dispatcher.dispatchEvent(EventType.CrossLaddersChampPrimaryView_refreshPanel)
    Dispatcher.dispatchEvent(EventType.CrossLaddersChampMainView_refreshPanel)
    Dispatcher.dispatchEvent(EventType.CrossLaddersChampGroupView_refreshPanel)
    if self.stage ~= GameDef.SkyLadChampionStage.End then
        -- Dispatcher.dispatchEvent(EventType.CrossLaddersChampQuizView_updateCountDown)
        Dispatcher.dispatchEvent(EventType.CrossLaddersChampQuizView_refreshPanel)
    end

end


-- #获取分组
-- SkyLadChampion_GetGroupInfo 5297 {
-- 	request {
-- 		stage 		0:integer 		#阶段
-- 	}

-- 	response {
-- 		groupInfo 			1:*SkyLadChampion_GroupInfo(groupId)	# 所有的分组
-- 		myGroupInfo 		2:SkyLadChampion_GroupInfo 				# 自己所在的分组
-- 	}
-- }

-- .SkyLadChampion_GroupInfo {
-- 	groupId 		1:integer  # 分组id
-- 	nodeId 			2:integer  # 节点id
-- }
function CrossLaddersChampModel:reqSkyLadChampion_GetGroupInfo(stage,func,pageIndex)  
    local reqInfo = {
        stage = stage or self.stage,
    }
    if not pageIndex then
        pageIndex = 1
    end
    RPCReq.SkyLadChampion_GetGroupInfo(reqInfo,function(params)  
        self.allGroupInfo   = params.groupInfo or {}
        self.myGroupInfo[pageIndex] = {}
        self.myGroupInfo[pageIndex] = params.myGroupInfo or {}
        printTable(8849,">>>>获取分组>>reqSkyLadChampion_GetGroupInfo",params)
        func()
    end)
end

-- #获取节点信息
-- SkyLadChampion_GetNodeInfo 6437 {
-- 	request {
-- 		nodeId 			0:integer 		#节点id
-- 	}
-- 	response {
-- 		nodeInfo 		0:*SkyLadChampion_NodePosData(pos)	# 玩家位置
-- 	}
-- }
-- .SkyLadChampion_NodePosData {
-- 	pos   			1:integer	
-- 	playerId		2:integer		#玩家id
-- 	serverId		3:integer		#服务id
-- 	name 			4:string  		#玩家名字
-- 	level 			5:integer 		#玩家等级
-- 	head 			6:integer		#头像
-- 	guildName 		7:string  		#公会名字
-- 	combat			8:integer		#战力
-- 	headBorder 		9:integer 		#头像框
-- 	heroOpertion  	10:integer 		#板娘
-- 	fashionCode		11:integer 		#时装
-- 	vipLevel 		12:integer 		#vip等级
-- 	recordId		13:integer		#战斗记录
-- }
function CrossLaddersChampModel:reqSkyLadChampion_GetNodeInfo(nodeId,func,isMyGroup,pageIndex)
    local reqInfo = {
        nodeId = nodeId,
    }
    RPCReq.SkyLadChampion_GetNodeInfo(reqInfo,function(params)  
        if not isMyGroup then
            self.nodeInfo = params.nodeInfo or {}
        else
            self.myNodeInfo = params.nodeInfo or {}
        end
        self:checkWin(isMyGroup,pageIndex)
        -- printTable(8849,">>>获取节点信息>>reqSkyLadChampion_GetNodeInfo>>>",self.nodeInfo)
        if func then
            func()
        end
    end)
end


-- #获取预选赛对战信息
-- SkyLadChampion_GetPreFight 17168 {
-- 	request {
-- 		stage 		0:integer 		#阶段
-- 	}

-- 	response {
-- 		enemyInfo 		0:SkyLadChampion_PlayerData # 对战玩家信息
-- 	}
-- }

-- .SkyLadChampion_PlayerData {
-- 	playerId		1:integer		#玩家id
-- 	name 			2:string  		#玩家名字
-- 	level 			3:integer 		#玩家等级
-- 	head 			4:integer		#头像
-- 	guildName 		5:string  		#公会名字
-- 	combat			6:integer		#战力
-- 	serverId		7:integer		#服务id
-- 	rank 			8:integer		#排名 部分排行榜有使用到
-- 	headBorder 		9:integer 		#头像框
-- 	heroOpertion  	10:integer 		#板娘
-- 	fashionCode		11:integer 		#时装
-- 	vipLevel 		12:integer 		#vip等级
--  score  
-- }
function CrossLaddersChampModel:reqSkyLadChampion_GetPreFight(stage,func)  
    local reqInfo = {
        stage = stage or self.stage,
    }
    if self.stage > GameDef.SkyLadChampionStage.PreSix then
        self.preEnemyInfo = {}
        func()
        return
    end
    RPCReq.SkyLadChampion_GetPreFight(reqInfo,function(params)
        self.preEnemyInfo = params.enemyInfo or {}
        printTable(8849,">>>获取预选赛对战信息>>SkyLadChampion_GetPreFight>>",params)
        if func then
            func()
        end
    end)
end

-- 获取我的信息
-- SkyLadChampion_GetMyInfo 23548 {
-- 	request {
-- 	}
-- 	response {
-- 		rank 		0:integer
-- 		score 		1:integer
-- 	}
-- }
function CrossLaddersChampModel:reqSkyLadChampion_GetMyInfo(func)
    local reqInfo = {

    }
    RPCReq.SkyLadChampion_GetMyInfo(reqInfo,function(params) 
        self.myRank     = params.rank or false
        self.myScore    = params.score or 0  
        if func then
            func()
        end
    end)
    -- if func then
    --     func()
    -- end
end

-- #获取预选赛战斗记录
-- SkyLadChampion_GetPreRecordId 11786 {
-- 	request {
-- 		stage 		0:integer 		#阶段
-- 	}

-- 	response {
-- 		recordId 		0:string # 战斗记录
-- 	}
-- }
function CrossLaddersChampModel:reqSkyLadChampion_GetPreRecordId(stage,func)
    local reqInfo = {
        stage = stage or self.stage,
    }
    RPCReq.SkyLadChampion_GetPreRecordId(reqInfo,function(params) 
        printTable(8849,">>>>SkyLadChampion_GetPreRecordId>>获取预选赛战斗记录>>",params)
        if func then
            func(params.recordId)
        end
    end)
end

-- # 点赞
-- SkyLadChampion_Like 20811 {
-- 	request {
-- 		playerId 	0:integer 	# 目标玩家id
-- 		serverId 	1:integer 	# 目标玩家服务器id
-- 	}
-- 	response {
-- 		totalLike 	0:integer 	# 目标玩家总点赞次数
-- 		times	 	1:integer	# 总使用点赞次数
-- 		playerList 	2:*integer 	# 已点赞玩家
-- 	}
-- }

function CrossLaddersChampModel:reqSkyLadChampion_Like(playerId,serverId,func)
    local reqInfo = {
        playerId = playerId,
        serverId = serverId,
    }
    printTable(8849,">>>reqInfo>>",reqInfo)
    RPCReq.SkyLadChampion_Like(reqInfo,function(params)  
        self.likeTimes  = params.times or 0
        self.totalLike  = params.totalLike or 0
        self.playerList = params.playerList or {}
        printTable(8850,">>>params>>>reqSkyLadChampion_Like>>",params)
        Dispatcher.dispatchEvent(EventType.CrossLaddersChampMainView_refreshPanel)
        Dispatcher.dispatchEvent(EventType.CrossLaddersChampRankView_refreshPanel)
        Dispatcher.dispatchEvent(EventType.CrossLaddersChampPrimaryView_refreshPanel)
        self:updateRed()
        if func then
            func(self.totalLike)
        end
    end)
end

-- # 获取竞猜数据
-- SkyLadChampion_GetGuessBattleData 17263 {
-- 	request {
-- 	}
-- 	response {
-- 		info 			0:PSkyLadChampion_GuessInfo
-- 	}
-- }
-- .PSkyLadChampion_GuessInfo {
-- 	nodeId 				0:integer 				# 节点id
-- 	pos	 				1:integer				# 位置
-- 	groupId 			2:integer				# 分组
-- 	leftSuportNum		3:integer				# 支持人数
-- 	rightSuportNum		4:integer				# 支持人数
-- 	rightPlayerInfo		5:SkyLadChampion_PlayerData # 玩家信息
-- 	leftPlayerInfo		6:SkyLadChampion_PlayerData # 玩家信息
-- 	myGuessInfo 		7:SkyLadChampion_GuessData  # 自己的竞猜数据
-- 	stage 				8:integer 				# 当前阶段
-- 	leftMoney 			9:integer 				# 左边押注数
-- 	rightMoney 			10:integer 				# 左边押注数
-- }
-- .SkyLadChampion_PlayerData {
-- 	playerId		1:integer		#玩家id
-- 	name 			2:string  		#玩家名字
-- 	level 			3:integer 		#玩家等级
-- 	head 			4:integer		#头像
-- 	guildName 		5:string  		#公会名字
-- 	combat			6:integer		#战力
-- 	serverId		7:integer		#服务id
-- 	rank 			8:integer		#排名 部分排行榜有使用到
-- 	headBorder 		9:integer 		#头像框
-- 	heroOpertion  	10:integer 		#板娘
-- 	fashionCode		11:integer 		#时装
-- 	vipLevel 		12:integer 		#vip等级
-- }
-- .SkyLadChampion_GuessData {
--     nodeId 			1:integer #节点id
--     pos 			    2:integer #位置
--     money 			3:integer #押注金额
--     supportId 		4:integer #支持玩家id
--     groupId 		    5:integer #分组id
-- }
function CrossLaddersChampModel:reqSkyLadChampion_GetGuessBattleData(func)  
    local reqInfo = {

    }
    RPCReq.SkyLadChampion_GetGuessBattleData(reqInfo,function(params)
        printTable(8850,">>>竞猜界面数据>>>SkyLadChampion_GetGuessBattleData>>",params)
        self.guessInfo = params.info or {}
        self.myGuessInfo = self.guessInfo.myGuessInfo or {}
        if self.myGuessInfo.nodeId then
            self.myGuessInfo.stage = self.stage
        end
        Dispatcher.dispatchEvent(EventType.CrossLaddersChampMainView_refreshPanel)
        Dispatcher.dispatchEvent(EventType.CrossLaddersChampPrimaryView_refreshPanel)
        Dispatcher.dispatchEvent(EventType.CrossLaddersChampGroupView_refreshPanel)
        self:updateRed()
        if func then
            func()
        end
    end)
end

-- # 竞猜
-- SkyLadChampion_DoGuess 20867 {
-- 	request {
-- 		nodeId 			0:integer   # 节点id
-- 		pos 			1:integer	# 位置
-- 		supportId 		2:integer 	# 支持玩家id
-- 		money 			3:integer	# 支持金币
-- 	}
-- 	response {
-- 		info 			0:PSkyLadChampion_GuessInfo
--      score
-- 	}
-- }
function CrossLaddersChampModel:reqSkyLadChampion_DoGuess(nodeId,pos,supportId,money,func)
    local reqInfo = {
        nodeId  = nodeId,
        pos     = pos,
        supportId   = supportId,
        money   = money,
    }
    RPCReq.SkyLadChampion_DoGuess(reqInfo,function(params) 
        printTable(8849,">>>我参与的竞猜>>>SkyLadChampion_DoGuess>>",params)
        self.guessInfo = params.info or {} 
        self.myGuessInfo = self.guessInfo.myGuessInfo or {}
        self.quizCion = params.score and params.score or self.quizCion
        Dispatcher.dispatchEvent(EventType.CrossLaddersChampMainView_refreshPanel)
        Dispatcher.dispatchEvent(EventType.CrossLaddersChampPrimaryView_refreshPanel)
        Dispatcher.dispatchEvent(EventType.CrossLaddersChampGroupView_refreshPanel)
        self:updateRed()
        if func then
            func()
        end
    end)
end

-- # 获取竞猜记录
--  SkyLadChampion_GetGuessRecord25757 {
-- 	request {
-- 	}
-- 	response {
-- 		data 			1:*PSkyLadChampion_GuessRecordInfo # 记录信息
-- 	}
-- }

-- #记录信息
-- .PSkyLadChampion_GuessRecordInfo {
-- 	fightMs 			1:integer				#时间戳
-- 	money				2:integer				#金币
-- 	recordId 			3:string				#记录
-- 	leftSuportNum 		4:integer				#支持人数
-- 	rightSuportNum		5:integer				#支持人数
-- 	supportId			6:integer				#支持玩家
-- 	rightPlayerInfo		7:SkyLadChampion_PlayerData
-- 	leftPlayerInfo		8:SkyLadChampion_PlayerData
--  result          9:boolean #输赢
-- }
function CrossLaddersChampModel:reqSkyLadChampion_GetGuessRecord(func)
    local reqInfo = {
    }
    RPCReq.SkyLadChampion_GetGuessRecord(reqInfo,function(params)  
        printTable(8849,">>>竞猜记录数据>>>SkyLadChampion_GetGuessRecord>>",params)
        self.guessRecordInfo = params.data or {}
        if func then
            func(params.data)
        end
    end)
end

-- # 获取英雄殿
-- SkyLadChampion_GetHeroHouse 14099 {
-- 	request {
-- 		value 			1:integer 	# 类型 1 预选赛 2 晋级赛
-- 	}
-- 	response {
-- 		data 			1:*SkyLadChampion_PlayerData  	#记录信息
-- 	}
-- }
-- .SkyLadChampion_PlayerData {
-- 	playerId		1:integer		#玩家id
-- 	name 			2:string  		#玩家名字
-- 	level 			3:integer 		#玩家等级
-- 	head 			4:integer		#头像
-- 	guildName 		5:string  		#公会名字
-- 	combat			6:integer		#战力
-- 	serverId		7:integer		#服务id
-- 	rank 			8:integer		#排名 部分排行榜有使用到
-- 	headBorder 		9:integer 		#头像框
-- 	heroOpertion  	10:integer 		#板娘
-- 	fashionCode		11:integer 		#时装
-- 	vipLevel 		12:integer 		#vip等级
-- }

function CrossLaddersChampModel:reqSkyLadChampion_GetHeroHouse(value,func)
    local reqInfo = {
        value = 2,
    }
    RPCReq.SkyLadChampion_GetHeroHouse(reqInfo,function(params)
        printTable(8849,">>英雄殿数据>>SkyLadChampion_GetHeroHouse>>",params)
        self.heroHouseInfo = params.data or {}
        if func then
            func()
        end
    end)

end

-- #获取竞技场记录信息
-- SkyLadChampion_GetBattleRecordInfo 11919 {
-- 	request {

-- 	}
-- 	response {
-- 		data 			1:*PSkyLadChampion_RecordInfo  	#记录信息
-- 	}
-- }

-- #记录信息
-- .PSkyLadChampion_RecordInfo {
-- 	fightMs 		1:integer				#时间戳
-- 	enemyId			2:integer				#敌方玩家id
-- 	name 			3:string				#玩家名字
-- 	level 			4:integer				#玩家等级
-- 	head			5:integer				#玩家头像
-- 	score			6:integer				#积分
-- 	recordId		8:string				#记录id
-- 	combat			9:integer				#战斗力
-- 	headBorder		11:integer				#头像框
-- 	serverId		12:integer				#区服id
-- }
function CrossLaddersChampModel:reqSkyLadChampion_GetBattleRecordInfo(func)
    local reqInfo = {

    }
    RPCReq.SkyLadChampion_GetBattleRecordInfo(reqInfo,function(params)
        self.fightRecordInfo = params.data or {}
        printTable(8849,">>>SkyLadChampion_GetBattleRecordInfo>>>",params)
        if func then
            func() 
        end
    end)
end

-- # 获取竞猜币
-- SkyLadChampion_GetGuessScore 12671 {
-- 	request {
-- 	}
-- 	response {
-- 		score 			1:integer	# 当前竞猜币
-- 	}
-- }
function CrossLaddersChampModel:getSkyLadChampion_GetGuessScore(func)
    local reqInfo = {

    }
    RPCReq.SkyLadChampion_GetGuessScore(reqInfo,function(params)
        printTable(8849,">>>>params>>我拥有的竞猜币>>>SkyLadChampion_GetGuessScore>>",params)
        self.quizCion = params.score or 0
        self:updateRed()
        if func then
            func(params.score or 0)
        end
    end)
end


-- 获取排行榜数据
function CrossLaddersChampModel:getRankInfo(func)
    local reqInfo = {
        rankType = GameDef.RankType.SkyLadChampion,
    }
	RPCReq.Rank_GetRankData(reqInfo,function(params)
        local rankData = params.rankData or {}
        self.haveRankPlayerNum = TableUtil.GetTableLen(rankData)
        self:updateRed()
        if func then
            func()
        end
    end)
end

-- 判断是否人数足够
function CrossLaddersChampModel:checkIsJoinEnough()
    return self.haveRankPlayerNum >= 64
end

-- 获取历史竞猜数据
function CrossLaddersChampModel:getHistoryGuessRecordInfo(guessRecordInfo)
    local guessRecordInfo = guessRecordInfo or  self.guessRecordInfo 
    local keys = {
        {key = "fightMs",asc = true}
    }
    TableUtil.sortByMap(guessRecordInfo,keys)
    printTable(8850,">>>guessRecordInfo>>",guessRecordInfo)
    if #guessRecordInfo >=2 then
        return guessRecordInfo[2]
    elseif #guessRecordInfo == 1 then
        if GameDef.SkyLadChampionStage.PreFirst ~= self.stage then 
            return guessRecordInfo[1]
        else
            return guessRecordInfo[2]
        end
    end
end

function CrossLaddersChampModel:addFightData(data)
    -- printTable(8849,">>>>战报数据>>>>",data)
    table.insert(self.fightData, data.battleData);
end

function CrossLaddersChampModel:Battle_BattleRecordData(_, param)
    if (self.isFighting == true) then
        self:addFightData(param);
        Dispatcher.dispatchEvent(EventType.Battle_replayRecord,{isRecord=false, battleData=param.battleData});
    end
end

function CrossLaddersChampModel:clearFightData()
    self.fightData = {};
end

function CrossLaddersChampModel:loginPlayerDataFinish()
    for k,v in pairs(GameDef["SkyLadChampionStage"]) do
        local dayStr    = DateUtil.getOppostieDays()
        local key   = string.format("CrossLaddersChampPrimary_%s_%s",dayStr,tonumber(v))
        local key2  = string.format("CrossLaddersChampQuizView_%s_%s",dayStr,tonumber(v))
        
        self.isFight2[tonumber(v)] = FileCacheManager.getBoolForKey(key2, false)
        self.isFight[tonumber(v)] = FileCacheManager.getBoolForKey(key, false)
    end 
    local ll = 1
    local tips = ModuleUtil.getModuleOpenTips(ModuleId.CrossLaddersChamp.id)
    if not tips then
        self:getRankInfo()
        self:getSkyLadChampion_GetGuessScore()
        self:checkHaveQualify()
    end
end


-- 开始挑战
function CrossLaddersChampModel:battleBegin(recordId,isLook,isLook2)
    self:clearFightData();
    local battleCall = function (param)
        -- 点击开始战斗
        if (param == 'begin') then
            self.isFighting = true;
            local dayStr    = DateUtil.getOppostieDays()
            local key   = string.format("CrossLaddersChampPrimary_%s_%s",dayStr,self.stage)
            local key2  = string.format("CrossLaddersChampQuizView_%s_%s",dayStr,self.stage)
            if isLook and (not isLook2) then
                self.isFight2[tonumber(self.stage)] = true
                FileCacheManager.setBoolForKey(key2, true)
            end
            if not isLook and not isLook2 then
                self.isFight[tonumber(self.stage)] = true
                FileCacheManager.setBoolForKey(key, true)
            end
            local info = {
                recordId     = recordId,
                gamePlayType = GameDef.GamePlayType.SkyLadChampion
            }
            BattleModel:requestBattleRecord(recordId,nil,GameDef.GamePlayType.SkyLadChampion)
            printTable(8849,"战斗一###############################")
            -- Dispatcher.dispatchEvent("battle_end", {arrayType = GameDef.BattleArrayType.SkyLadChampion});
        elseif (param == 'next') then
            printTable(8849,"战斗二###############################")
        elseif (param == "end") then
            --self.battleResultInfo.isWin
            if not isLook and not isLook2 then
                ViewManager.open("ReWardView",{page=15, isWin=self:checkFightIsWin(self.fightData),playType = GameDef.GamePlayType.SkyLadChampion})
            end
            self:clearFightData();
            self.isFighting = false;
        elseif (param == "cancel") then

        end
    end
    local const = DynamicConfigData.t_HPvPConst[1];
    local args = {
        fightID= const.fightId,
        configType= GameDef.BattleArrayType.SkyLadChampion,
        skipArray = true,
    }
    Dispatcher.dispatchEvent(EventType.battle_requestFunc, battleCall, args);
end

function CrossLaddersChampModel:isCrossLaddersChampType(configType)
    return configType == GameDef.BattleArrayType.SkyLadChampion
end

function CrossLaddersChampModel:getArrayByType(configType)
    return self.allTeamInfo[configType]
end

function CrossLaddersChampModel:initTeamInfo(playerId,serverId,func)
    self.allTeamInfo = {}
    local const = DynamicConfigData.t_HPvPConst[1];
    local requseInfo={
        fightId	= const.fightId,
        playerId= playerId,
        gamePlay= GameDef.BattleArrayType.SkyLadChampion, -- SkyLadderDef
        serverId= serverId,
    }
    self.allTeamInfo[GameDef.BattleArrayType.SkyLadChampion] = {
        arrayType = GameDef.BattleArrayType.SkyLadChampion,
        array={},
        heroInfos={},
        combat = 0,
    }
    if not playerId then
        return 
    end
    local function success(data)
        if (data.array) then
            for uuid, d in pairs(data.array) do
                local heroInfo = CardLibModel:getHeroByUid(d.uuid);
                if (heroInfo) then
                    self.allTeamInfo[GameDef.BattleArrayType.SkyLadChampion].array[uuid] = d;
                end
            end
        end
        if data.heroInfos then
             self.allTeamInfo[GameDef.BattleArrayType.SkyLadChampion].heroInfos = data.heroInfos
             local combat = 0
             for k,v in pairs(data.heroInfos) do
                if v.combat then
                    combat = v.combat + combat
                end
             end
             self.allTeamInfo[GameDef.BattleArrayType.SkyLadChampion].combat = combat
        end
        if func then
            func()
        end
    end
    RPCReq.Battle_GetOpponentBattleArray(requseInfo,success)
end

-- 判断输赢
function CrossLaddersChampModel:checkWin(isMyGroup,pageIndex)
    local func = function()
        for k,v in pairs(__checkWinGroup) do
            local data  = (not isMyGroup) and self.nodeInfo or self.myNodeInfo
            local leftPlayer    = data[v[1]]
            local rightPlayer   = data[v[2]]
            local winPlayer     = data[v[3]]
            if winPlayer and winPlayer.playerId then
                if v[1] == 3 then
                    local ll = 1
                end

                if leftPlayer and leftPlayer.playerId then
                    leftPlayer.have     = true
                    if (winPlayer.playerId == leftPlayer.playerId) then
                        leftPlayer.winState = true
                    else
                        leftPlayer.winState = false
                    end
                    if winPlayer.have and not (winPlayer.winState) then
                        leftPlayer.isGray = true
                    end
                end
                if rightPlayer and rightPlayer.playerId then
                    rightPlayer.have    = true
                    if (winPlayer.playerId == rightPlayer.playerId) then
                        rightPlayer.winState = true
                    else
                        rightPlayer.winState = false
                    end
                    if winPlayer.have and (not winPlayer.winState ) then
                        rightPlayer.isGray = true
                    end
                end
            
            end
        end
    end
    func()
    func()
    if not isMyGroup then
        self:checkLineEffectShow(pageIndex)
    end
end

-- 获取我的比赛当前对手的信息
function CrossLaddersChampModel:getMyEnemyPlayerId()
    local myId = tonumber(PlayerModel.userid)
    local enemyPlayerInfo = {
        enemyPlayerId = 1,
        name = "",
        serverId = "",
        playerId = "",
        level = 1,
    }
    for k,v in pairs(__checkWinGroup) do
        local data = self.myNodeInfo
        local leftPlayer    = data[v[1]]
        local rightPlayer   = data[v[2]]
        local winPlayer     = data[v[3]]
        if leftPlayer and leftPlayer.playerId then
            if (myId == leftPlayer.playerId) and ((not winPlayer) or (not  winPlayer.playerId)) then
                enemyPlayerInfo = {
                    enemyPlayerId = rightPlayer.playerId,
                    name = rightPlayer.name,
                    serverId = rightPlayer.serverId,
                    playerId = rightPlayer.playerId,
                    level = rightPlayer.level,
                }
                return enemyPlayerInfo
            end
        end

        if rightPlayer and rightPlayer.playerId then
            if (myId == rightPlayer.playerId) and ((not winPlayer) or (not  winPlayer.playerId)) then
                enemyPlayerInfo = {
                    enemyPlayerId = leftPlayer.playerId,
                    name = leftPlayer.name,
                    serverId = leftPlayer.serverId,
                    playerId = leftPlayer.playerId,
                    level = leftPlayer.level,
                }
                return enemyPlayerInfo
            end
        end
    end
    return enemyPlayerInfo
end

-- -- 判断自己输赢
-- function CrossLaddersChampModel:checkMyMatchIsWin()
--     local myId = tonumber(PlayerModel.userid)
--     for k,v in pairs(__checkWinGroup) do
--         local data = self.myNodeInfo
--         local leftPlayer    = data[v[1]]
--         local rightPlayer   = data[v[2]]
--         local winPlayer     = data[v[3]]
--         if leftPlayer and leftPlayer.playerId and rightPlayer and rightPlayer.playerId and ((leftPlayer.playerId == myId) or (rightPlayer.playerId == myId)) then
--             if self.stage == GameDef.SkyLadChampionStage.Top64 then
--                 return true
--             end
--             if winPlayer and winPlayer.playerId then
--                 return (winPlayer.playerId == myId)
--             end
--         end
--     end
--     return false
-- end

-- 获取我的比赛信息
function CrossLaddersChampModel:getMyMatchInfo()
    local myId = tonumber(PlayerModel.userid)
    for i=1,#self.myNodeInfo do
        local data = self.myNodeInfo[i] 
        if data.playerId and (data.playerId == myId) then
            if self:isSecond2() then
                self.myMatchInfo[1][i] = true
            end
            if self:isChampion() then
                self.myMatchInfo[2][i] = true
            end
        end
    end
end

-- 判断是否显示我的比赛按钮
function CrossLaddersChampModel:checkShowMyMatch(pageIndex)
    self:getMyMatchInfo()
    local isShow = false
    for k,v in pairs(self.myMatchInfo[pageIndex]) do
        if self.stage then
            if (self.stage == GameDef.SkyLadChampionStage.Top64) then
                isShow = ((k<=8) and v)
                if isShow then
                    break
                end
            elseif (self.stage == GameDef.SkyLadChampionStage.Top32) then
                isShow = ((k > 8 and k<=12) and v)
                if isShow then
                    break
                end
            elseif (self.stage == GameDef.SkyLadChampionStage.Top16) then
                isShow = ((k > 12 and k<=14) and v)
                if isShow then
                    break
                end
            elseif (self.stage == GameDef.SkyLadChampionStage.Top8) then
                isShow = ((k<=8) and v)
                if isShow then
                    break
                end
            elseif (self.stage == GameDef.SkyLadChampionStage.Top4) then
                isShow = ((k > 8 and k<=12) and v)
                if isShow then
                    break
                end
            elseif (self.stage == GameDef.SkyLadChampionStage.Top2) then
                isShow = ((k > 12 and k<=14) and v)
                if isShow then
                    break
                end
            end
        end 
    end
    return isShow
end


-- 判断线的特效是否需要隐藏
function CrossLaddersChampModel:checkLineEffectShow(pageIndex)
    local func = function()
        for k,v in pairs(__checkWinGroup) do
            local data  = self.nodeInfo
            local leftPlayer    = data[v[1]]
            local rightPlayer   = data[v[2]]
            local winPlayer     = data[v[3]]
            if leftPlayer and rightPlayer and leftPlayer.playerId and rightPlayer.playerId then
                if (not winPlayer) or (TableUtil.GetTableLen(winPlayer) == 0) or (not winPlayer.playerId) then
                    if self.stage >= GameDef.SkyLadChampionStage.Top64 and self.stage <= GameDef.SkyLadChampionStage.Top16 then
                        if (self.stage == GameDef.SkyLadChampionStage.Top64)  then
                            self.lineEffectState[pageIndex][k] = (k >=1 and k<=4)
                        elseif self.stage == GameDef.SkyLadChampionStage.Top32 then
                            self.lineEffectState[pageIndex][k] = (k >=5 and k<=6)
                        elseif self.stage == GameDef.SkyLadChampionStage.Top16 then
                            self.lineEffectState[pageIndex][k] = (k == 7)
                        else
                            self.lineEffectState[pageIndex][k] = false
                        end
                    elseif self.stage >= GameDef.SkyLadChampionStage.Top8 and self.stage <= GameDef.SkyLadChampionStage.Top2 then
                        if (self.stage == GameDef.SkyLadChampionStage.Top8)  then
                            self.lineEffectState[pageIndex][k] = (k >=1 and k<=4)
                        elseif self.stage == GameDef.SkyLadChampionStage.Top4 then
                            self.lineEffectState[pageIndex][k] = (k >=5 and k<=6)
                        elseif self.stage == GameDef.SkyLadChampionStage.Top2 then
                            self.lineEffectState[pageIndex][k] = (k == 7)
                        else
                            self.lineEffectState[pageIndex][k] = false
                        end
                    else
                        self.lineEffectState[pageIndex][k] =false
                    end
                else
                    self.lineEffectState[pageIndex][k] = false
                end 
            else
                self.lineEffectState[pageIndex][k] = false
            end
            if winPlayer and winPlayer.playerId then
                if self.stage >= GameDef.SkyLadChampionStage.Top64 and self.stage <= GameDef.SkyLadChampionStage.Top16 then
                    if (self.stage == GameDef.SkyLadChampionStage.Top64)  then
                        self.lineEffectState[pageIndex][k] = (k >=1 and k<=4)
                    elseif self.stage == GameDef.SkyLadChampionStage.Top32 then
                        self.lineEffectState[pageIndex][k] = (k >=5 and k<=6)
                    elseif self.stage == GameDef.SkyLadChampionStage.Top16 then
                        self.lineEffectState[pageIndex][k] = (k == 7)
                    else
                        self.lineEffectState[pageIndex][k] = false
                    end
                elseif self.stage >= GameDef.SkyLadChampionStage.Top8 and self.stage <= GameDef.SkyLadChampionStage.Top2 then
                    if (self.stage == GameDef.SkyLadChampionStage.Top8)  then
                        self.lineEffectState[pageIndex][k] = (k >=1 and k<=4)
                    elseif self.stage == GameDef.SkyLadChampionStage.Top4 then
                        self.lineEffectState[pageIndex][k] = (k >=5 and k<=6)
                    elseif self.stage == GameDef.SkyLadChampionStage.Top2 then
                        self.lineEffectState[pageIndex][k] = (k == 7)
                    else
                        self.lineEffectState[pageIndex][k] = false
                    end
                else
                    self.lineEffectState[pageIndex][k] =false
                end
                if ((pageIndex == 1) and (self.stage >= GameDef.SkyLadChampionStage.Top8)) or self:isEnd() then
                    self.lineEffectState[pageIndex][k] = false
                end
                if (pageIndex == 2 and (self.stage < GameDef.SkyLadChampionStage.Top8)) or self:isEnd() then
                    self.lineEffectState[pageIndex][k] = false
                end
            end
        end
    end
    func()
end

function CrossLaddersChampModel:getLineIndex(pageIndex)
    local lineShow = 1
    local isEnd = false
    printTable(8850,">>>self.lineEffectState[pageIndex]>>",self.lineEffectState[pageIndex])
    for k,v in pairs(self.lineEffectState[pageIndex]) do
        if v then
            if (k <= 6 and k > 4) then
                lineShow = k - 1
            elseif k <= 4 then
                lineShow = 1
            else
                lineShow = k
            end
        end
    end
    if ((pageIndex == 1) and (self.stage >= GameDef.SkyLadChampionStage.Top8)) or self:isEnd() then
        lineShow = 7
        isEnd = true
    end
    if (pageIndex == 2 and self:isEnd()) then
        lineShow = 7
        isEnd = true
    end
    return lineShow,isEnd
end




-- 预选赛阶段
function CrossLaddersChampModel:isPreMatch(stage)
    local stage = stage or self.stage
    if self.stage >= GameDef.SkyLadChampionStage.PreFirst and self.stage <= GameDef.SkyLadChampionStage.PreSix then
        return true
    end
    return false
end

-- 比赛期间
function CrossLaddersChampModel:isSecond()
    if self.stage >= GameDef.SkyLadChampionStage.Top64 and self.stage <= GameDef.SkyLadChampionStage.Top2 then
        return true
    end
    return false
end

-- 晋级赛
function CrossLaddersChampModel:isSecond2()
    if self.stage >= GameDef.SkyLadChampionStage.Top64 and self.stage <= GameDef.SkyLadChampionStage.Top16 then
        return true
    end
    return false
end

-- 冠军赛
function CrossLaddersChampModel:isChampion()
    if self.stage >= GameDef.SkyLadChampionStage.Top8 and self.stage <= GameDef.SkyLadChampionStage.Top2 then
        return true
    end
    return false
end

-- 已结束
function CrossLaddersChampModel:isEnd()
    return (self.stage == GameDef.SkyLadChampionStage.End)
end

-- 设置入口数据
function CrossLaddersChampModel:getMainSubInfo(fun)
    local conf = DynamicConfigData.t_SkyLadChampionConst[1]
    local ServerTime    = ServerTimeModel:getServerTime()
    local data      = {}
    local today     = TimeLib.getWeekDay()
    local weekTimes = TimeLib.nextWeekBeginTime()  -- 周末24:00的时间戳 S
    local startMs   = conf.startTime 
    local endMs     = conf.endTime + startMs
    local preTime   = 86400*7 - startMs
    local openMs    =   weekTimes - preTime
    local closeMs   =   weekTimes - (86400*7 - endMs)
    local entranceTitle = ""

    local reqInfo = {

    }
    local serverTime = ServerTimeModel:getServerTime()
    local myId  = tonumber(PlayerModel.userid)
    entranceTitle = Desc.CrossLadders_str17
    if today < 6 then
        data.seasonTime = openMs - serverTime
        data.seasonTime =  data.seasonTime - 3600
        entranceTitle = Desc.CrossLadders_str18
    elseif today == 6 then
        data.seasonTime = closeMs - serverTime
        data.seasonTime =  data.seasonTime - 3600
        entranceTitle = Desc.CrossLadders_str18
    elseif today == 7 then
        if serverTime < closeMs  then
            data.seasonTime = closeMs - serverTime
            if serverTime >= openMs and serverTime <= closeMs then
                data.seasonTime = closeMs - serverTime
            else
                entranceTitle = Desc.CrossLadders_str18
                data.seasonTime =  data.seasonTime - 3600
            end
        else
            if serverTime <= weekTimes then
                entranceTitle = Desc.CrossLadders_str18
                data.seasonTime = (weekTimes + startMs) - serverTime
                data.seasonTime =  data.seasonTime - 3600
            end
        end
    end

    -- data.dayTimes = self:getHaveTimes()
    local tips = ModuleUtil.getModuleOpenTips(ModuleId.CrossLaddersChamp.id)
    if not tips then
        self:getRankInfo(function() 
            self:reqSkyLadChampion_GetMyInfo(function()
                data.rank    =  self.myRank or Desc.Rank_notInRank
                data.red     = "V_CROSSLADDERSCHAMP"
                data.moduleId = ModuleId.CrossLaddersChamp.id
                data.entranceTitle = entranceTitle
                
                fun(data)
            end) 
        end)
    else
        data.rank    =  self.myRank or Desc.Rank_notInRank
        data.red     = "V_CROSSLADDERSCHAMP"
        data.moduleId = ModuleId.CrossLaddersChamp.id
        data.entranceTitle = entranceTitle
        fun(data)
    end
end

-- 入口
function CrossLaddersChampModel:entrance()
    if self:isSecond() then
        if not self:checkIsJoinEnough() then
            ModuleUtil.openModule(ModuleId.CrossLaddersChamp.id, true)
            return
        end
        ViewManager.open("CrossLaddersChampGroupView",{entranType=true})
    elseif self:isPreMatch() then
        if not self:checkIsJoinEnough() then
            ModuleUtil.openModule(ModuleId.CrossLaddersChamp.id, true)
            return
        end
        self:reqSkyLadChampion_GetGroupInfo(false,function() 
            ViewManager.open("CrossLaddersChampPrimaryView",{entranType=true})
        end)
    elseif self:isEnd() then
        ModuleUtil.openModule(ModuleId.CrossLaddersChamp.id, true)
    end

end

-- 判断是否给该玩家点过赞
function CrossLaddersChampModel:checkIsLike(playerId)
    for k,v in pairs(self.playerList) do
        if v == playerId then
            return true
        end
    end
    return false
end

-- 判断是否有参赛资格
function CrossLaddersChampModel:checkHaveQualify(func)  
    local reqInfo = {
        rankType = GameDef.RankType.SkyLadder
    }
    RPCReq.Rank_GetRankData(reqInfo,function(params)
        self.myRankData = params.myRankData or {}
        if func then
            func(self.myRankData)
        end
        return (self.myRankData and self.myRankData.rank and self.myRankData.rank <= 256)
    end)
end

-- 判断是否可点赞
function CrossLaddersChampModel:checkCanLike()
    local SkyLadChampionConst = DynamicConfigData.t_SkyLadChampionConst[1]
    local limit 	= SkyLadChampionConst.limit
    return ((self.likeTimes < limit) and (self.haveRankPlayerNum > 0))
end

-- 判断是否可以竞猜
function CrossLaddersChampModel:checkCanQuiz()
    -- self.quizCion > 0
    -- self.status ~= GameDef.SkyLadChampionStatus.Fight
    return (self:checkIsJoinEnough() and self.quizCion > 0 and (self.stage and (self.stage ~= GameDef.SkyLadChampionStage.End)) and (self.status and self.status ~= GameDef.SkyLadChampionStatus.Fight) and (self.myGuessInfo and (not self.myGuessInfo.nodeId)))
end

-- 判断是否可布阵
-- pageIndex 1 预选赛 2晋级赛
function CrossLaddersChampModel:checkCanArray(pageIndex)
    local haveQualify = (self.myRankData and self.myRankData.rank and (self.myRankData.rank <= 256)) -- 先判断有没有资格
    -- 预选赛阶段 
    if pageIndex == 1 then
        if self:isPreMatch() then
            return (haveQualify and self.status and (self.status == GameDef.SkyLadChampionStatus.Pre) and self:checkIsJoinEnough() )
        else
            return false
        end
    elseif pageIndex == 2 then 
        local status =  (self.status and self.status == GameDef.SkyLadChampionStatus.Pre)
        if self:isSecond() then
            if self:isSecond2() then
                return self:checkIsJoinEnough()  and self.myGroupInfo[1] and self.myGroupInfo[1].nodeId and status
            elseif self:isChampion() then
                return self:checkIsJoinEnough()  and self.myGroupInfo[1] and self.myGroupInfo[1].nodeId and self.myGroupInfo[2] and self.myGroupInfo[2].nodeId and status
            else
                return false
            end
        else
            return false
        end
    end
end

function CrossLaddersChampModel:updateRed()
    self:updateOneRed()
    self:updateTwoRed()
end

-- 更新第一个页签的红点
function CrossLaddersChampModel:updateOneRed()
    RedManager.updateValue("V_CROSSLADDERSCHAMP_PAGEONE",self:checkCanArray(1) or self:checkCanLike() or self:checkCanQuiz())
end

-- 更新第二个页签的红点
function CrossLaddersChampModel:updateTwoRed()
    RedManager.updateValue("V_CROSSLADDERSCHAMP_PAGETWO",self:isSecond() and (self:checkCanArray(2) or self:checkCanQuiz()))
end

function CrossLaddersChampModel:getMVPHero(battleData)
    local mvpHero
    if battleData then
        local battleObjSeq = battleData.battleObjSeq
        local playerInfo = battleData.gamePlayInfo.playerInfo or {}
        local myId = tonumber(PlayerModel.userid)
        local isRight = false
        for i = 1,2, 1 do
            local platerItemInfo=playerInfo[i]
            if platerItemInfo and platerItemInfo.playerId and (i == 2) and (platerItemInfo.playerId == myId) then
                isRight = true
            end
        end
        mvpHero= self:getMVPHero2(isRight and 2 or 1,battleObjSeq)
    end
    return mvpHero
end

function CrossLaddersChampModel:getMVPHero2(type,battleObjSeq)
	local maxHurt=-1
	local heroInfo=nil
    local heroType = type or 1
    if battleObjSeq then
        for i, battleObjSeq in pairs(battleObjSeq) do
            if battleObjSeq.hurt and battleObjSeq.type then
                if maxHurt<battleObjSeq.hurt and (battleObjSeq.type == 1) then
                    if heroType == 1 then
                        if battleObjSeq.id < BattleModel.HeroPos.enemy.pos then
                            maxHurt=battleObjSeq.hurt
                            heroInfo=battleObjSeq
                        end
                    end
                    if heroType == 2 then
                        if battleObjSeq.id <= 232 and battleObjSeq.id >=200 then
                            maxHurt=battleObjSeq.hurt
                            heroInfo=battleObjSeq
                        end
                    end
                end
            end
        end
	end
	return heroInfo
end

function CrossLaddersChampModel:checkFightIsWin(battleData)
    local result
    battleData = battleData[1]
    if battleData then
        result = battleData.result
        local battleObjSeq = battleData.battleObjSeq
        local playerInfo = battleData.gamePlayInfo.playerInfo or {}
        local myId = tonumber(PlayerModel.userid)
        local isRight = false
        for i = 1,2, 1 do
            local platerItemInfo=playerInfo[i]
            if platerItemInfo and platerItemInfo.playerId and (i == 2) and (platerItemInfo.playerId == myId) then
                isRight = true
            end
        end
        result = isRight and (not result) or result
    end
    return result
end

return CrossLaddersChampModel
