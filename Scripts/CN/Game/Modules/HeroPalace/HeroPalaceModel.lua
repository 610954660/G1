--Name : HeroPalaceModel.lua
--Author : generated by FairyGUI
--Date : 2020-4-15
--Desc : 


local HeroPalaceModel = class("HeroPalaceModel", BaseModel)


function HeroPalaceModel:ctor()
	self.crystal = false  --水晶等级
	self.groupA = false  --组A数据， 激活水晶后为nil
	self.groupB = false  --组B数据
	self.groupBuuidMap = {} --groupB的uuid，用来快速判断是否在groupB中
	self.openIdx = 6  --组B栏位开到idx
	
	self.crystalLvMaxList = false  --水晶升级上限列表
	self.crystalLvMax = false  --水晶升级上限
end

function HeroPalaceModel:init()

end
function HeroPalaceModel:getAllHeroInfo()
	local info = {}
	if self.groupA then
		for key,value in pairs(self.groupA) do
			table.insert(info,value)
		end
	end 
	if self.groupB then
		for key,value in pairs(self.groupB) do
			table.insert(info,value)
		end
	end 
	return info
end
function HeroPalaceModel:setInitData(info)
	if not info then return end
	self.crystal = info.crystal and info.crystal or false
	self.groupA = info.groupA and info.groupA or false
	self.groupB = info.groupB and info.groupB or false
	
	if self.groupB then
		self.groupBuuidMap = {}
		for key,value in pairs(self.groupB) do
			if value.uuid then
				self.groupBuuidMap[value.uuid] = 1
			end
		end
	end
		
	self.openIdx = info.openIdx
	self:redCheckAdd()
	self:redCheckActive()
	self:redCheckUpgrade()
end

function HeroPalaceModel:updateGroupA(info)
	self.groupA = info.groupA and info.groupA or false
	if info.groupBIdx then
		if self.groupB[info.groupBIdx] then
			self.groupBuuidMap[self.groupB[info.groupBIdx].uuid] = nil
		end
		self.groupB[info.groupBIdx] = nil
	end
	Dispatcher.dispatchEvent(EventType.heroPalace_groupAChange)
end


function HeroPalaceModel:activateCrystal(info)
	self.crystal = info.crystal and info.crystal or false
	self.groupB = info.groupB and info.groupB or false
	self.groupBuuidMap = {}
	if self.groupB then
		self.groupBuuidMap = {}
		for key,value in pairs(self.groupB) do
			if value.uuid then
				self.groupBuuidMap[value.uuid] = 1
			end
		end
	end
	
	self:redCheckAdd()
	self:redCheckActive()
end

--添加B组英雄
function HeroPalaceModel:doAddReq(pos, uuid)
	local params = {}
	params.idx = pos
	params.uuid = uuid
	
	local onSuccess = function(data)
		local info = self.groupB[data.idx] or {}
		if info.uuid then
			self.groupBuuidMap[info.uuid] = nil
		end
		
		
		info.idx = data.idx
		info.uuid = data.uuid
		info.level = data.level
		self.groupB[data.idx] = info
		self.groupBuuidMap[uuid] = 1
		self:redCheckAdd()
		Dispatcher.dispatchEvent(EventType.heroPalace_groupBChange)
		Dispatcher.dispatchEvent(EventType.heroPalace_heroLvUp, {uuid = data.uuid, oldLevel = data.level, newLevel = data.newLevel})
	end
	RPCReq.HeroPalace_AddHero(params, onSuccess)
end

function HeroPalaceModel:doRemoveReq(pos)
	local params = {}
	params.idx = pos	
	local onSuccess = function(data)
		local info = self.groupB[data.idx] or {}
		if info.uuid then
			self.groupBuuidMap[info.uuid] = nil
		end
		info.idx = data.idx
		info.coolTime = data.coolTime
		info.uuid = nil
		self.groupB[data.idx] = info
		self:redCheckAdd()
		Dispatcher.dispatchEvent(EventType.heroPalace_groupBChange)
	end
	RPCReq.HeroPalace_RemoveHero(params, onSuccess)
end

function HeroPalaceModel:doClearCoolTimeReq(pos)
	local params = {}
	params.idx = pos	
	local onSuccess = function(data)
		local info = self.groupB[data.idx] or {}
		info.idx = pos
		info.coolTime = nil
		self.groupB[pos] = info
		self:redCheckAdd()
		Dispatcher.dispatchEvent(EventType.heroPalace_groupBChange)
	end
	RPCReq.HeroPalace_ClearCoolTime(params, onSuccess)
end

function HeroPalaceModel:doOpenIndexReq(pos)
	local params = {}
	local onSuccess = function(data)
		self.openIdx = data.openIdx
		self:redCheckActive()
		Dispatcher.dispatchEvent(EventType.heroPalace_groupBChange)
	end
	RPCReq.HeroPalace_OpenIndex(params, onSuccess)
end

function HeroPalaceModel:doUpgradeCrystalReq()
	local params = {}
	local onSuccess = function(data)
		self.crystal = data.crystal
		self:redCheckUpgrade()
		Dispatcher.dispatchEvent(EventType.heroPalace_groupBChange)
		Dispatcher.dispatchEvent(EventType.heroPalace_crystalChange)
	end
	RPCReq.HeroPalace_UpgradeCrystal(params, onSuccess)
end

function HeroPalaceModel:getPosAInfo(pos)
	if not self.groupA then return end
	for _,v in pairs(self.groupA) do
		if v.idx == pos then
			return v
		end
	end
end

function HeroPalaceModel:getPosBInfo(pos)
	return self.groupB[pos]
end

--获取共生殿等级（A组里的最低等级）
function HeroPalaceModel:getLevel()
	if self.crystal then return self.crystal end
	if not self.groupA then return 0 end
	local level = 0
	for _,v in pairs(self.groupA) do
		local heroInfo = ModelManager.CardLibModel:getHeroByUid(v.uuid)
		if heroInfo and  (level == 0 or level > heroInfo.level) then
			level = heroInfo.level
		end
	end
	return level
end


--某个卡牌是否在A组中
function HeroPalaceModel:isInGroupA(uuid)
	if not self.groupA then return false end
	return self.groupA[uuid]
	--[[for _,v in pairs(self.groupA) do
		if v.idx == uuid then
			return true
		end
	end--]]
end

--某个卡牌是否在b组中
function HeroPalaceModel:isInGroupB(uuid)
	if not self.groupB then return false end
	return self.groupBuuidMap[uuid]  --这里优化成用map格式，防止因为调用次数太多造成性能消耗过多
	--[[for _,v in pairs(self.groupB) do
		if v.uuid == uuid then
			return true
		end
	end--]]
end

--卡牌是否在英雄谷中
function HeroPalaceModel:isInHeroPalace(uuid)
	--return self:isInGroupA(uuid) or self:isInGroupB(uuid)
	return self:isInGroupB(uuid)
end


--卡牌是否在英雄谷两个组之一
function HeroPalaceModel:isInHeroPalaceABGroup(uuid)
	return self:isInGroupA(uuid) or self:isInGroupB(uuid)
end

function HeroPalaceModel:getHeroNumB()
	if not self.groupB then return 0 end
	local num = 0
	for _,v in pairs(self.groupB) do
		if v.uuid then
			num = num + 1
		end
	end
	return num
end

function HeroPalaceModel:getChooseUuids()
	local uids = {}
	if self.groupA then
		for _,v in pairs(self.groupA) do
			if v.uuid then
				table.insert(uids, v.uuid)
			end
		end
	end
	
	if self.groupB then
		for _,v in pairs(self.groupB) do
			if v.uuid then
				table.insert(uids, v.uuid)
			end
		end
	end
	return uids
end


--根据满阶卡牌数量获取水晶升级上限
function HeroPalaceModel:getCrystalMaxLv(fullStepCardNum)
	if not self.crystalLvMaxList then
		self.crystalLvMaxList  = {}
		for _,v in pairs(DynamicConfigData.t_HeroPalaceUplevel) do
			if not self.crystalLvMaxList[v.needHero] or self.crystalLvMaxList[v.needHero] < v.level then
				self.crystalLvMaxList[v.needHero] = v.level
			end
			if not self.crystalLvMax  or self.crystalLvMax < v.level then
				self.crystalLvMax  = v.level
			end
		end
	end
	
	if self.crystalLvMaxList[fullStepCardNum] then return self.crystalLvMaxList[fullStepCardNum] end
	
	return self.crystalLvMax
end

--是否达到升级条件（n个英雄达到x级）
--[[function HeroPalaceModel:isCanLvUp(num, lv, myUuid)
	local heroNum = 0
	if self.groupA then
		for _,info in pairs(self.groupA) do
			if info and info.uuid and info.uuid ~= myUuid  then
				local heroInfo = ModelManager.CardLibModel:getHeroByUid(info.uuid)
				if heroInfo and heroInfo.level >= lv then
					heroNum = heroNum + 1
				end
			end
		end
	end
	
	if self.groupB then
		for _,info in pairs(self.groupB) do
			if info.level and  info.level >=  lv and info.uuid ~= myUuid  then
				heroNum = heroNum + 1
			end
		end
	end
	
	return heroNum >= num
end
--]]
--红点检测（激活）
function HeroPalaceModel:redCheckActive()
	local canActive = false
	local posInfo = DynamicConfigData.t_HeroPalace[self.openIdx + 1]	
	if posInfo and #posInfo.openItem1 > 0 then
		if ModelManager.PlayerModel:isCostEnough(posInfo.openItem1, false) then
			canActive = true
		end
	end
	RedManager.updateValue("V_HEROPALACE_ACTIVE", canActive)
end

--红点检测（添加英雄）
function HeroPalaceModel:redCheckAdd()
	local canAdd = false
	local hasEmpty = false
	local hadAddNum = 0
	if self.groupB then
		for _,info in pairs(self.groupB) do
			if info.uuid then
				hadAddNum = hadAddNum + 1
			end
			if not hasEmpty and not info.uuid and (not info.coolTime or (info.coolTime - ModelManager.ServerTimeModel:getServerTime()) <= 0) then
				hasEmpty = true
			end
		end
	end
	local maxNum = hadAddNum
	if not self.crystal then
		maxNum = maxNum + 6
	end
	if hasEmpty and #ModelManager.CardLibModel:getCardByCategory(0) > maxNum then
		canAdd = true
	end
	RedManager.updateValue("V_TACTICAL_ADD", canAdd)
end

--红点检测（升级）
function HeroPalaceModel:redCheckUpgrade()
	local addUpgrade = false
	if ModelManager.HeroPalaceModel.crystal then
		local fullStarCardNum  = ModelManager.CardLibModel:getFullStarCardNum()
		local maxLv = ModelManager.HeroPalaceModel:getCrystalMaxLv(fullStarCardNum)
		local upgradeInfo = DynamicConfigData.t_HeroPalaceUplevel[ModelManager.HeroPalaceModel.crystal + 1]
		if ModelManager.HeroPalaceModel.crystal < maxLv and upgradeInfo and ModelManager.PlayerModel:isCostEnough(upgradeInfo.cost, false) then
			addUpgrade = true
		end
	end
	RedManager.updateValue("V_TACTICAL_UPGRADE", addUpgrade)
end

return HeroPalaceModel
