--Name : ExpeditionModel.lua
--Author : generated by FairyGUI
--Date : 2020-5-15
--Desc : 


local ExpeditionModel = class("ExpeditionModel", BaseModel)

function ExpeditionModel:ctor()
	self.data = false
	self.enemyArray = false
	self.heroArray = false
	self.agentArray = {}
	self.bigReward={}
end

function ExpeditionModel:init()
	self:initListeners()
end

function ExpeditionModel:EndlessRoad_Notify(_,data)
	printTable(33,"EndlessRoad_Notify rev data",data)
	self.data = data.data
	local conf = DynamicConfigData.t_endlessRoadOrder[self.data.index];
	if conf and self.data.nodeId == 1 then
		RedManager.updateValue("M_ENDLESSROAD", true)
	else
		RedManager.updateValue("M_ENDLESSROAD", false)
	end
end


function ExpeditionModel:reqData(fuc)
	RedManager.updateValue("M_ENDLESSROAD", false)
	RPCReq.EndlessRoad_Start({},function(args)
			printTable(32,"EndlessRoad_Start call back",args)
			self.data = args.data
			self:setBigReward()
			if fuc then
				fuc()
			end
		end)
end


function ExpeditionModel:reqBattleData(index,func)
	
	
	local function success1(data)
		self.enemyArray = {}
		local hinfo = DynamicConfigData.t_hero
		for k,v in pairs(data.heroInfos) do
			v.category = hinfo[v.code].category
			table.insert(self.enemyArray,v)
		end
		printTable(33,"Battle_GetOpponentBattleArray",data)
	end
	
	local function success2(data)
		-- printTable(999,"Battle_GetHeroArrayList",data)
		self.heroArray = {}
		local hinfo = DynamicConfigData.t_hero
		for k,v in pairs(data.heroList) do
			v.category = hinfo[v.code].category
			table.insert(self.heroArray,v)
		end
		
		BattleModel:starSort(self.heroArray)
		
		-- printTable(999,"Battle_GetHeroArrayList222",self.heroArray)
		if func then
			func()
		end
	end
	
	local requseInfo={
		fightId	= DynamicConfigData.t_endlessRoadConst[1].fightId,
		index	= index,
		gamePlay= GameDef.BattleArrayType.EndlessRoad
	}

	RPCReq.Battle_GetOpponentBattleArray(requseInfo,success1)
	
	local info = {
		arrayType = GameDef.BattleArrayType.EndlessRoad,
		index = index
	}
	
	RPCReq.Battle_GetHeroArrayList(info,success2)
end

function ExpeditionModel:reqAgentList(func)
	local function success2(data)
		-- printTable(999,"Battle_GetHeroArrayList",data)
		self.agentArray = {}
		local hinfo = DynamicConfigData.t_hero
		for k,v in pairs(data.heroList) do
			v.hpBaifenbi=v.hp/v.maxHp
			if v.hpBaifenbi > 1 then
				v.hpBaifenbi = 1
			end
			v.category = hinfo[v.code].category
			v.heroId = CardLibModel:getHeroByUid(v.uuid).heroId
			local heroInfo = CardLibModel:getHeroByUid(v.uuid)
			v.fashion = heroInfo and heroInfo.fashion and heroInfo.fashion.code
			table.insert(self.agentArray,v)
		end
		-- TableUtil.sortByMap(self.agentArray, {{key = "hpBaifenbi",asc=false},{key="combat",asc=true},{key="level",asc=true}})
		TableUtil.sortByMap(self.agentArray, {{key="hpBaifenbi",asc=false},{key="level",asc=true},{key="star",asc=true},{key="combat",asc=true},{key="heroId",asc=true}})
		-- 相同等级相同星级相同人物放一起
		-- local lvIdMap = {}
		-- for idx, hero in ipairs(self.agentArray) do
		-- 	if hero.hpBaifenbi == 1 then -- 只处理满血的

		-- 	end
		-- end
		--BattleModel:starSort(self.agentArray)
		if func then
			func()
		end
		-- printTable(999,"Battle_GetHeroArrayList222",self.agentArray)
	end
	local info = {
		arrayType = GameDef.BattleArrayType.EndlessRoad,
		index = 0
	}
	
	RPCReq.Battle_GetHeroArrayList(info,success2)
end

function ExpeditionModel:setBigReward()
	 local map=self.data.rewardMap 
	 if not map then
		 return
	 end
	 if next(map)==nil then
		 return
	 end
	 self.bigReward={}
		for key, value in pairs(map) do
			if value.recvState~=3 then 
				self.bigReward=value
				break
			end
		end
	Dispatcher.dispatchEvent(EventType.set_ExpeditionBigRewardEvent)
end

function ExpeditionModel:getBigReward()
		return self.bigReward
end




return ExpeditionModel
