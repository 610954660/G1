--Name : RunPackageView.lua
--Author : generated by FairyGUI
--Date : 2020-5-21
--Desc : 符文组装 added by xhd

local RunPackageView,Super = class("RunPackageView", View)
local ItemConfiger = require "Game.ConfigReaders.ItemConfiger" --道具配置读取器
local  RuneConfiger = require "Game.Modules.RuneSystem.RuneConfiger"
local colorArr = {Desc.Rune_txt31,Desc.Rune_txt32,Desc.Rune_txt33}
function RunPackageView:ctor()
	self._packName = "RuneSystem"
	self._compName = "RunPackageView"
	self.curRunePageData = false
	self.curRuneData = false --当前格子选中的数据
	self.heroCtrlFlag = false
	for i=1,4 do
		for j=1,10 do
			self["rune"..i..(j-1)] = false
		end
	end
	self.nextSelectColor =false
	self.nextSelectIndex = false
	self.runeHeroEquipConfig = false
	self.changeItem = false
	self.timerArr = {}
end

function RunPackageView:_refresh( ... )
	self.curRuneData = ModelManager.RuneSystemModel:getCurSelectRuneData(  )
	if self.curRuneData then
		Dispatcher.dispatchEvent(EventType.rune_changeSmallPage,{status=1,page=self.curRuneData.type})
	else
		Dispatcher.dispatchEvent(EventType.rune_changeSmallPage,{status=2})
		Dispatcher.dispatchEvent(EventType.update_smallPage)
	end
	
end

function RunPackageView:init_smallPageShow()
	Dispatcher.dispatchEvent(EventType.rune_changeSmallPage,{status=2})
	Dispatcher.dispatchEvent(EventType.update_smallPage)
	--取消当前选中
	self.curRuneData = false
end

function RunPackageView:_initEvent( )
	Dispatcher.dispatchEvent(EventType.rune_changeSmallPage,{status=2})
	self.btn_page:addClickListener(function( ... )
		ViewManager.open("RuneChooseView")
	end)
	
	self.btn_back:addClickListener(function( ... )
		self.changeCtrl:setSelectedIndex(0)
		Dispatcher.dispatchEvent(EventType.rune_changeSmallPage,{status=2})
	end)

    -- local heroCtrl = self.view:getController("heroCtrl")
    -- -- heroCtrl:setSelectedIndex(1)
    -- self.btn_hero:addClickListener(function( ... )
    -- 	local heroCtrl = self.view:getController("heroCtrl")
    -- 	if not self.heroCtrlFlag then
    -- 		heroCtrl:setSelectedIndex(1)
    -- 	else
    -- 		heroCtrl:setSelectedIndex(0)
    -- 	end
    -- 	self.heroCtrlFlag = not self.heroCtrlFlag
    -- end)

	self.changeNameBtn:addClickListener(function( ... )
		local curBjRuneID= ModelManager.RuneSystemModel:getCurBjRuneID(  )
		local data = ModelManager.RuneSystemModel:getRunePagesById( curBjRuneID )
		local curName = Desc.Rune_txt34
		if data then
             if  data.name and data.name ~="" then
             	curName = data.name
             end
		end
		ViewManager.open("RuneEditBoxView",{id=curBjRuneID,name=curName})
	end)

    
    --[[self.btn_allpanel:addClickListener(function( ... )
    	Dispatcher.dispatchEvent(EventType.rune_changeSmallPage,{status=2})
    	Dispatcher.dispatchEvent(EventType.update_smallPage)
    	--取消当前选中
    	self.curRuneData = false
    	self:updateRuneAllStatus()
    end)--]]
    
    self.btn_change:removeClickListener(100)
	self.btn_change:addClickListener(function( ... )
		if not self.changeItem then
			RollTips.show(Desc.Rune_chooseFirst)
			return
		end
		local params = {}
		params.id = self.curRuneData.id
		params.type = self.curRuneData.type
		params.index = self.curRuneData.index
		params.itemUuid = self.changeItem.uuid
		printTable(1,params)
		params.onSuccess = function (res )
			printTable(1,"请求装上",res)
			if not res then return end
			local data = {}
			data.id = res.addToPageRune.id 
			data.runeColor = res.addToPageRune.runeColor
			data.type = res.addToPageRune.type
			data.index = res.addToPageRune.index
			RuneSystemModel:setCurSelectRuneData( data )
			self:setChangeItem(self.changeItem2, nil)
			self.changeItem = false
			
			RuneSystemModel:updateRunePageRuneColor( res.addToPageRune.id,res.addToPageRune.type,res.addToPageRune.index,res.addToPageRune.runeColor)
			self.changeCtrl:setSelectedIndex(0)
			Dispatcher.dispatchEvent(EventType.rune_changeSmallPage,{status=2,page=self.curRuneData.type})
		end
		RPCReq.Rune_AddPageRunePos(params, params.onSuccess)
	end, 100)

    self.heroList:setItemRenderer(function (index,obj)
    	local c1Ctrl = obj:getController("c1")
        local heroItem = BindManager.bindCardCell(obj:getChildAutoType("cardItem"));
        local timeLab = obj:getChildAutoType("time")
        local img_red =obj:getChildAutoType("img_red")
        local data = RuneSystemModel:getEquipHeroByPos( index+1 )
        img_red:setVisible(false)
        self.img_red:setVisible(false)
        -- printTable(1,data)
        local config = self.runeHeroEquipConfig[index+1]
        if data then --已经有数据 说明
        	if data.cd>0 then
        		print(1,"有cd")
        		local nowTime = ServerTimeModel:getServerTimeMS()
        		local configTime = self.runeHeroEquipConfig[index+1]
        		local lastTime = configTime.retime -( nowTime - data.cd)/1000
        		local costAmount = config.cost[1].amount
        		if lastTime >0 then ----显示倒计时
        			print(1,"有倒计时")
        			c1Ctrl:setSelectedIndex(2)
        			obj:removeClickListener(11)
			        obj:addClickListener(function()
			            local info = {}
						info.text = Desc.Rune_txt5..costAmount..Desc.Rune_txt6..Desc.Rune_txt7
						info.yesText = Desc.common_sure
						info.noText = Desc.common_cancel
						info.type = "yes_no"
						info.onYes = function()
	                        if not ModelManager.PlayerModel:isCostEnough(config.cost) then
	                            return
	                        end
		                    local params = {}
					        params.id = RuneSystemModel:getCurBjRuneID()
					        params.pos = index+1
					        params.onSuccess = function (res )
					            -- printTable(1,"消除CD",res)
					            local data = {}
					            -- if tonumber(res.id) == tonumber(RuneSystemModel:getCurBjRuneID()) then
					            	data.cd = res.cd
								    data.pos = res.pos
								    data.uuid = ""
								    RuneSystemModel:setCurRuneEquipHero( data )
									if tolua.isnull(self.view) then return end
									self:update_rune_heroList()
								    c1Ctrl:setSelectedIndex(0)
						        	obj:removeClickListener(11)
							        obj:addClickListener(function()
							            ViewManager.open("RuneHeroChooseView",{pos=index+1})
							        end,11)
					            -- else
					            -- 	RollTips.show("符文页不对应 错误")
					            -- end
					        end
					        RPCReq.Rune_TakeEquipCD(params, params.onSuccess)
						end				
						Alert.show(info)
			        end,11)
        			timeLab:setText(TimeLib.formatTime(lastTime))
        			local onCountDown = function( time )
	        			timeLab:setText(time)
	        		end
	        		local onEnd = function (  )
	        			self.timerArr[index+1] = false
	        			if timeLab then
	        				timeLab:setText("00:00:00")
	        			end
	        			if c1Ctrl then
	        				c1Ctrl:setSelectedIndex(0)
				        	obj:removeClickListener(11)
					        obj:addClickListener(function()
					            ViewManager.open("RuneHeroChooseView",{pos=index+1})
					        end,11)
	        			end
	        		end
	        		if self.timerArr[index+1] then
						TimeLib.clearCountDown(self.timerArr[index+1])
						self.timerArr[index+1] = false
					end
	        		self.timerArr[index+1] = TimeLib.newCountDown(lastTime, onCountDown, onEnd, false, false )
        		else
        			print(1,"没有倒计时")
        			c1Ctrl:setSelectedIndex(0)
		        	obj:removeClickListener(11)
			        obj:addClickListener(function()
			            ViewManager.open("RuneHeroChooseView",{pos=index+1})
			        end,11)
			        local excluded  = RuneSystemModel:getHeroExcluedUuids( )
			        local hadFlag = CardLibModel:checkLeveltoLevel(excluded,100)
			        if hadFlag then
			        	img_red:setVisible(true)
			        	-- self.img_red:setVisible(true)
			        end
        		end
        	else
        		if data.uuid~="" and data.uuid~=nil then
        			c1Ctrl:setSelectedIndex(1)
		        	obj:removeClickListener(11)
		        	obj:addClickListener(function()
				            ViewManager.open("RuneHeroDemountView",{pos=index+1})
				    end,11)
		        	local cardData = CardLibModel:getHeroByUid(data.uuid)
		        	if cardData then
		        		heroItem:setGrayed(false)
		        		heroItem:setData(cardData,true)
		        		if cardData.level <=1 then --被重置了
			        		heroItem:setGrayed(true)
			        	end
		        	end
        		else
        			c1Ctrl:setSelectedIndex(0)
		        	obj:removeClickListener(11)
			        obj:addClickListener(function()
			            ViewManager.open("RuneHeroChooseView",{pos=index+1})
			        end,11)
			        local excluded  = RuneSystemModel:getHeroExcluedUuids( )
			        local hadFlag = CardLibModel:checkLeveltoLevel(excluded,100)
			        if hadFlag then
			        	img_red:setVisible(true)
			        	-- self.img_red:setVisible(true)
			        end
        		end
        		
        	end
        	
        else
        	if config.type == 1 then
        		c1Ctrl:setSelectedIndex(0)
	        	obj:removeClickListener(11)
		        obj:addClickListener(function()
		            ViewManager.open("RuneHeroChooseView",{pos=index+1})
		        end,11)
		        local excluded  = RuneSystemModel:getHeroExcluedUuids( )
		        local hadFlag = CardLibModel:checkLeveltoLevel(excluded,100)
		        if hadFlag then
		        	img_red:setVisible(true)
		        	-- self.img_red:setVisible(true)
		        end
    		elseif config.type == 2 then --需要付费
    			c1Ctrl:setSelectedIndex(3)
    		end
        end

    end)
    self:init_smallPageShow()
	self:update_rune_heroList()
	self:update_RuneServerData()
end

function RunPackageView:rune_quit_change( ... )
	self.changeCtrl:setSelectedIndex(0)
end

function RunPackageView:update_rune_heroList( ... )
	self.runeHeroEquipConfig = RuneConfiger.getRunePalace( ... )
	--暂时没有付费
    self.heroList:setNumItems(8)
end

--事件更新符文名称
function RunPackageView:change_packageviewName( _,params )
   self.btn_page:setTitle(params.name)
end

--服务器符文信息更新
function RunPackageView:update_RuneServerData( ... )
	local curBjRuneID = ModelManager.RuneSystemModel:getCurBjRuneID()
	self.btn_page:getChildAutoType("level"):setText(RuneSystemModel:getRuleAllLevel( RuneSystemModel:getCurBjRuneID() ))
	print(1,"RunPackageView:update_RuneServerData",curBjRuneID)
	if  curBjRuneID<1 then
		ModelManager.RuneSystemModel:setCurBjRuneID( 1 )
		curBjRuneID = 1
		local params = {}
        params.id = 1
        params.onSuccess = function (res )
            if res.ret ==0 then
                --printTable(1,"修改当前编辑页服务器推送成功",res)
                ModelManager.RuneSystemModel:setCurBjRuneID(res.id)
            end
        end
        RPCReq.Rune_PageRecordId(params, params.onSuccess)
	end

    self.curRunePageData =ModelManager.RuneSystemModel:getRunePagesById(curBjRuneID)
    if not self.curRunePageData then
    	--print(1,"出错拉 不存在当前页的数据=",curBjRuneID)
    	return
    end

    if self.curRunePageData.name~="" then
    	self.btn_page:setTitle(self.curRunePageData.name)
    else
    	self.btn_page:setTitle(Desc.Rune_txt4..curBjRuneID)
		RPCReq.Rune_PageRename({id=curBjRuneID,name =Desc.Rune_txt4..curBjRuneID},function( res )
			if tolua.isnull(self.btn_page) then return end
			self.btn_page:setTitle(res.name)
		end)
    end
    

    self.curRuneData =  ModelManager.RuneSystemModel:getCurSelectRuneData(  )
    local color,index,type = ModelManager.RuneSystemModel:checkNextCanEquip()
    
    if color and index then
    	Dispatcher.dispatchEvent(EventType.rune_changeSmallPage,{status=1,page=color})
    	--寻找到了下一个格子 将选中的格子选中设置下
        self.nextSelectIndex = index
        self.nextSelectColor = color
		local data = {}
		data.id = ModelManager.RuneSystemModel:getCurBjRuneID()
		data.runeColor = {attr = {}, itemCode = 0, id = data.id, flag = true}
		data.type = color
		data.index = self.nextSelectIndex
		ModelManager.RuneSystemModel:setCurSelectRuneData( data )
    else
		ModelManager.RuneSystemModel:setCurSelectRuneData( false )
    	self.nextSelectColor = false
    	self.nextSelectIndex = false
    	if self.curRuneData then
			Dispatcher.dispatchEvent(EventType.rune_changeSmallPage,{status=1,page=self.curRuneData.type})
		end
    end

    self:updateRuneAllStatus()
    self:update_rune_heroList()
end

--更新各个格子的状态
function RunPackageView:updateRuneAllStatus( ... )
	print(1,"RunPackageView:updateRuneAllStatus")	
	if not self.curRunePageData then
		return
	end
	for i=1,4 do -- 1 蓝 2 红 3 绿   对应服务器数据块(显示实际为紫 橙 蓝) 
		local data  ={}
		local typeName = ""
		if i == 1 then
			data = self.curRunePageData.blue
			typeName ="blue"
		elseif i == 2 then
			data = self.curRunePageData.red
			typeName ="red"
		elseif i == 3 then
			data = self.curRunePageData.green
			typeName ="green"
		elseif i == 4 then
			data = self.curRunePageData.black
			typeName ="black"
		end

		
        local nextIndex = 0
		for j=1,10 do
			local status = 0
			local runePageConfig = RuneConfiger.getRuneGeziConfig(i,j)
			local openLevel = 0
			if runePageConfig then
				openLevel = runePageConfig.tower
			end
	
			
            local runeColor = data[j]
            if runeColor and runeColor.id ==j then --数据是否存在
            	nextIndex = j
            	if runeColor.itemCode~= 0 then
               	   status = 3
                else
               	   status = 2
                end
            else
                if ModelManager.PataModel:getPataFloor(GameDef.GamePlayType.NormalTower) >= openLevel then --等级达到
	            	nextIndex = j
	            	local runeColor = data[j]
	            	if runeColor and runeColor.id ==j then --数据是否存在
	            		if runeColor.itemCode~= 0 then
		               	   status = 3
		                else
		               	   status = 2
		                end
	            	else
	                    status = 2
	            	end
	            else
	            	--检测是不是已经解锁开发的格子的下一个
	                if j == nextIndex + 1 then
	                    status = 1
	                else
	                	status = 0
	                end
	            end
            end
            
            self["rune"..i..(j-1)]:getChildAutoType("temp"):setVisible(false)
            self["rune"..i..(j-1)]:getChildAutoType("temp"):setText(typeName..i.." "..j)
			if status ==3 then
				local level = RuneConfiger.getRuneLevel( runeColor.itemCode )
				local iconURL = ItemConfiger.getItemIconByCode(runeColor.itemCode)
				self["rune"..i..(j-1)]:setIcon(iconURL)
			end
			if status == 1 then
				if i == 4 and runePageConfig then
					self["rune"..i..(j-1)]:setTitle(runePageConfig.cost[1].amount.. ItemConfiger.getItemNameByCode(runePageConfig.cost[1].code))
				else
					self["rune"..i..(j-1)]:setTitle(openLevel..Desc.Rune_txt44)
				end
				self["rune"..i..(j-1)]:setIcon(nil)
			end

			if status == 2 or status==0 then
				self["rune"..i..(j-1)]:setIcon(nil)
			end
			
			self["rune"..i..(j-1)]:getController("statusCtrl"):setSelectedIndex(status)
            if self.nextSelectIndex and self.nextSelectColor then
            	if  self.nextSelectColor==i and self.nextSelectIndex == j then
					self["rune"..i..(j-1)]:getController("curCtrl"):setSelectedIndex(1)
				else
					self["rune"..i..(j-1)]:getController("curCtrl"):setSelectedIndex(0)
				end
            else
            	if self.curRuneData and self.curRuneData.type==i and self.curRuneData.index == j then
					self["rune"..i..(j-1)]:getController("curCtrl"):setSelectedIndex(1)
				else
					self["rune"..i..(j-1)]:getController("curCtrl"):setSelectedIndex(0)
				end
            end
			
			self["rune"..i..(j-1)]:removeClickListener(11)
            self["rune"..i..(j-1)]:addClickListener(function( ... )
            	print(1,"i",i,"j",j,"被点击")
            	if status == 0 then --未解锁  提示
					if i == 4 then
						RollTips.show(string.format(Desc.Rune_txt49))
					else
						RollTips.show(string.format(Desc.Rune_txt35, openLevel))
					end
            		ModelManager.RuneSystemModel:setCurSelectRuneData( false )
            		self.curRuneData = false
        		elseif status == 1 then
        			self.curRuneData = false
					local hintStr
					if i ~= 4 then
						hintStr = string.format(Desc.Rune_txt37,openLevel, runePageConfig.cost[1].amount)
						local info = {}
						info.text = hintStr
						info.type = "yes_no"
						info.mask = true
						info.yesText = Desc.Rune_toTower
						info.noText = Desc.Rune_moneyOpen
						info.onNo = function()
							if ModelManager.PlayerModel:isCostEnough(runePageConfig.cost, true) then
								local info = {}
								info.text = string.format(Desc.Rune_moneyOpen2, runePageConfig.cost[1].amount)
								info.type = "yes_no"
								info.mask = true
								info.onYes = function()
									--请求协议
									local params = {}
									params.id = ModelManager.RuneSystemModel:getCurBjRuneID()
									params.type = i
									params.index = j
									--printTable(1,"客户端发送",params)
									params.onSuccess = function (res )
										--printTable(1,"花费钻石解锁服务器数据返回",res)
										if res.id and res.type and res.index then
											RollTips.show(Desc.Rune_txt40)
											 local data = {}
											data.id = res.id 
											data.runeColor = res.runeColor
											data.type = res.type
											data.index = res.index
											self.curRuneData = data
											self.nextSelectIndex = false
											self.nextSelectColor = false
											ModelManager.RuneSystemModel:setRunePageRuneColor( res.id,res.type,res.index,res.runeColor)
											Dispatcher.dispatchEvent(EventType.update_RuneServerData) --更新页面
										end
									end
									RPCReq.Rune_Unload(params, params.onSuccess)
								end
								Alert.show(info)
							end
						end
						info.onYes = function()
							ModuleUtil.openModule(ModuleId.Tower.id)
						end
						Alert.show(info)
					else
						hintStr = string.format(Desc.Rune_txt48, runePageConfig.cost[1].amount, ItemConfiger.getItemNameByCode(runePageConfig.cost[1].code))
						local info = {}
						info.text = hintStr
						info.type = "yes_no"
						info.mask = true
						info.onYes = function()
							if ModelManager.PlayerModel:isCostEnough(runePageConfig.cost, true) then
								--请求协议
								local params = {}
								params.id = ModelManager.RuneSystemModel:getCurBjRuneID()
								params.type = i
								params.index = j
								--printTable(1,"客户端发送",params)
								params.onSuccess = function (res )
									--printTable(1,"花费钻石解锁服务器数据返回",res)
									if res.id and res.type and res.index then
										RollTips.show(Desc.Rune_txt40)
										 local data = {}
										data.id = res.id 
										data.runeColor = res.runeColor
										data.type = res.type
										data.index = res.index
										self.curRuneData = data
										self.nextSelectIndex = false
										self.nextSelectColor = false
										ModelManager.RuneSystemModel:setRunePageRuneColor( res.id,res.type,res.index,res.runeColor)
										Dispatcher.dispatchEvent(EventType.update_RuneServerData) --更新页面
									end
								end
								RPCReq.Rune_Unload(params, params.onSuccess)
							end
						end
						Alert.show(info)
					end
        			
    			elseif status == 2 then
    				local data = {}
					data.id = ModelManager.RuneSystemModel:getCurBjRuneID()
					data.runeColor = runeColor
					data.type = i
					data.index = j
    				ModelManager.RuneSystemModel:setCurSelectRuneData( data )
    				self.curRuneData = data
    				self.nextSelectIndex = false
					self.nextSelectColor = false
    				self:updateRuneAllStatus()
                    Dispatcher.dispatchEvent(EventType.rune_changeSmallPage,{status=1,page=i}) --打开背包 筛选同样颜色的数据
				elseif status ==3 then
					-- Dispatcher.dispatchEvent(EventType.rune_changeSmallPage,{status=3})
					local data = {}
					data.id = ModelManager.RuneSystemModel:getCurBjRuneID()
					data.runeColor = runeColor
					data.type = i
					data.index = j
					ModelManager.RuneSystemModel:setCurSelectRuneData( data )
					self.curRuneData = data
					self.nextSelectIndex = false
					self.nextSelectColor = false
					self:updateRuneAllStatus()
					Dispatcher.dispatchEvent(EventType.rune_changeSmallPage,{status=2,page=i})
					--Dispatcher.dispatchEvent(EventType.update_smallPage)
					--self.changeCtrl:setSelectedIndex(0)
					ViewManager.open("RuneTipsView")
				end
            end,11)
		end
		
	end
end

function RunPackageView:setChangeItem(obj, runeData)
	local runeCell = BindManager.bindItemCell(obj:getChildAutoType("runeCell"))
	runeCell:setAmountVisible(false)
	local txt_name = obj:getChildAutoType("txt_name")
	if runeData then
		runeCell:setData(runeData.runeColor.itemCode,0, CodeType.ITEM)
		obj:getController("emptyCtrl"):setSelectedIndex(0)
		
		txt_name:setText(runeCell:getItemData():getName())
		txt_name:setColor(runeCell:getItemData():getColor())
	else
		runeCell:setData(0,0, CodeType.ITEM)
		obj:getController("emptyCtrl"):setSelectedIndex(1)
		txt_name:setText("")
	end
	
	
	
	
	local attrDataList = runeData and runeData.runeColor.attr or {}
	local list_attr = obj:getChildAutoType("list_attr")
	list_attr:setItemRenderer(function (index,obj)
		local attrData = attrDataList[index + 1]
		obj:getChildAutoType("title"):setText(Desc["common_fightAttr"..attrData.id])
		obj:getChildAutoType("titleVal"):setText("+"..GMethodUtil:getFightAttrName(attrData.id,attrData.value))
		
		if attrData.id < 100 or RuneConfiger.isHightAttr(attrData.id) then
			obj:getChildAutoType("title"):setColor(ColorUtil.textColor.yellow)
			obj:getChildAutoType("titleVal"):setColor(ColorUtil.textColor.yellow)
		else
			obj:getChildAutoType("title"):setColor(ColorUtil.textColor.black)
			obj:getChildAutoType("titleVal"):setColor(ColorUtil.textColor.black)
		end
	end)
	list_attr:setData(attrDataList)
	
end

function RunPackageView:set_runeChangeItem(_,data)
	self.changeCtrl:setSelectedIndex(1)
	self:setChangeItem(self.changeItem1, self.curRuneData)
	self:setChangeItem(self.changeItem2, data.runeData)
	
	self.changeItem  = data.runeData
end

function RunPackageView:rune_changeRune(_,data)
	self.changeCtrl:setSelectedIndex(1)
	self:setChangeItem(self.changeItem1, data.runeData)
	self:setChangeItem(self.changeItem2, nil)
	self.curRuneData = data.runeData
	
	
end


function RunPackageView:_initVM( )
	local vmRoot = self
	local viewNode = self.view
	---Do not modify following code--------
	--{vmFields}:RuneSystem.RunPackageView
		vmRoot.heroList = viewNode:getChildAutoType("$heroList")--list
		vmRoot.rune10 = viewNode:getChildAutoType("$rune10")--Button
		vmRoot.rune29 = viewNode:getChildAutoType("$rune29")--Button
		vmRoot.rune15 = viewNode:getChildAutoType("$rune15")--Button
		vmRoot.rune36 = viewNode:getChildAutoType("$rune36")--Button
		vmRoot.rune11 = viewNode:getChildAutoType("$rune11")--Button
		vmRoot.rune17 = viewNode:getChildAutoType("$rune17")--Button
		vmRoot.btn_page = viewNode:getChildAutoType("$btn_page")--Button
		vmRoot.rune18 = viewNode:getChildAutoType("$rune18")--Button
		vmRoot.rune33 = viewNode:getChildAutoType("$rune33")--Button
		vmRoot.rune24 = viewNode:getChildAutoType("$rune24")--Button
		vmRoot.changeNameBtn = viewNode:getChildAutoType("$changeNameBtn")--Button
		vmRoot.rune21 = viewNode:getChildAutoType("$rune21")--Button
		vmRoot.rune14 = viewNode:getChildAutoType("$rune14")--Button
		vmRoot.rune19 = viewNode:getChildAutoType("$rune19")--Button
		vmRoot.rune30 = viewNode:getChildAutoType("$rune30")--Button
		vmRoot.btn_allpanel = viewNode:getChildAutoType("$btn_allpanel")--Button
		vmRoot.rune22 = viewNode:getChildAutoType("$rune22")--Button
		vmRoot.rune27 = viewNode:getChildAutoType("$rune27")--Button
		vmRoot.rune16 = viewNode:getChildAutoType("$rune16")--Button
		vmRoot.rune31 = viewNode:getChildAutoType("$rune31")--Button
		vmRoot.rune26 = viewNode:getChildAutoType("$rune26")--Button
		vmRoot.rune12 = viewNode:getChildAutoType("$rune12")--Button
		vmRoot.rune28 = viewNode:getChildAutoType("$rune28")--Button
		vmRoot.rune38 = viewNode:getChildAutoType("$rune38")--Button
		vmRoot.rune25 = viewNode:getChildAutoType("$rune25")--Button
		vmRoot.rune37 = viewNode:getChildAutoType("$rune37")--Button
		vmRoot.rune35 = viewNode:getChildAutoType("$rune35")--Button
		vmRoot.rune13 = viewNode:getChildAutoType("$rune13")--Button
		vmRoot.rune20 = viewNode:getChildAutoType("$rune20")--Button
		vmRoot.rune34 = viewNode:getChildAutoType("$rune34")--Button
		vmRoot.rune39 = viewNode:getChildAutoType("$rune39")--Button
		vmRoot.rune23 = viewNode:getChildAutoType("$rune23")--Button
		vmRoot.rune32 = viewNode:getChildAutoType("$rune32")--Button
		
		vmRoot.rune40 = viewNode:getChildAutoType("$rune40")--Button
		vmRoot.rune41 = viewNode:getChildAutoType("$rune41")--Button
		vmRoot.rune42 = viewNode:getChildAutoType("$rune42")--Button
		vmRoot.rune43 = viewNode:getChildAutoType("$rune43")--Button
		vmRoot.rune44 = viewNode:getChildAutoType("$rune44")--Button
		vmRoot.rune45 = viewNode:getChildAutoType("$rune45")--Button
		vmRoot.rune46 = viewNode:getChildAutoType("$rune46")--Button
		vmRoot.rune47 = viewNode:getChildAutoType("$rune47")--Button
		vmRoot.rune48 = viewNode:getChildAutoType("$rune48")--Button
		vmRoot.rune49 = viewNode:getChildAutoType("$rune49")--Button
		
	--{vmFieldsEnd}:RuneSystem.RunPackageView
	--Do not modify above code-------------
    self.btn_hero = viewNode:getChildAutoType("$btn_hero")
    self.changeCtrl = viewNode:getController("changeCtrl")
    self.changeItem1 = viewNode:getChildAutoType("changeItem1")
    self.changeItem2 = viewNode:getChildAutoType("changeItem2")
    self.btn_change = viewNode:getChildAutoType("btn_change")
    self.btn_back = viewNode:getChildAutoType("btn_back")
end

function RunPackageView:_initUI( )
	self:_initVM()
	self.img_red = self.view:getChildAutoType("img_red")
end


function RunPackageView:_exit( ... )
	for k,v in pairs(self.timerArr) do
		TimeLib.clearCountDown(v)
	end
	self.timerArr = {}
end


return RunPackageView