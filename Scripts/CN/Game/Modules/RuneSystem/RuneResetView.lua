--Name : RuneResetView.lua
--Author : generated by FairyGUI
--Date : 2020-5-21
--Desc : 

local RuneResetView,Super = class("RuneResetView", View)
local  RuneConfiger = require "Game.Modules.RuneSystem.RuneConfiger"
local ItemCell = require "Game.UI.Global.ItemCell"
function RuneResetView:ctor()
	--LuaLog("RuneResetView ctor")
	self._packName = "RuneSystem"
	self._compName = "RuneResetView"
	self.runeAttrs = false
	self.itemcell = false
	self.spineNode = false
	self.effectFlag = false
	self.payType = 0
	--self._rootDepth = LayerDepth.Window
	self.lockAttrIds = {} --已锁定的位置
	self.lockNum = 0 --已锁定的数量
	self.lockCost = 0 -- 锁定需要的道具数
end

function RuneResetView:_refresh( ... )
	Dispatcher.dispatchEvent(EventType.rune_changeSmallPage,{status=1,page=0,show=true,pageIndex = 3})
end

function RuneResetView:_initEvent( )
	Dispatcher.dispatchEvent(EventType.rune_changeSmallPage,{status=1,page=0,show=true,pageIndex = 3})
end

function RuneResetView:_initVM( )
	local vmRoot = self
	local viewNode = self.view
	---Do not modify following code--------
	--{vmFields}:RuneSystem.RuneResetView
		vmRoot.proList = viewNode:getChildAutoType("$proList")--list
		vmRoot.runeCell = viewNode:getChildAutoType("$runeCell")--Button
		vmRoot.costItem = viewNode:getChildAutoType("$costItem")--
		vmRoot.costItem1 = viewNode:getChildAutoType("$costItem1")--
		vmRoot.costItemLock = viewNode:getChildAutoType("$costItemLock")--
		vmRoot.btn_cz = viewNode:getChildAutoType("$btn_cz")--Button
	--{vmFieldsEnd}:RuneSystem.RuneResetView
	--Do not modify above code-------------
	
	local dayStr = DateUtil.getOppostieDays()
	local hasClickToay = FileCacheManager.setBoolForKey("rune_reset_click".."_"..dayStr,false)  --当天点过就不能再显示红点了
	RedManager.updateValue("V_RUNERESET",false)
end

function RuneResetView:set_runeResetEvent( _,params )
	if params.itemData then
	   local itemData = params.itemData
		self.lockAttrIds = {}
		self.lockNum = 0;
		self:updateLockCost()
	   -- printTable(1,itemData)
	   local cost = RuneConfiger.getRuneCost( itemData:getItemCode() )
	   self.costItemObj:setData(CodeType.MONEY, cost[1].code, cost[1].amount, true,false)

	   local pay = RuneConfiger.getRuneCost2( itemData:getItemCode() )
	   self.costItemObj1:setData(CodeType.MONEY, pay[1].code, pay[1].amount, true,false)

	   local url = ItemConfiger.getItemIconByCode(itemData:getItemCode(), itemData:getItemType())
	   -- self.runeCell:setIcon(url)
	   -- self.runeCell:getController("statusCtrl"):setSelectedIndex(1)
	   -- do return end
	   if not self.itemcell then
	      self.itemcell = BindManager.bindItemCell(self.runeCell)
	      self.itemcell:setAmountVisible(false)
	   end
	   self.itemcell:setItemData(itemData) 
	   RuneSystemModel:setCurRuneResetData(itemData)
	   self.itemcell:setNoFrame(true)
	   --更新属性
	   self.runeAttrs = itemData:getItemSPecialData().rune.attrs
	   self.proList:setData(self.runeAttrs)
	   -- self.btn_cz:setTouchable(true)
       -- self.btn_cz:setGrayed(false)
       self.view:getController("showCtrl"):setSelectedIndex(1)
	else
		self.view:getController("showCtrl"):setSelectedIndex(0)
	end

	self:updateFreeTime()

end

function RuneResetView:reset_update_FreeTime( ... )
	self:updateFreeTime()
end

function RuneResetView:updateFreeTime( ... )
	local freeTime = RuneSystemModel:getFreeTimes(  )
	local data = RuneSystemModel:getRunePackByType( 0,3)
	if freeTime >0 then
        self.view:getController("freeCtrl"):setSelectedIndex(0)
        self.payType = 0
		self.view:getChildAutoType("n25"):setText(freeTime)
		if #data>0 then
			self.btn_cz:getChildAutoType("img_red"):setVisible(true)
			RedManager.updateValue("V_RUNERESET",true)
		else
			self.btn_cz:getChildAutoType("img_red"):setVisible(false)
			RedManager.updateValue("V_RUNERESET",false)
		end
	else
		self.view:getController("freeCtrl"):setSelectedIndex(1)
		if self.costBtn1:isSelected() then
			self.payType = 1
		end
		if self.costBtn2:isSelected() then
			self.payType = 2
		end
		self.btn_cz:getChildAutoType("img_red"):setVisible(false)
		RedManager.updateValue("V_RUNERESET",false)
	end
end

function RuneResetView:showSpine(  )
	if not self.spineNode then
		self.spineNode = SpineUtil.createSpineObj(self.runeCell, vertex2(self.runeCell:getWidth()/2,self.runeCell:getHeight()/2), "fw_chongzhi_fazhen", "Spine/ui/rune", "fuwenxitong_texiao", "fuwenxitong_texiao",false)
	else
		self.spineNode:setAnimation(0, "fw_chongzhi_fazhen", false)
	end
	self.spineNode:setCompleteListener(function( name )
		self.effectFlag = false
	end)
end

function RuneResetView:_initUI( )
	self:_initVM()
	self.costBtn1 = self.view:getChildAutoType("n29")
	self.costBtn2 = self.view:getChildAutoType("n30")
	self.btn_sxyl  = self.view:getChildAutoType("btn_sxyl")
	self.btn_sxyl:addClickListener(function()
		ViewManager.open("RunePreView")
	end)
	self.costBtn1:addClickListener(function( ... )
		self.payType = 1
		self.costBtn2:setSelected(false)
	end)
	self.costBtn2:addClickListener(function( ... )
		self.payType = 2
		self.costBtn1:setSelected(false)
	end)
	self.proList:setItemRenderer(function (index,obj)
		
		local attrData = self.runeAttrs[index+1]
		local btn_lock = obj:getChildAutoType("btn_lock")
		local img_lock = obj:getChildAutoType("img_lock")
		img_lock:getController("button"):setSelectedIndex(self.lockAttrIds[index + 1] ~= nil and 1 or 0)
		obj:getChildAutoType("title"):setText(Desc["common_fightAttr"..attrData.id])
		obj:getChildAutoType("titleVal"):setText("+"..GMethodUtil:getFightAttrName(attrData.id,attrData.value))
		if attrData.id < 100 or RuneConfiger.isHightAttr(attrData.id) then
			obj:getChildAutoType("title"):setColor(cc.c3b(0xff, 0xA4, 0x43))
			obj:getChildAutoType("titleVal"):setColor(cc.c3b(0xff, 0xA4, 0x43))
		else
			obj:getChildAutoType("title"):setColor(ColorUtil.textColor.white)
			obj:getChildAutoType("titleVal"):setColor(ColorUtil.textColor.white)
		end
		if self.effectFlag then
			SpineUtil.createSpineObj(obj, vertex2(obj:getWidth()/2,obj:getHeight()/2), "fw_chongzhi_shuxingtiao", "Spine/ui/rune", "fuwenxitong_texiao", "fuwenxitong_texiao",false)
		end
		
		btn_lock:removeClickListener(100)
		btn_lock:addClickListener(function ( ... )
			if self.lockAttrIds[index + 1] then
				self.lockAttrIds[index + 1] = nil
				self.lockNum = self.lockNum - 1
				img_lock:getController("button"):setSelectedIndex(0)
			else
				if self.lockNum >= #self.runeAttrs -1 then
					RollTips.show(Desc.Rune_mustOne)
					return
				end
				self.lockAttrIds[index + 1] = attrData
				self.lockNum = self.lockNum + 1
				img_lock:getController("button"):setSelectedIndex(1)
			end
			self:updateLockCost()
		end,100)
    end)

    self.btn_cz:addClickListener(function ( ... )
        local preitemData = RuneSystemModel:getCurRuneResetData( )
        if not preitemData then
        	RollTips.show(Desc.Rune_txt1)
        	return
        end
        local attrs = preitemData:getItemSPecialData().rune.attrs
        local attr_id = 0
        local flag = false
        if #attrs>1 then
        	for i,v in ipairs(attrs) do
	        	if attr_id == 0 then
	               attr_id = v.id
	            end
	            if attr_id~=v.id then
                   flag = true
	            end
	        end
	        if not flag then --属性都相同
	        	local info = {}
				info.text = preitemData:getName()..#attrs..Desc.Rune_txt2
				info.yesText = Desc.common_sure
				info.noText = Desc.common_cancel
				info.type = "yes_no"
				info.onYes = function()
				    if self.payType == 1 then
			        	local cost = RuneConfiger.getRuneCost( preitemData:getItemCode() )
				        if not ModelManager.PlayerModel:isCostEnough(cost, true) then
				    		return
				   		end
			        elseif self.payType == 2 then
			        	local cost = RuneConfiger.getRuneCost2( preitemData:getItemCode() )
				        if not ModelManager.PlayerModel:isCostEnough(cost, true) then
				    		return
				   		end
			        end
					-- 锁定的消耗判断
					if not ModelManager.PlayerModel:isCostEnough(self.lockCost, true) then
						return
					end
					
					local lockAttrIds = {}
					for attrId,v in pairs(self.lockAttrIds) do
						table.insert(lockAttrIds,attrId)
					end
                   local params = {}
			    	params.itemUuid = preitemData:getUuid()
			    	params.type = self.payType --0免费  1 金币 2 钻石
			    	params.itemLockedList = lockAttrIds
					params.onSuccess = function (res )
					    if res.uuid == preitemData:getUuid() then
					    	preitemData:getItemSPecialData().rune.attrs = res.attrPos
					    	self.runeAttrs = res.attrPos
					        RuneSystemModel:setCurRuneResetData(preitemData )					
							if not tolua.isnull(self.view) then 
								self.proList:setData(res.attrPos)
							end
							Dispatcher.dispatchEvent(EventType.rune_changeSmallPage,{status=1,show=true})
							-- Dispatcher.dispatchEvent(EventType.update_resetPage_OneListCell)
					    end
					end
					printTable(1,params)
					RPCReq.Rune_ResetAttrs(params, params.onSuccess)
				end				
				Alert.show(info)
				return
	        end
        end
        if self.payType == 1 then
        	local cost = RuneConfiger.getRuneCost( preitemData:getItemCode() )
	        if not ModelManager.PlayerModel:isCostEnough(cost, true) then
	    		return
	   		end
        elseif self.payType == 2 then
        	local cost = RuneConfiger.getRuneCost2( preitemData:getItemCode() )
	        if not ModelManager.PlayerModel:isCostEnough(cost, true) then
	    		return
	   		end
        end
		
		-- 锁定的消耗判断
		if not ModelManager.PlayerModel:isCostEnough(self.lockCost, true) then
			return
		end

		local lockAttrIds = {}
		for attrId,v in pairs(self.lockAttrIds) do
			table.insert(lockAttrIds,attrId)
		end
    	local params = {}
    	params.itemUuid = preitemData:getUuid()
    	params.type = self.payType --0免费  1 金币 2 钻石
		params.itemLockedList = lockAttrIds
    	printTable(1,"params",params)
		params.onSuccess = function (res )
		    if res.uuid == preitemData:getUuid() then
		    	self.effectFlag = true
		    	preitemData:getItemSPecialData().rune.attrs = res.attrPos
		    	self.runeAttrs = res.attrPos
		        RuneSystemModel:setCurRuneResetData(preitemData )
				if not tolua.isnull(self.view) then
					self.proList:setData(res.attrPos)
					self:showSpine()
				end
				-- Dispatcher.dispatchEvent(EventType.rune_changeSmallPage,{status=1,show=true})
				Dispatcher.dispatchEvent(EventType.update_resetPage_OneListCell)
		        RollTips.show(Desc.Rune_txt3)
		    end
		end
		printTable(1,params)
		RPCReq.Rune_ResetAttrs(params, params.onSuccess)

    end)

    self.costItemObj = BindManager.bindCostItem(self.costItem)
    self.costItemObj:setData(CodeType.MONEY, 1, 0,true,false)
	self.costItemObj:setUseMoneyItem(true);
	-- self.costItem:setScale(0.9,0.9)


	self.costItemObj1 = BindManager.bindCostItem(self.costItem1)
    self.costItemObj1:setData(CodeType.MONEY, 1, 0, true,false)
	self.costItemObj1:setUseMoneyItem(true);

	self.costItemLockObj = BindManager.bindCostItem(self.costItemLock)
    self.costItemLockObj:setData(CodeType.MONEY, 1, 0, true,false)
	self.costItemLockObj:setUseMoneyItem(true);
	-- self.costItem1:setScale(0.9,0.9)
    self:updateFreeTime()
    local preitemData = RuneSystemModel:getCurRuneResetData( )
    if preitemData  then
       self.view:getController("showCtrl"):setSelectedIndex(1)
       local cost = RuneConfiger.getRuneCost( preitemData:getItemCode() )
       local pay = RuneConfiger.getRuneCost2( preitemData:getItemCode() )
       self.costItemObj:setData(CodeType.MONEY, cost[1].code, cost[1].amount, true,false)
       self.costItemObj1:setData(CodeType.MONEY, pay[1].code, pay[1].amount,true,false)
       local url = ItemConfiger.getItemIconByCode(preitemData:getItemCode(), preitemData:getItemType())
	   -- self.runeCell:setIcon(url)
	   -- self.runeCell:getController("statusCtrl"):setSelectedIndex(1)
	   if not self.itemcell then
	      self.itemcell = BindManager.bindItemCell(self.runeCell)
	      self.itemcell:setAmountVisible(false)
	   end
	   self.itemcell:setItemData(preitemData)
	   --更新属性
	   self.runeAttrs = preitemData:getItemSPecialData().rune.attrs
	   self.proList:setData(self.runeAttrs)
	   -- self.btn_cz:setTouchable(true)
       -- self.btn_cz:setGrayed(false)
    else
    	self.view:getController("showCtrl"):setSelectedIndex(0)
        -- self.btn_cz:setTouchable(false)
        -- self.btn_cz:setGrayed(true)
    end
	
	self:updateLockCost()
end

function RuneResetView:updateLockCost()
	if self.lockNum == 1 then
		self.lockCost = DynamicConfigData.t_LockConsume[1].cost
	elseif self.lockNum == 2 then
		self.lockCost = DynamicConfigData.t_LockConsume[2].cost
	else
		local cost = DynamicConfigData.t_LockConsume[1].cost
		self.lockCost = {{type = cost[1].type, code = cost[1].code, amount = 0}}
	end
		
	self.costItemLockObj:setData(self.lockCost[1].type, self.lockCost[1].code, self.lockCost[1].amount, true,false)
end

return RuneResetView