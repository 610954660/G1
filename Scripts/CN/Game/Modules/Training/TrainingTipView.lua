--Date :2020-12-10
--Author : generated by FairyGUI
--Desc : 

local TrainingTipView,Super = class("TrainingTipView", Window)

function TrainingTipView:ctor()
	--LuaLog("TrainingTipView ctor")
	self._packName = "Training"
	self._compName = "TrainingTipView"
	self._rootDepth = LayerDepth.PopWindow
	
end

function TrainingTipView:_initEvent( )
	
end

function TrainingTipView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:Training.TrainingTipView
	self.closeButton = viewNode:getChildAutoType('closeButton')--GLabel
	self.closeText = viewNode:getChildAutoType('closeText')--GComponent
	self.finishRect = viewNode:getChildAutoType('finishRect')--GGroup
	self.finishTime = viewNode:getChildAutoType('finishTime')--GTextField
	self.finisheBg = viewNode:getChildAutoType('finisheBg')--GLoader
	self.playeName = viewNode:getChildAutoType('playeName')--GTextField
	self.scName = viewNode:getChildAutoType('scName')--GTextField
	self.tipBg = viewNode:getChildAutoType('tipBg')--GLoader
	self.tipRect = viewNode:getChildAutoType('tipRect')--scrollTextCom
		self.tipRect.HeroList = viewNode:getChildAutoType('tipRect/HeroList')--GList
		self.tipRect.taskName = viewNode:getChildAutoType('tipRect/taskName')--GTextField
		self.tipRect.tips1 = viewNode:getChildAutoType('tipRect/tips1')--GRichTextField
		self.tipRect.tips2 = viewNode:getChildAutoType('tipRect/tips2')--GRichTextField
	self.windowType = viewNode:getController('windowType')--Controller
	self.ztName = viewNode:getChildAutoType('ztName')--GTextField
	--{autoFieldsEnd}:Training.TrainingTipView
	--Do not modify above code-------------
end

function TrainingTipView:_initUI( )
	self:_initVM()
	if self._args.windowType==1 then
		self.windowType:setSelectedIndex(1)
		self:setFinishData()
	else
		self:setTipData()
	end

end


function TrainingTipView:setFinishData()
	local format_normal = "%Y/%m/%d"
    self.finishTime:setText(string.format(Desc.Training_Time,TimeLib.msToString(TrainingModel.allFinishTime,format_normal)))
	self.playeName:setText(PlayerModel.username)
end

function TrainingTipView:setTipData( )
    local taskData=TrainingModel.taskData
	self.tipRect.taskName:setText(taskData.title)
	self.tipRect.tips1:setText(taskData.tips1)
	self.tipRect.tips2:setText(taskData.tips2)
	local showCardDatas={}
	local cardNum=table.nums(taskData.herocard)
	if cardNum>0 then
		for k, v in pairs(taskData.herocard) do
			table.insert(showCardDatas,v)
		end
	end

	self.tipRect.HeroList:setItemRenderer(function(index,obj)
			local cardData=showCardDatas[index+1]
			local headIcon= obj:getChildAutoType("img_icon")--头像框
			local img_frame= obj:getChildAutoType("img_frame")--星级框
			headIcon:setURL(PathConfiger.getHeroOfMonsterIcon(cardData.heroId))
			img_frame:setURL(PathConfiger.getHeroFrame(5))
			obj:setTitle(cardData.effectName)
	end)


	self.tipRect.HeroList:setNumItems(cardNum)
end

function TrainingTipView:_exit()
    if self._args.isAutoOpen and TrainingModel.taskData.taskType==2 then
		GuideModel:checkGuideActivate({{name="xunlianying",id=ModuleId.Tactical.id}})
	end
	--GuideModel:checkGuideActivate({{name="xunlianying",id=ModuleId.Tactical.id}})
end



return TrainingTipView