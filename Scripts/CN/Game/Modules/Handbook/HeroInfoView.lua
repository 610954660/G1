--Name : HeroInfoView.lua
--Author : generated by FairyGUI
--Date : 2020-5-30
--Desc : 

local HeroInfoView,Super = class("HeroInfoView", Window)
local  HeroConfiger = require "Game.ConfigReaders.HeroConfiger"

function HeroInfoView:ctor()
	--LuaLog("HeroInfoView ctor")
	self._packName = "Handbook"
	self._compName = "HeroInfoView"
	self._rootDepth = LayerDepth.Window
	
	self.isInitMoreLayer = false

	self.dragArea   = false
    self._dragMoveX = 0
    self._dragStartX = 0
    self._lastPosX = 0 --拖动时上一次的点，用来计算方向
    self._dir = 1
	self.totemConfig = false
	self.heroQualityObj = false
end

function HeroInfoView:_exit( ... )
	Dispatcher.dispatchEvent("spe_windowEvent")
end

function HeroInfoView:_initEvent( )
	
end

function HeroInfoView:_initVM( )
	local vmRoot = self
	local viewNode = self.view
	---Do not modify following code--------
	--{vmFields}:Handbook.HeroInfoView
		vmRoot.lbt = viewNode:getChildAutoType("$lbt")--Button
		vmRoot.shareBt = viewNode:getChildAutoType("$shareBt")--Button
		local rightNode2 = viewNode:getChildAutoType("$rightNode2")--
		vmRoot.rightNode2 = rightNode2
			rightNode2.zhanlitext = viewNode:getChildAutoType("$rightNode2/$zhanlitext")--text
		vmRoot.myId = viewNode:getChildAutoType("$myId")--text
		vmRoot.fangdaBt = viewNode:getChildAutoType("$fangdaBt")--Button
		vmRoot.btn_back = viewNode:getChildAutoType("$btn_back")--loader
		vmRoot.cardcategory_bg = viewNode:getChildAutoType("$cardcategory_bg")--loader
		vmRoot.qidai = viewNode:getChildAutoType("$qidai")--Button
		vmRoot.huashi = viewNode:getChildAutoType("$huashi")--text
		local rightNode3 = viewNode:getChildAutoType("$rightNode3")--
		vmRoot.rightNode3 = rightNode3
			rightNode3.skilllist = viewNode:getChildAutoType("$rightNode3/$skilllist")--list
		vmRoot.rightNode1 = viewNode:getChildAutoType("$rightNode1")--
		vmRoot.btn_gift = viewNode:getChildAutoType("$btn_gift")--Button
		vmRoot.btn_gold = viewNode:getChildAutoType("$btn_gold")--Button
		vmRoot.btn_roate = viewNode:getChildAutoType("$btn_roate")--Button
		vmRoot.manjiBt = viewNode:getChildAutoType("$manjiBt")--Button
		vmRoot.cv = viewNode:getChildAutoType("$cv")--text
		local moreLayer = viewNode:getChildAutoType("$moreLayer")--
		vmRoot.moreLayer = moreLayer
			moreLayer.leftList = viewNode:getChildAutoType("$moreLayer/$leftList")--list
		vmRoot.pingjiaBt = viewNode:getChildAutoType("$pingjiaBt")--Button
		vmRoot.rbt = viewNode:getChildAutoType("$rbt")--Button
		vmRoot.lhicon = viewNode:getChildAutoType("$lhicon")--
		vmRoot.closeButton = viewNode:getChildAutoType("closeButton")
		vmRoot.bg = viewNode:getChildAutoType("bg")
		vmRoot.heroQuality = viewNode:getChildAutoType("heroQuality")
		vmRoot.btn_uniqueWeapon = viewNode:getChildAutoType("btn_uniqueWeapon")
		
	--{vmFieldsEnd}:Handbook.HeroInfoView
	--Do not modify above code-------------
end

function HeroInfoView:_initUI( )
	self:_initVM()
	self:moveTitleToTop()
	self.heroList = self._args.heroList or false
	self.heroIndex = self._args.index or -1
	if not self.heroList then 
		for k,list in pairs(HandbookModel.heroTabData) do
			for index,v in ipairs(list) do
				if v.hero == self._args.heroId then
					self.heroList = {v}
					self.heroIndex = 1
					break
				end
			end
		end
	end
	if not self.heroList then return end
	self.bg:setIcon(PathConfiger.getBg("HandbookBg.png"))

	self.combatConfig = DynamicConfigData.t_combat
	self.heroConfig = DynamicConfigData.t_hero[self._args.heroId]
	self.lhicon:setScale(0.7,0.7)
	self.lhicon = BindManager.bindLihuiDisplay(self.lhicon)
	self.heroQualityObj = BindManager.bindHeroQuality(self.heroQuality)
	--self.rightNode2.rect:resetPoints({{x=191.45,y=94},{x=150,y=0},{x=19.45,y=36},{x=19,y=150},{x=131.45,y=194}},5)
	--local rectSpr = fgui.GGraph:create()
	--rectSpr:drawPolygon(1,cc.c4f(1,0,0,1),cc.c4f(1,0,0,1),{{x=191.45,y=94},{x=150,y=0},{x=19.45,y=36},{x=19,y=150},{x=131.45,y=194}},5)
	--self.view:getChildAutoType("n26"):addChild(rectSpr)
	self:setHeroData()
	
	self.closeButton:addClickListener(function()
		self:closeView()
	end)
	self.lbt:addClickListener(function()
			self.heroIndex = self.heroIndex -1
			if self.heroIndex < 1 then
				self.heroIndex = #self.heroList
			end
			print(8848,">>>>>>>>>self.heroIndex 1>>>",self.heroIndex)
			self.heroConfig = DynamicConfigData.t_hero[self.heroList[self.heroIndex].hero]
			if ModelManager.HandbookModel.heroData and ModelManager.HandbookModel.heroData[self.heroConfig.heroId] and not ModelManager.HandbookModel.heroData[self.heroConfig.heroId].firstReward then
				RedManager.updateValue("V_HANDBOOK_NEW_HERO"..self.heroConfig.heroId, true)
			else
				RedManager.updateValue("V_HANDBOOK_NEW_HERO"..self.heroConfig.heroId, false)
			end
			self:setHeroData()
		end)
	self.rbt:addClickListener(function()
			self.heroIndex = self.heroIndex +1
			if self.heroIndex > #self.heroList then
				self.heroIndex = 1
			end
			print(8848,">>>>>>>>>self.heroIndex 2>>>",self.heroIndex)
			self.heroConfig = DynamicConfigData.t_hero[self.heroList[self.heroIndex].hero]
			if ModelManager.HandbookModel.heroData and ModelManager.HandbookModel.heroData[self.heroConfig.heroId] and not ModelManager.HandbookModel.heroData[self.heroConfig.heroId].firstReward then
				RedManager.updateValue("V_HANDBOOK_NEW_HERO"..self.heroConfig.heroId, true)
			else
				RedManager.updateValue("V_HANDBOOK_NEW_HERO"..self.heroConfig.heroId, false)
			end
			self:setHeroData()
		end)
	if not self.heroList or #self.heroList <2 then
		self.rbt:setVisible(false)
		self.lbt:setVisible(false)
	end
	-- 支持卡牌左右滑动切换
	self:initTouchLihui()

	-- 根据策划要求  默认显示满级属性
	self.manjiBt:getController("state"):setSelectedIndex(1)
	self.isManji = true
	self:initRightNode2(self.heroConfig,true)
	self:initRightNode3(self.heroConfig,true)

	self.manjiBt:addClickListener(function()
		self:initMoreLayer()
		if not self.moreLayer:isVisible() then return end
		self.moreLayer:setVisible(true)
		self.view:getTransition("rout"):stop()
		self.moreLayer:getTransition("out"):play(function()
			self.moreLayer:setVisible(false)
		end)
		self.rightNode1:setVisible(true)
		self.rightNode2:setVisible(true)
		self.rightNode3:setVisible(true)
		self.view:getTransition("rin"):play(function()
						
		end)
		self.manjiBt:getController("state"):setSelectedIndex(1)
		self.qidai:getController("state"):setSelectedIndex(0)
	end)

	self.qidai:addClickListener(function()
		if self.moreLayer:isVisible() then return end
		self.moreLayer:setVisible(true)
		self.moreLayer:getTransition("out"):stop()
		self.moreLayer:getTransition("enter"):play(function()
				
		end)
		self.rightNode1:setVisible(true)
		self.rightNode2:setVisible(true)
		self.rightNode3:setVisible(true)
		self.view:getTransition("rout"):play(function()
			self.rightNode1:setVisible(false)
			self.rightNode2:setVisible(false)
			self.rightNode3:setVisible(false)
		end)
		self.qidai:getController("state"):setSelectedIndex(1)
		self.manjiBt:getController("state"):setSelectedIndex(0)
	end,33)

	self.pingjiaBt:addClickListener(function(  )
		RPCReq.HeroTotems_GetHeroEvaluationInfo({heroCode = self.heroConfig.heroId}, function(data)
			if tolua.isnull(self.view) then return end
			ViewManager.open("HeroDiscussView",{disData = data.data})
		end)
	end)

	self.btn_gift:addClickListener(function(  )
		local hcf = HandbookModel.heroData[self.heroConfig.heroId]
		if hcf then
			ViewManager.open("HeroGiftView",{heroId = self.heroConfig.heroId})
		else
			RollTips.show(Desc.handbook_tips5)	
		end
	end)
	

	self.viewIndex = 0
	self.fangdaBt:addClickListener(function(  )
		self.viewIndex = 1
		self.view:getController("view"):setSelectedIndex(self.viewIndex)
	end)

	self.btn_back:addClickListener(function(  )
		self.viewIndex = 0
		if self.view:getController("lhview"):getSelectedIndex() == 1 then
			self.view:getController("lhview"):setSelectedIndex(0)
				
		end
		self.view:getController("view"):setSelectedIndex(self.viewIndex)
	end)

	self.btn_roate:addClickListener(function(  )
		if self.view:getController("lhview"):getSelectedIndex() == 0 then
			self.view:getController("lhview"):setSelectedIndex(1)
		else
			self.view:getController("lhview"):setSelectedIndex(0)
		end
	end)

	self.btn_uniqueWeapon:addClickListener(function(  )
		if self.heroConfig.uniqueWeapon ~= "" and self.heroConfig.uniqueWeapon > 0 then
			ViewManager.open("UniqueWeaponTipsView", {heroId = self.heroConfig.heroId})
		end
	end)
	
	
end

function HeroInfoView:initTouchLihui()
    self.dragArea = self.lhicon.view:getChildAutoType("dragArea")
    self.lhicon.view:setTouchable(true)
    
    self.dragArea:setDraggable(true)
    self.dragArea:addEventListener(FUIEventType.DragStart,function(context)
        self._dragMoveX = 0
        self._dragStartX = self.dragArea:getPosition().x
        self._lastPosX = 0
    end);

    self.dragArea:addEventListener(FUIEventType.DragMove,function(context)
        self._dragMoveX = self.dragArea:getPosition().x
        self._lastPosX = self._dragMoveX
    end);

    self.dragArea:addEventListener(FUIEventType.DragEnd,function(context)
        self._dir = self._dragStartX - self._lastPosX
        self._dragMoveX = 0 
        self.dragArea:setPosition(-276,-224)
    
        if self._dir >= 20 then  -- 右
            self.heroIndex = self.heroIndex +1
			if self.heroIndex > #self.heroList then
				self.heroIndex = 1
			end
			self.heroConfig = DynamicConfigData.t_hero[self.heroList[self.heroIndex].hero]
			self:setHeroData()
        elseif self._dir <= -20 then  -- 左
            self.heroIndex = self.heroIndex -1
			if self.heroIndex < 1 then
				self.heroIndex = #self.heroList
			end
			self.heroConfig = DynamicConfigData.t_hero[self.heroList[self.heroIndex].hero]
			self:setHeroData()
        end
    end);
end

function HeroInfoView:setHeroData()
	self.myId:setText("No."..self.heroConfig.heroNumber)
	--local path,name = PathConfiger.getHeroDraw(self.heroConfig.heroId)
	--local spineNode=SpineMnange.createByPath(path,name)
	self.lhicon:setData(self.heroConfig.heroId,nil,nil,self.heroConfig.fashionId)
	
	self.heroQualityObj:setData(self.heroConfig.quality)
	--if spineNode then
		--self.lhicon:displayObject():removeAllChildren()
		---self.lhicon:displayObject():addChild(spineNode)
		--self.lhicon.spineLH = spineNode
		--spineNode:setPosition(self.lhicon:getWidth()/2,0)
		--spineNode:setScale(0.6)
		--spineNode:setAnimation(0, "animation", false);
		--spineNode:pause()
	--end

	if self.heroConfig.drawer == "" then
		self.view:getChildAutoType("huashi"):setVisible(false)
	else
		self.view:getChildAutoType("huashi"):setVisible(true)
		self.view:getChildAutoType("$huashi"):setText(self.heroConfig.drawer)
	end

	if self.heroConfig.cver == "" then
		self.view:getChildAutoType("shengyou"):setVisible(false)
	else
		self.view:getChildAutoType("shengyou"):setVisible(true)
		self.view:getChildAutoType("$cv"):setText(self.heroConfig.cver)
	end

	--if HandbookModel.heroData[self.heroConfig.heroId] then
		--self.upgradebt:setVisible(true)
	--else
		--self.upgradebt:setVisible(false)
	--end
	
--	self.cardcategory_bg:setURL(PathConfiger.getCardCategoryBg(self.heroConfig.category))
--	self.cardcategory_bg:setAlpha(0.25)
	
		
	local costItem = BindManager.bindCostItem(self.btn_gold)
	costItem:setIconType("item")
	costItem:setNoTips(true)
	local configs = DynamicConfigData.t_HeroTotems[self.heroConfig.category]
	
	for _,v in pairs(configs) do
		if v.hero == self.heroConfig.heroId then
			self.totemConfig = v 
			break
		end
	end
	if self.totemConfig then
		local cost = self.totemConfig.firstGet[1]
		costItem:setData(cost.type, cost.code, cost.amount,true,false,true)
		self.btn_gold:setVisible(ModelManager.HandbookModel.heroData[self.heroConfig.heroId] and (not ModelManager.HandbookModel.heroData[self.heroConfig.heroId].firstReward))
	else
		self.btn_gold:setVisible(false)
	end


	self:initRightNode1()
	self:initRightNode2(self.heroConfig,self.isManji)
	self:initRightNode3(self.heroConfig,self.isManji)

	local img_red = self.btn_gold:getChildAutoType("img_red")
	RedManager.register("V_HANDBOOK_NEW_HERO"..self.heroConfig.heroId, img_red)
	self.btn_gold:removeClickListener(888)
	self.btn_gold:addClickListener(function(  )
		RPCReq.HeroTotems_GetFirstReward({heroCode = self.heroConfig.heroId}, function(data)
			RollTips.show(Desc.handbook_getsuccess)
			ModelManager.HandbookModel.heroData[self.heroConfig.heroId].firstReward = true
			if HandbookModel.firstRedHero[self.heroConfig.heroId] then HandbookModel.firstRedHero[self.heroConfig.heroId] = nil end
			if tolua.isnull(self.btn_gold) then return end
			self.btn_gold:setVisible(false)	
			RedManager.updateValue("V_HANDBOOK_NEW_HERO"..self.heroConfig.heroId, false)
				
		end)
	end,888)

	local icons = PathConfiger.getCardProfessional64(self.heroConfig.professional)
	self.view:getChildAutoType("img_zhiye"):setURL(icons)
	self.view:getChildAutoType("zhiye"):setText(self.heroConfig.protext)
	self.view:getChildAutoType("img_zhongzu"):setURL(PathConfiger.getCardCategory(self.heroConfig.category))
	self.view:getChildAutoType("zhongzu"):setText(Desc["card_category"..self.heroConfig.category])
	
	if self.heroConfig.uniqueWeapon ~= "" and self.heroConfig.uniqueWeapon > 0 then
		self.btn_uniqueWeapon:getController("c1"):setSelectedIndex(0)
		local id = self.heroConfig.uniqueWeapon
		local maxLv = DynamicConfigData.t_UniqueWeaponConfig[id][#DynamicConfigData.t_UniqueWeaponConfig[id]].level
		self.btn_uniqueWeapon:setIcon(PathConfiger.getUniqueWeaponIcon(self.heroConfig.uniqueWeapon, maxLv))
	else
		self.btn_uniqueWeapon:getController("c1"):setSelectedIndex(1)
	end
	
	self:updateLikingLevel()
end
function HeroInfoView:HeroTotems_UpdateLiking(_,data )
	self:updateLikingLevel()
end
function HeroInfoView:updateLikingLevel()
	local info = HandbookModel.heroData[self.heroConfig.heroId]
	if info and info.likingLevel then
		self.view:getChildAutoType("$textnum"):setText(info.likingLevel)
	else
		self.view:getChildAutoType("$textnum"):setText(0)
	end
end
function HeroInfoView:initRightNode1()
	self:initMoreLayer()
	local obj = self.rightNode1
	local cardStar = BindManager.bindCardStar(obj:getChildAutoType("cardStar"))
	cardStar:setData(self.heroConfig.heroStar)
	obj:getChildAutoType("name"):setText(self.heroConfig.heroName)
end

function HeroInfoView:initRightNode2(cf,isManji)
	local data = self.heroList[self.heroIndex]
	local t_heroData = DynamicConfigData.t_hero[data.hero]
	local leve2 = 0
	if isManji then
		local level = 200
		leve2 = 10
		if self.heroConfig.heroStar < 4 then
			 level = 60
			 leve2 = 3
		elseif self.heroConfig.heroStar < 5 then
			level = 100
			leve2 = 5
		end
		cf = HandbookModel:getCardAllAttrInfo(self.heroConfig.heroId,level,leve2)
	end

	local bf = self.combatConfig
	local attrRadar = self.view:getChildAutoType("$rightNode2/attrRadar")
	local rardar = BindManager.bindAttrRadar(attrRadar)
	local strTable = {Desc.common_attrs1,Desc.common_attrs2,Desc.common_attrs5,Desc.common_attrs3,Desc.common_attrs6}

	local attrs = {data.blood * 0.1 , data.patk * 0.1 , data.mdef * 0.1 , data.pdef * 0.1, data.speed * 0.1}
	
	if cf.baseDam < cf.baseMagdam then
		strTable[2] = Desc.common_attrs4
		attrs[2] = data.matk * 0.1
	end
	rardar:setAttrNames(strTable)
	rardar:setAttrs(attrs)
	local valueTable = {t_heroData.kHp,t_heroData.kDam,t_heroData.kMagdef,t_heroData.kDef,t_heroData.kSpeed}
	
	if t_heroData.attType == 2 then
		valueTable[2] = t_heroData.kMagdam
	end
	local eff = 280 * 6
	if t_heroData.heroStar == 3 then
		eff = 60 * 1
	elseif t_heroData.heroStar == 4 then
		eff = 100 * 2
	elseif t_heroData.heroStar == 5 then
		if next(t_heroData.skill4) then
			eff = 280 * 6
		else
			eff = 160 * 3
		end
	end
	for k,v in pairs(valueTable) do
		valueTable[k] = math.ceil(v * eff)
	end
	rardar:setAttrVal(valueTable)
	
	local txt_step = self.view:getChildAutoType("$rightNode2/txt_step")
	txt_step:setText(leve2)
	
	local zhanli = HeroConfiger.CaleAttrPower(cf)
	self.rightNode2.zhanlitext:setText(zhanli)
end

function HeroInfoView:initRightNode3(heroConfig,isManji)
	local ultSkill ={heroConfig.skill1[1],heroConfig.skill2[1],heroConfig.skill3[1],heroConfig.skill4[1]}
	if isManji then
		ultSkill ={heroConfig.skill1[#heroConfig.skill1],heroConfig.skill2[#heroConfig.skill2],
				   heroConfig.skill3[#heroConfig.skill3],heroConfig.skill4[#heroConfig.skill4]}
	end

	printTable(33,"ultSkill = ",ultSkill)
	self.rightNode3.skilllist:setItemRenderer(function(index,obj)
		local skillCell = BindManager.bindSkillCell(obj)
		skillCell:setData(ultSkill[index+1])
		obj:addClickListener(
			function(context)
				--点击查看技能详情
				local skillInfo = false
				skillInfo = DynamicConfigData.t_skill[ultSkill[index + 1]]
				if skillInfo then

					ViewManager.open("ItemTips", {codeType = CodeType.SKILL, id = ultSkill[index + 1], heroId = heroConfig.heroId})
				end
			end,
			100
		)
	end)

	self.rightNode3.skilllist:setNumItems(#ultSkill)
end

function HeroInfoView:initMoreLayer()
	self.moreLayer.leftList:setItemRenderer(function(index,obj)
		self["initMoreLayer"..(index+1)](self,index,obj)
	end)

	self.moreLayer.leftList:setNumItems(2)
end
function HeroInfoView:initMoreLayer1(index,obj)
	obj:getChild("title"):setText(Desc.handbook_heroInfo)
	if self.totemConfig then
		obj:getChild("text"):setText(self.totemConfig.info)
		--obj:getChild("text"):setText(Desc.handbook_heroInfo)
	end
end
function HeroInfoView:initMoreLayer2(index,obj)
	obj:getChild("title"):setText(Desc.handbook_heroStory)
	if self.totemConfig then
		obj:getChild("text"):setText(self.totemConfig.story)
		--obj:getChild("text"):setText(Desc.handbook_heroStory)
	end
end
function HeroInfoView:initMoreLayer3(index,obj)
	
end
function HeroInfoView:initMoreLayer4(index,obj)
	--obj:getChildAutoType("backBt"):addClickListener(function(  )
		--self.moreLayer:getTransition("out"):play(function()
			--self.moreLayer:setVisible(false)
		--end);
	--end,33)
	
	
end

return HeroInfoView