--Name : HandbookTitleView.lua
--Author : generated by FairyGUI
--Date : 2020-5-28
--Desc : 
local RankView = require "Game.Modules.Rank.RankView"
local HandbookTitleView,Super = class("HandbookTitleView",RankView)

function HandbookTitleView:ctor()
	--LuaLog("HandbookTitleView ctor")
	self._packName = "Handbook"
	self._compName = "HandbookTitleView"
	self._rootDepth = LayerDepth.Window
	self._openType = GameDef.RankType.HeroTotemsTitle
	self.btn_upgrade = false
	self.btn_collect = false
	self.btn_help = false
	self.myRankItem = false
	
	
	self.progressBar = false

	self._maxLevel = 10
	self._nextInfo = false
end

function HandbookTitleView:_initUI(...)
	Super._initUI(self, ... )
	
	self:setBg("handbook_title.jpg")
	local btn_weekReward = self.view:getChildAutoType("btn_weekReward")
	self.btn_upgrade = self.view:getChildAutoType("btn_upgrade")
	self.btn_collect = self.view:getChildAutoType("btn_collect")
	self.btn_help = self.view:getChildAutoType("btn_help")
	self.progressBar = self.view:getChildAutoType("progressBar")
	self.myRankItem = self.view:getChildAutoType("myRankItem")
	
	RedManager.register("V_HANDBOOK_WEEKREWARD", btn_weekReward:getChildAutoType("img_red"))
	RedManager.register("V_HANDBOOK_UPGRADE", self.btn_upgrade:getChildAutoType("img_red"))
	
	btn_weekReward:addClickListener(function(context)
			if ModelManager.HandbookModel.title < 6 then
				RollTips.show(string.format(Desc.handbook_weekRewardHint, 6))
				return
			end
			
			if not ModelManager.HandbookModel.canGetWeekReward  then
				RollTips.show(string.format(Desc.handbook_weekRewardHint2))
				return
			end
			
				local params = {}
				params.onSuccess = function (res )
					--printTable(1,res)
					ModelManager.HandbookModel.weekRewardFlag = res.ret
					ModelManager.HandbookModel:updateWeekReward(res.ret)
				end
				RPCReq.HeroTotems_ReceiveTitleWeekReward(params, params.onSuccess)
			end)
			
	self.btn_upgrade:addClickListener(function(context)
				local openId = ModelManager.HandbookModel.title
				local configInfos = DynamicConfigData.t_HeroTotemsTitleLevel[openId + 1]
				if not configInfos then
					RollTips.show(Desc.handbook_maxLevel)
					return
				end
				--if ModelManager.PlayerModel:isCostEnough({{code = 10000035, amount = 1000000, type=3}}, true) then
					local params = {}
					params.onSuccess = function (res )
						--printTable(1,res)
						ModelManager.HandbookModel.title = res.title
						ModelManager.HandbookModel:titleUpgradeRedCheck()
						ModelManager.HandbookModel:updateWeekReward()
						Dispatcher.dispatchEvent(EventType.handbook_titleChange)
						Dispatcher.dispatchEvent(EventType.handbook_pointChange)
					end
					
					RPCReq.HeroTotems_UpdateTitle(params, params.onSuccess)
				--end
			end)
			
	self.btn_collect:addClickListener(function(context)
			--点数不足，弹出道具不足窗口，10000035是用来配置来源的道具
			if ModelManager.PlayerModel:isCostEnough({{code = 10000035, amount = 1000000, type=3}}, true) then
				
			end
			--ViewManager.open("HandbookTitleInfoView", self._nextInfo)
		end)
		
	self.btn_help:addClickListener(function(context)
			RollTips.showHelp("", Desc.help_heroTitle)
		end)
		
	self:updateStatus()
end

function HandbookTitleView:_initEvent( )
	
end

function HandbookTitleView:setWinTtile(title)
	
end


function HandbookTitleView:updateMyRankItem(myRank, myInfo, isCamp)
	local iconLoader = self.myRankItem:getChildAutoType("iconLoader")
	local txt_attr2 = self.myRankItem:getChildAutoType("txt_attr2")
	local txt_attr1 = self.myRankItem:getChildAutoType("txt_attr1")
	local txt_rank = self.myRankItem:getChildAutoType("txt_rank")
	local txt_title = self.myRankItem:getChildAutoType("txt_title")
	local c1 = self.myRankItem:getController("c1")
	iconLoader:setURL(PathConfiger.getHeroTitle(ModelManager.HandbookModel.title))
	txt_attr2:setText(ModelManager.PlayerModel.username)
	txt_attr1:setText(ModelManager.HandbookModel.point)
	txt_rank:setText(myRank)
	
	local info = DynamicConfigData.t_HeroTotemsTitleLevel[ModelManager.HandbookModel.title]
	if info then
		txt_title:setText(info.name)
	end
	
	c1:setSelectedIndex(myRank==0 and 0 or 2)
end

--这个方法给特殊排行榜继承后加需要特殊处理的内容
function HandbookTitleView:updateItemSpec(obj, rank, info, isMine)
	local iconLoader = obj:getChildAutoType("iconLoader")
	local txt_playerName = obj:getChildAutoType("txt_playerName")
	local txt_title = obj:getChildAutoType("txt_title")
	iconLoader:setURL(PathConfiger.getHeroTitle(info.exParam.param1))
	
	local config = DynamicConfigData.t_HeroTotemsTitleLevel[info.exParam.param1]
	if config then
		txt_title:setText(config.name)
	end
	txt_playerName:setText(info.name)
end

function HandbookTitleView:updateStatus( )
	self:updateItems()
	local openId = ModelManager.HandbookModel.title
	local configInfos = DynamicConfigData.t_HeroTotemsTitleLevel[openId + 1]
	if configInfos then
		self.progressBar:setMax(configInfos.needPoint)
		self.progressBar:setValue(ModelManager.HandbookModel.point)
		local canUpgrade = ModelManager.HandbookModel.point >= configInfos.needPoint
		self.btn_upgrade:setVisible(canUpgrade)
		self.btn_collect:setVisible(not canUpgrade)
	else
		configInfos = DynamicConfigData.t_HeroTotemsTitleLevel[openId]
		self.progressBar:setMax(configInfos.needPoint)
		self.progressBar:setValue(ModelManager.HandbookModel.point)
		self.progressBar:getChild("title"):setText(ModelManager.HandbookModel.point)
		local canUpgrade = false
		self.btn_upgrade:setVisible(canUpgrade)
		self.btn_collect:setVisible(not canUpgrade)
	end
end


function HandbookTitleView:updateItems()
	local configInfos = DynamicConfigData.t_HeroTotemsTitleLevel
	for i = 1,self._maxLevel,1 do
		local titleItem = self.view:getChildAutoType("titleItem"..i)
		local txt_lv = titleItem:getChildAutoType("txt_lv")
		local txt_name = titleItem:getChildAutoType("txt_name")
		local txt_desc = titleItem:getChildAutoType("txt_desc")
		local activeCtrl = titleItem:getController("activeCtrl")
		local iconLoader = titleItem:getChildAutoType("iconLoader")
		local pgBar = titleItem:getChildAutoType("pgBar")
		local nextBar = self.view:getChildAutoType("pgBar"..i)
		pgBar:setMax(100)
		
		
		local openId = ModelManager.HandbookModel.title
		
		
		local info
		for id = #configInfos,1,-1 do
			if configInfos[id].level == i then
				if configInfos[id].id <= openId or configInfos[id].index == 1 then
					info = configInfos[id]
					break
				end
			end
		end
		local isActive = info.id <= openId
		activeCtrl:setSelectedIndex(info.id <= openId and 0 or 1)
		iconLoader:setGrayed(not isActive)
		
		iconLoader:setURL(PathConfiger.getHeroTitle(info.id))
		txt_name:setText(info.name)
		txt_desc:setText(info.dec)
		txt_lv:setText(info.lvShow)
		txt_lv:setVisible(info.id == openId)
		pgBar:setValue(info.id <= openId and 100 or 0)
		if nextBar then
			nextBar:setMax(100)
			nextBar:setVisible(isActive)
			nextBar:setValue(info.id == openId and 50 or 100)
		end
		
		titleItem:removeClickListener()--池子里面原来的事件注销掉
		if i > 1 then
			titleItem:addClickListener(function(context)
				ViewManager.open("HandbookTitleInfoView", info)
				end)
		end
	end
end

function HandbookTitleView:handbook_titleChange()
	self:updateStatus()
end

function HandbookTitleView:handbook_pointChange()
	self:updateStatus()
end


return HandbookTitleView