--Date :2021-01-04
--Author : generated by FairyGUI
--Desc : 

local HeroDormitoryView,Super = class("HeroDormitoryView", Window)

function HeroDormitoryView:ctor()
	--LuaLog("HeroDormitoryView ctor")
	self._packName = "Handbook"
	self._compName = "HeroDormitoryView"
	--self._rootDepth = LayerDepth.Window
	self._isShowingMsg1 = false
	self._isShowingMsg2 = false
	self.soundId = 0
	self._showMsgTimer1 = false
	self._showMsgTimer2 = false
	self._showMsgTime = {3,5,8}
	self.heroId = {}
end

function HeroDormitoryView:_initEvent( )
	
end

function HeroDormitoryView:_initVM( )
	local viewNode = self.view
	---Do not modify following code--------
	--{autoFields}:Handbook.HeroDormitoryView
	self.attrList = viewNode:getChildAutoType('attrList')
	self.btn_help = viewNode:getChildAutoType('btn_help')--GButton
	self.progressBar = viewNode:getChildAutoType('progressBar')--GProgressBar
	self.textnum = viewNode:getChildAutoType('$textnum')--GTextField
	self.btn_hero1 = viewNode:getChildAutoType('btn_hero1')--GButton
	self.btn_hero2 = viewNode:getChildAutoType('btn_hero2')--GButton
	self.btn_interact = viewNode:getChildAutoType('btn_interact')--GButton
	self.frame = viewNode:getChildAutoType('frame')--GLabel
	self.leftNum = viewNode:getChildAutoType('txt_leftNum')--GTextField
	self.playerIcon1 = viewNode:getChildAutoType('playerIcon1')
	self.playerIcon1 = self.playerIcon1:displayObject()
	self.playerIcon2 = viewNode:getChildAutoType('playerIcon2')
	self.playerIcon2 = self.playerIcon2:displayObject()
	self.showMsg1 = viewNode:getChildAutoType('showMsg1')
	-- self.showMsg1:setVisible(false)
	self.txt_msg1 = viewNode:getChildAutoType('txt_msg1')
	self.showMsg2 = viewNode:getChildAutoType('showMsg2')
	-- self.showMsg2:setVisible(false)
	self.txt_msg2 = viewNode:getChildAutoType('txt_msg2')
	self.txt_help = viewNode:getChildAutoType('txt_help')
	self.mask = viewNode:getChildAutoType('mask')
	self.helpTips = viewNode:getChildAutoType('helpTips')
	--{autoFieldsEnd}:Handbook.HeroDormitoryView
	--Do not modify above code-------------
end

function HeroDormitoryView:_initEvent( )
	self.btn_help:addClickListener(function()
		self.helpTips:setVisible(true)
	end)

	self.mask:addClickListener(function()
		self.helpTips:setVisible(false)
	end)

	self.btn_interact:addClickListener(function()
		ViewManager.open("HeroGiftView", {heroId = ModelManager.HandbookModel.heroOpertion})
	end)

	self.btn_hero1:addClickListener(function()
		self:showMsgTxt1(self.heroId[1])
	end)

	self.btn_hero2:addClickListener(function()
		self:showMsgTxt2(self.heroId[2])
	end)
end

function HeroDormitoryView:_initUI( )
	self:_initVM()
   	self:setBg("bg_heroDormitory.jpg")
	self.heroId = DynamicConfigData.t_HeroInteractionConfig[1].heroID
	self:setPlayerIcon()
	self:setAllGoodwiil()
	RedManager.register("M_HERO_DORMITORY", self.view:getChildAutoType('btn_interact/img_red'))
end

function HeroDormitoryView:setAllGoodwiil()
	--等级
	self.textnum:setText(ModelManager.HandbookModel.allGoodwiilLevel)
	--进度条
	local nextInfo = DynamicConfigData.t_HeroTotemsSumHeroFavor[ModelManager.HandbookModel.allGoodwiilLevel + 1]
	if not nextInfo then 
		nextInfo = DynamicConfigData.t_HeroTotemsSumHeroFavor[ModelManager.HandbookModel.allGoodwiilLevel]
	end

	local maxNum = nextInfo.needFavor
	local num = ModelManager.HandbookModel.allGoodwiilExp
	self.progressBar:setMax(maxNum)
	self.progressBar:setValue(num)
	local proTitle = self.progressBar:getChildAutoType("title")
 	proTitle:setText(string.format("%s/%s",StringUtil.transValue(num),StringUtil.transValue(maxNum)))
	--属性
	local info = DynamicConfigData.t_HeroTotemsSumHeroFavor[ModelManager.HandbookModel.allGoodwiilLevel]
	local attr = info.attr
	self.attrList:setItemRenderer(
		function(index, obj)
			local id = index + 1
       		local data  = attr[id]
	 		local attrName =  Desc["common_fightAttr"..data.attrType]
	 		local attrValue = data.attrValue
       		obj:getChildAutoType("attrName"):setText(attrName)
	 		obj:getChildAutoType("attrValue"):setText(attrValue)
		end
	)
	self.attrList:setNumItems(#attr)
	--剩余次数
	self.leftNum:setText(string.format(Desc.HeroDormitory_leftNum,HandbookModel:getResidueNum()))
end

function HeroDormitoryView:setPlayerIcon()
	local skeletonNode = SpineMnange.createSprineById(self.heroId[1])
	skeletonNode:setAnimation(0, "stand", true)
	self.playerIcon1:removeAllChildren()
	self.playerIcon1:addChild(skeletonNode)

	local skeletonNode = SpineMnange.createSprineById(self.heroId[2])
	skeletonNode:setAnimation(0, "stand", true)
	self.playerIcon2:removeAllChildren()
	self.playerIcon2:addChild(skeletonNode)
end

function HeroDormitoryView:showMsgTxt1(heroId)
	if self._isShowingMsg1  then return end
	local random = math.floor(math.random() * 3) + 1
	local time = self._showMsgTime[random]
	local info = DynamicConfigData.t_hero[heroId]
	if not info then return end
	local msg = info["tip"..random]
	--播放立绘的音效
	if self.soundId then
		SoundManager.stopSound(self.soundId)
	end
	if info.sound and #info.sound>0 then
		if info.sound[random] then
			self.soundId = SoundManager.playHeroSound(info.sound[random],false)
		end
	end
	self.showMsg1:setVisible(true)
	self.txt_msg1:setText(msg)
	self._isShowingMsg1 = true
	if self._showMsgTimer1 then Scheduler.unschedule(self._showMsgTimer1) end
	self._showMsgTimer1  = Scheduler.schedule(function()
		if tolua.isnull(self.showMsg1) then return end
		self._isShowingMsg1 = false
		self.showMsg1:setVisible(false)
	end,time)
end

function HeroDormitoryView:showMsgTxt2(heroId)
	if self._isShowingMsg2  then return end
	local random = math.floor(math.random() * 3) + 1
	local time = self._showMsgTime[random]
	local info = DynamicConfigData.t_hero[heroId]
	if not info then return end
	local msg = info["tip"..random]
	--播放立绘的音效
	if self.soundId then
		SoundManager.stopSound(self.soundId)
	end
	if info.sound and #info.sound>0 then
		if info.sound[random] then
			self.soundId = SoundManager.playHeroSound(info.sound[random],false)
		end
	end
	self.showMsg2:setVisible(true)
	self.txt_msg2:setText(msg)
	self._isShowingMsg2 = true
	self._showMsgTimer2  = Scheduler.schedule(function()
		if tolua.isnull(self.showMsg2) then return end
		self._isShowingMsg2 = false
		self.showMsg2:setVisible(false)
	end,time)
end

function HeroDormitoryView:HeroDormitoryView_Num()
	self.leftNum:setText(string.format(Desc.HeroDormitory_leftNum,HandbookModel:getResidueNum()))
end

function HeroDormitoryView:HeroDormitoryView_UpdateLiking()
	self:setAllGoodwiil()
end

function HeroDormitoryView:_onExit()
	if self._showMsgTimer1 then Scheduler.unschedule(self._showMsgTimer1) end
	if self._showMsgTimer2 then Scheduler.unschedule(self._showMsgTimer2) end
end

return HeroDormitoryView