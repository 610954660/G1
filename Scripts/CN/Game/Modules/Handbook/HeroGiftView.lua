--Name : HeroGiftView.lua
--Author : generated by FairyGUI
--Date : 2020-6-2
--Desc : 

local HeroGiftView,Super = class("HeroGiftView", Window)
local TimeLib = require "Game.Utils.TimeLib"
function HeroGiftView:ctor()
	--LuaLog("HeroGiftView ctor")
	self._packName = "Handbook"
	self._compName = "HeroGiftView"
	self._rootDepth = LayerDepth.Window
	self.__reloadPacket = true
	self.longTouchTag1 = false
	self._showHeroList = {}
	self.frameList = {}
	self.selectIndex = 0
	self.tempLevel = 0
	self.animationing = false
	self.selectTabIndex = 0
	self.timerKey = false
	self.isCloseTab = true
end

function HeroGiftView:_initVM( )
	local viewNode = self.view
	local lhicon = viewNode:getChildAutoType("$lhicon")
	self.tabCtr = viewNode:getController('tabCtr')
	self.lhicon = BindManager.bindLihuiDisplay(lhicon)
	self.closeButton = viewNode:getChildAutoType("closeBut")
	self.btn_help = viewNode:getChildAutoType("btn_help")
	self.heroList = viewNode:getChildAutoType("heroList")
	self.bg = viewNode:getChildAutoType("bg")
	self.btn_arrow = viewNode:getChildAutoType("btn_arrow")
	self.heroListBg = viewNode:getChildAutoType("heroListBg")
	self.arrow = viewNode:getChildAutoType("btn_arrow/arrow")
	self.closeMask = viewNode:getChildAutoType("closeMask")
	self.closeMask:setVisible(false)
	--btnTab
	self.btn_gift = viewNode:getChildAutoType("btn_gift")
	self.btn_interact = viewNode:getChildAutoType("btn_interact")
	self.btn_memoirist = viewNode:getChildAutoType("btn_memoirist")
	--giftPanel 
	self.giftPanel = viewNode:getChildAutoType("giftPanel")
	self.closePanel = viewNode:getChildAutoType("closePanel")
	self.dslider = viewNode:getChildAutoType("$dslider")
	self.btn_add = viewNode:getChildAutoType("$btn_add")
	self.btn_back = viewNode:getChildAutoType("$btn_back")
	self.btn_send = viewNode:getChildAutoType("btn_send")
	self.giftPanelBg = viewNode:getChildAutoType("giftPanelBg")
	--titlePanel
	self.name = viewNode:getChildAutoType("$name")
	self.progressBar = viewNode:getChildAutoType("$progressBar")
	self.textnum = viewNode:getChildAutoType("$textnum")
	--attrPanel
	local lvitem = viewNode:getChildAutoType("$lvitem")
	self.lvitem = lvitem
	lvitem.list_add = viewNode:getChildAutoType("$lvitem/$list_add")
	--giftRightPanel
	self.giftList = viewNode:getChildAutoType("$giftList")
	--interactRightPanel
	self.memoiristList = viewNode:getChildAutoType("memoiristList")
	self.noMemoirist = viewNode:getChildAutoType("noMemoirist")
	self.txt_num = viewNode:getChildAutoType("txt_num")
	self.txt_decs = viewNode:getChildAutoType("txt_decs")
	self.btn_talk = viewNode:getChildAutoType("btn_talk")
	self.btn_play = viewNode:getChildAutoType("btn_play")
end

function HeroGiftView:_initUI( )
	self:_initVM()
	self.spine = self.view:getChildAutoType("spine")
	self.giftSpine = SpineUtil.createSpineObj(self.spine, {x = 0, y=0},"ui_hangandu_1", "Spine/ui/heroGift", "efx_haogandu", "efx_haogandu",true,true)
	self.giftSpine:setVisible(false)
	self.spine1 = self.view:getChildAutoType("spine1")
	self.giftSpineLevelUp = SpineUtil.createSpineObj(self.spine1, {x = 0, y=0},"ui_hangandu_1", "Spine/ui/heroGift", "efx_haogandu", "efx_haogandu",true,true)
	self.giftSpineLevelUp:setVisible(false)
	self.bg:setIcon(PathConfiger.getBg("bg_heroDormitory1.jpg"))
	self:moveTitleToTop()
	self:setHeroList()
	self:initDataUI()
end

function HeroGiftView:_initEvent( )
	self.closeButton:addClickListener(function()
		self:closeView()
	end)

	self.giftPanelBg:addClickListener(function()
		self.giftPanel:setVisible(false)
	end)

	self.btn_help:removeClickListener()
	self.btn_help:addClickListener(function()
		local info={}
	    info['title']=Desc["heroGiftTitle"]
	    info['desc']=Desc["heroGiftDesc"]
	    ViewManager.open("GetPublicHelpView",info) 
	end)

	self.btn_play:addClickListener(function()
		local data = HandbookModel.heroData[self._args.heroId]
		local zeroTime = math.floor(TimeLib.GetDateStamp(ServerTimeModel:getServerTime()*1000)/1000)
		if (data and data.quesCount and zeroTime == data.quesCount) or (HandbookModel:getResidueNum() == 0) then 
			RollTips.show(Desc.HeroDormitory_str7)
		else
			ViewManager.open("DormStartView",{heroId = self._args.heroId})
		end
	end)

	self.btn_talk:addClickListener(function()
		local heroData = {}
		heroData.heroId = self._args.heroId
		for _,data in pairs(DynamicConfigData.t_HeroTotems) do
			for _,v in pairs(data) do
				if v.hero == self._args.heroId then 
					heroData.heroTall = v.heroTall
					break
				end
			end
		end
		ViewManager.open("DormChatView", {heroData = heroData})
	end)

	self.btn_gift:addClickListener(function()
		self.selectTabIndex = 0
		self:setRightPanel()
	end)
	self.btn_interact:addClickListener(function()
		self.selectTabIndex = 1
		self:setRightPanel()
	end)
	self.btn_memoirist:addClickListener(function()
		self.selectTabIndex = 2
		self:setRightPanel()
	end)
	self.btn_arrow:addClickListener(function()
		self.isCloseTab = not self.isCloseTab
		if self.isCloseTab then 
			self.heroListBg:setSize(150,610)
			self.heroList:setSize(175,715)
			self.btn_arrow:setPosition(188,329)
			self.arrow:setRotation(180)
			self.closeMask:setVisible(false)
		else
			self.heroListBg:setSize(405,610)
			self.heroList:setSize(475,715)
			self.btn_arrow:setPosition(442,329)
			self.arrow:setRotation(0)
			self.closeMask:setVisible(true)
		end
		self.heroList:setNumItems(#self._showHeroList)
	end)
	self.closeMask:addClickListener(function ()
		self.isCloseTab = true
		self.heroListBg:setSize(150,610)
		self.heroList:setSize(175,715)
		self.btn_arrow:setPosition(188,329)
		self.arrow:setRotation(180)
		self.closeMask:setVisible(false)
	end)
end

function HeroGiftView:setRightPanel()
	self.tabCtr:setSelectedIndex(self.selectTabIndex)
	if self.selectTabIndex == 0 then
		self:setGiftRightPanel()
	elseif self.selectTabIndex == 1 then 
		self:setInteractRightPanel()
	elseif self.selectTabIndex == 2 then 
		self:setMemoiristRightPanel()
	end
end

function HeroGiftView:getInteractRedDot(heroId)
	local heroData = HandbookModel.heroData[heroId]
	local zeroTime = math.floor(TimeLib.GetDateStamp(ServerTimeModel:getServerTime()*1000)/1000)
	local interactRedDot = (heroData and heroData.quesCount and zeroTime == heroData.quesCount) or (HandbookModel:getResidueNum() == 0)
	return not interactRedDot
end

function HeroGiftView:getMemoiristRedDot(heroId)
	local HeroMemoiristList = {}
	local data = json.decode(FileCacheManager.getStringForKey("Memoirist_List", "", nil, true))
	for _,v in ipairs(data) do
		local heroID = DynamicConfigData.t_HeroStory[v.tipID].heroID
		if heroID == heroId then 
			if v.showRed then 
				return true
			end
		end
	end
	return false
end

function HeroGiftView:setMemoiristBtnRed(heroId)
	local memoiristRedDot = self:getMemoiristRedDot(heroId)
	self.view:getChildAutoType('btn_memoirist/img_red'):setVisible(memoiristRedDot)
end

function HeroGiftView:setInteractBtnRed(heroId)
	local interactRedDot = self:getInteractRedDot(heroId)
	self.view:getChildAutoType('btn_interact/img_red'):setVisible(interactRedDot)
end

function HeroGiftView:setHeroList( )
	self.heroList:setItemRenderer(function(index, obj)
		local data = self._showHeroList[index + 1]
		local img_frame = obj:getChildAutoType("img_frame")
		img_frame:setURL(PathConfiger.getHeroFrame(data.star))
		obj:getChildAutoType("img_icon"):setURL(PathConfiger.getHeroOfMonsterIcon(data.heroId))--放了卡牌头像
		local cardStar = BindManager.bindCardStar(obj:getChildAutoType("cardStar"))
		cardStar:setData(data.star)
		obj:getChildAutoType("img_category"):setURL(PathConfiger.getCardCategory(data.category))
		obj:getController("select"):setSelectedIndex(self._args.heroId == data.heroId and 1 or 0)
		local heroData = HandbookModel.heroData[data.heroId]
		if heroData then
			obj:getChildAutoType("$textnum"):setText(heroData.likingLevel)
		end
		img_frame:addClickListener(function()
			self.selectIndex = index + 1
			for key,value in pairs(self.frameList) do
				value:getController("select"):setSelectedIndex(0)
			end
			obj:getController("select"):setSelectedIndex(1)
			self._args.heroId = data.heroId
			self:initDataUI()
		end,99)
		if self._args.heroId == data.heroId then
			self.heroList:scrollToView(index,false,false)
			self.selectIndex = index + 1
		end
		table.insert(self.frameList,obj)
		local interactRedDot = self:getInteractRedDot(data.heroId)
		local memoiristRedDot = self:getMemoiristRedDot(data.heroId)
		if memoiristRedDot then 
			obj:getController("redState"):setSelectedIndex(2)
		elseif interactRedDot then 
			obj:getController("redState"):setSelectedIndex(1)
		else
			obj:getController("redState"):setSelectedIndex(0)
		end
	end)
	local CardList = ModelManager.CardLibModel:getAllCards()
	for key,value in pairs(CardList) do
		local state = true
		for k,v in pairs(self._showHeroList) do
			if v.heroId == value.heroId and state then
				state = false
			end
		end
		if state then
			local info = {heroId = value.heroId, star = value.star, category = value.heroDataConfiger.category}
			table.insert(self._showHeroList, info)
		end
	end
	self.heroList:setData(self._showHeroList)
end

function HeroGiftView:setGiftRightPanel()
	self.giftList:setVirtual()
	self.giftList:setItemRenderer(function(index,obj)
		local info = self:getGiftCell()[index+1].data
		local ItemCell = BindManager.bindItemCell(obj:getChildAutoType("itemCell"))
		ItemCell:setIsBig(true)
		ItemCell:setData(info.__data.code, info.__data.amount, info.__data.type);
		ItemCell:setClickable(false)
		ItemCell.view:addClickListener(function(context)
			self:showGiftPanel(self:getGiftCell()[index+1])
		end,99)
		if self:getGiftCell()[index+1].likeState then
			obj:getChildAutoType("xin2"):setVisible(false)
			obj:getChildAutoType("xin1"):setVisible(true)
			obj:getChildAutoType("n36"):setText(self:getGiftCell()[index+1].giftPoint)
		elseif self:getGiftCell()[index+1].hateState then
			obj:getChildAutoType("xin1"):setVisible(false)
			obj:getChildAutoType("xin2"):setVisible(true)
			obj:getChildAutoType("n34"):setText(self:getGiftCell()[index+1].giftPoint)
		else
			obj:getChildAutoType("xin2"):setVisible(false)
			obj:getChildAutoType("xin1"):setVisible(true)
			obj:getChildAutoType("n36"):setText(self:getGiftCell()[index+1].giftPoint)
		end
	end)
	local giftData = self:getGiftCell()
	self.giftList:setNumItems(#giftData)
end

function HeroGiftView:setInteractRightPanel()
	self.txt_num:setText(string.format(Desc.HeroDormitory_leftNum1,HandbookModel:getResidueNum()))
	self.txt_decs:setText(Desc.HeroDormitory_str6)
	local zeroTime = math.floor(TimeLib.GetDateStamp(ServerTimeModel:getServerTime()*1000)/1000)
	local data = HandbookModel.heroData[self._args.heroId]
	if (data and data.quesCount and zeroTime == data.quesCount) or (HandbookModel:getResidueNum() == 0) then 
		self.btn_play:setGrayed(true)
		self.view:getChildAutoType("btn_play/title"):setAlpha(0.7)
	else
		self.btn_play:setGrayed(false)
		self.view:getChildAutoType("btn_play/title"):setAlpha(1)
	end
end

function HeroGiftView:setMemoiristRightPanel()
	local heroStory 
	for _,data in pairs(DynamicConfigData.t_HeroTotems) do
		for _,v in pairs(data) do
			if v.hero == self._args.heroId then 
				heroStory = v.heroStory
				break
			end
		end
	end
	if not heroStory or heroStory == "" then 
		self.noMemoirist:setVisible(true)
		self.memoiristList:setVisible(false)
		return 
	end 
	local memoiristListData = {}
	local HeroMemoiristList = {}
	local data = json.decode(FileCacheManager.getStringForKey("Memoirist_List", "", nil, true))
	for _,v in ipairs(data) do
		HeroMemoiristList[v.tipID] = v.showRed
	end
	local level = HandbookModel.heroData[self._args.heroId] and HandbookModel.heroData[self._args.heroId].likingLevel or 0
	for _,v in ipairs(heroStory) do
		local heroStoryInfo = DynamicConfigData.t_HeroStory[v]
		if heroStoryInfo then 
			table.insert(memoiristListData,heroStoryInfo)
		end
	end
	if TableUtil.isEmpty(memoiristListData) then
		self.noMemoirist:setVisible(true)
		self.memoiristList:setVisible(false)
		return
	end
	self.noMemoirist:setVisible(false)
	self.memoiristList:setVisible(true)
    self.memoiristList:setItemRenderer(
        function(index, obj)
            obj:removeClickListener(6)
            local id = index+1
        	local data = memoiristListData[id]
        	local showCtr = obj:getController("showCtr")
            local title = obj:getChildAutoType("title")
            local content = obj:getChildAutoType("content")
            local lockText = obj:getChildAutoType("lockText")
            local img_red = obj:getChildAutoType("img_red")
            local lock = obj:getChildAutoType("lock")
            local x1 = lock:getWidth() / 2
		    local y1 = lock:getHeight() / 2
		    lock:displayObject():removeAllChildren()
		  	SpineUtil.createSpineObj(lock, cc.p(x1, y1), "guan", "Effect/UI", "efx_juesuo", "efx_juesuo", true)
            img_red:setVisible(false)
        	if data.unlock == 0 or (level >= data.unlock and not HeroMemoiristList[data.tipID]) then --已开启
        		showCtr:setSelectedIndex(0)
        		title:setText(string.format(Desc.HeroDormitory_str1,id))
        		content:setText(data.dec)
        	elseif (level >= data.unlock) and HeroMemoiristList[data.tipID] then --未解锁
        		showCtr:setSelectedIndex(1)
        		img_red:setVisible(true)
        		content:setText("")
        		content:setSize(373,29)
        		lockText:setText(string.format(Desc.HeroDormitory_str2,id))
        		obj:addClickListener(
                function()
                    HeroMemoiristList[data.tipID] = false
                    local info = {}
					for k,v in pairs(HeroMemoiristList) do
						table.insert(info,{tipID = k, showRed = v})
					end
                    FileCacheManager.setStringForKey("Memoirist_List",json.encode(info),nil,true)
					self.heroList:setNumItems(#self._showHeroList)
	                HandbookModel:checkMemoiristRed()
	                self:setMemoiristBtnRed(data.heroID)
                    self.timerKey = Scheduler.schedule(function()
                    	self.memoiristList:setNumItems(#memoiristListData)
				    end,0.5,1)
                	SpineUtil.createSpineObj(lock, cc.p(x1, y1), "kai", "Effect/UI", "efx_juesuo", "efx_juesuo", false)
                end,
                6)
        	else --未开启
        		showCtr:setSelectedIndex(1)
        		content:setText("")
        		content:setSize(373,29)
        		lockText:setText(string.format(Desc.HeroDormitory_str3,data.unlock))
        	end
        end
    )
    self.memoiristList:setData(memoiristListData)
end

function HeroGiftView:initDataUI()
	self.heroConfig = DynamicConfigData.t_hero[self._args.heroId]
	if not self.heroConfig then return end
	self.name:setText(self.heroConfig.heroName)
	self.lhicon:setData(self._args.heroId,nil,nil,self._args.fashionId)
	local hcf = HandbookModel.heroData[self._args.heroId]
	if hcf then
		local curNeed = DynamicConfigData.t_HeroTotemsHeroFavor[hcf.likingLevel]
		local nextNeed = DynamicConfigData.t_HeroTotemsHeroFavor[hcf.likingLevel+1]
		local curNeedFavor = curNeed and curNeed.needFavor or 0
		if not nextNeed then
			nextNeed = DynamicConfigData.t_HeroTotemsHeroFavor[hcf.likingLevel]
		end
		local curFavor = hcf.likingExp
		if curFavor > nextNeed.needFavor then
			curFavor = nextNeed.needFavor
		end
		self.progressBar:setMax(nextNeed.needFavor - curNeedFavor)
		self.progressBar:setValue(curFavor - curNeedFavor)
		self.textnum:setText(hcf.likingLevel)
	else
		self.progressBar:setMax(1)
		self.progressBar:setValue(0)
		self.textnum:setText("")
	end
	self.curIndex = 0
	self.curInfo = false

	if hcf and hcf.likingLevel then
		local arrInfo = DynamicConfigData.t_HeroTotemsHeroFavor[hcf.likingLevel].attr
		local combatConfig = DynamicConfigData.t_combat
		self.lvitem.list_add:setItemRenderer(
			function(index, obj)
				local info = arrInfo[index+1]
				printTable(33,"info",info)
				local value = info.value
				local attrName = combatConfig[info.type].name
				attrName = string.gsub(attrName," ","")
				local attrN = obj:getChildAutoType("txt_attrName")
				local attNum = obj:getChildAutoType("txt_cur")
				attrN:setText(attrName)
				attNum:setText(value)
				obj:getChildAutoType("n8"):setVisible(false)
				
				local iconLoader = obj:getChildAutoType("loader_attrIcon")
				iconLoader:setURL(PathConfiger.getFightAttrIcon(index + 1))
			end
		)
		self.lvitem.list_add:setNumItems(#arrInfo)
	else
		self.lvitem.list_add:setNumItems(0)
	end
	self.view:getController("maxLevel"):setSelectedIndex(0)
	local hcf = HandbookModel.heroData[self._args.heroId]
	if hcf then
		if hcf.likingLevel >= #DynamicConfigData.t_HeroTotemsHeroFavor then
			self.view:getController("maxLevel"):setSelectedIndex(1)
		end
	end
	self:setRightPanel()
	self:setMemoiristBtnRed(self._args.heroId)
	self:setInteractBtnRed(self._args.heroId)
end

function HeroGiftView:showGiftPanel(giftData)
	local nextNeed = 0
	local hcf = HandbookModel.heroData[self._args.heroId]
	if hcf then
		nextNeed = DynamicConfigData.t_HeroTotemsHeroFavor[#DynamicConfigData.t_HeroTotemsHeroFavor].needFavor - hcf.likingExp
	end
	local tempMax = math.ceil(nextNeed / giftData.giftPoint)
	local max = giftData.data.__data.amount
	if max >= tempMax then
		max = tempMax
	end
	if max >= 200 then
		max = 200
	end
	self.giftPanel:setVisible(true)
	self.dslider:getChildAutoType("num1"):setText(string.format(Desc.Gift_desc1,0))
	local function onChanged( ... )
		local num = math.floor(self.dslider:getValue() + 0.5)
		if num >= max then
			num = max
		end
		self.dslider:setValue(num)
		self.dslider:getChildAutoType("num"):setText(string.format(Desc.Gift_desc2, "+"..giftData.giftPoint * num))
		self.dslider:getChildAutoType("num1"):setText(string.format(Desc.Gift_desc1,num))
	end
	self.dslider:addEventListener(FUIEventType.Changed,onChanged,99);
	
	self.dslider:setValue(max)
	self.dslider:setMax(max)
	self.dslider:getChildAutoType("num"):setText(string.format(Desc.Gift_desc2, "+0"))
	self.closePanel:addClickListener(function()
		self.giftPanel:setVisible(false)
	end,99)

	local function add(state)
		local num = math.floor(self.dslider:getValue() + 1)
		if num >= max then
			num = max
			if num == tempMax and not state then
				RollTips.show(Desc.Gift_desc3)
			end
		end
		self.dslider:setValue("+"..num)
		self.dslider:getChildAutoType("num"):setText(string.format(Desc.Gift_desc2, "+"..giftData.giftPoint * num))
		self.dslider:getChildAutoType("num1"):setText(string.format(Desc.Gift_desc1,num))
	end

	self.btn_add:addClickListener(function()
		add()
	end,99)
	
	self.btn_back:addClickListener(function()
		local num = math.floor(self.dslider:getValue() - 1)
		if num <= 0 then
			num = 0
		end
		self.dslider:setValue(num)
		self.dslider:getChildAutoType("num"):setText(string.format(Desc.Gift_desc2, "+"..giftData.giftPoint * num))
		self.dslider:getChildAutoType("num1"):setText(string.format(Desc.Gift_desc1,num))
	end,99)

	self.btn_send:addClickListener(function() 
		local amount = self.dslider:getValue()
		if amount == 0 then return end
		if tolua.isnull(self.view) then return end
		
		self.curInfo = giftData.data
		local params = {}
		params.bagType = self.curInfo.__bagType
		params.itemId = self.curInfo.__data.id
		params.amount = self.dslider:getValue()
		params.ex = self._args.heroId
		params.onSuccess = function( res )
			if tolua.isnull(self.view) then return end
			if not self.curInfo then return end
			local curIndex = nil
			giftData = self:getGiftCell()
			for i = 1, #giftData do
				if self.curInfo.__data.code == giftData[i].data.__data.code then
					curIndex = i - amount
					break
				end
			end
			if tolua.isnull(self.view) then return end
			self.curIndex = curIndex or 0
			self.curInfo = false
			self.giftList:setNumItems(#giftData)
			self.giftPanel:setVisible(false)
		end
		RPCReq.Bag_UseItem(params, params.onSuccess)
	end,99)
	add(true)
	self.view:getChildAutoType("desc"):setText(DynamicConfigData.t_Gift[giftData.data.__data.code].description)
end

function HeroGiftView:getGiftCell()
	local heroGiftInfo = DynamicConfigData.t_HeroTotemsGift
	local packData = PackModel:getNormalBag()
	local giftData = {}

	for k,v in pairs(packData.__packItems) do
		if v.__itemInfo.type == 13 then
			local dd = {}
			dd.data = v

			local gif = heroGiftInfo[v.__data.code]
			if  gif then
				local likeHero = gif.likeHero
				local hateHero = gif.hateHero
				local giftPoint = gif.giftPoint
				local likeState = false
				for m,n in pairs(likeHero) do
					if self._args.heroId == n then
						giftPoint = giftPoint + gif.likeAdd
						likeState = true
						break
					end
				end
				local state = false
				for m,n in pairs(hateHero) do
					if self._args.heroId == n then
						giftPoint =  giftPoint - gif.hateDeduct
						state = true
						break
					end
				end
				dd.giftPoint = giftPoint
				dd.basePoint = gif.giftPoint
				dd.likeState = likeState
				dd.hateState = state
				table.insert(giftData,dd)
			end
		end
	end


	local function cmp(a,b)
		return a.giftPoint > b.giftPoint
	end

	table.sort(giftData,cmp)
	
	return giftData
end

function HeroGiftView:HeroTotems_UpdateLiking(_,data)
	local hcf = HandbookModel.heroData[self._args.heroId]
	if hcf then
		if hcf.likingLevel >= #DynamicConfigData.t_HeroTotemsHeroFavor then
			self.view:getController("maxLevel"):setSelectedIndex(1)
		end
	end
	local hcf = data.hero
	if hcf and hcf.heroCode then
		local curNeed = DynamicConfigData.t_HeroTotemsHeroFavor[hcf.likingLevel]
		local nextNeed = DynamicConfigData.t_HeroTotemsHeroFavor[hcf.likingLevel+1]
		local curNeedFavor = curNeed and curNeed.needFavor or 0
		if not nextNeed then
			nextNeed = DynamicConfigData.t_HeroTotemsHeroFavor[hcf.likingLevel]
		end
		local curFavor = hcf.likingExp
		if curFavor > nextNeed.needFavor then
			curFavor = nextNeed.needFavor
		end
		self.progressBar:setMax(nextNeed.needFavor - curNeedFavor)
		self.progressBar:setValue(curFavor - curNeedFavor)
		self.textnum:setText(hcf.likingLevel)
		
		
		if not self.animationing then
			if hcf.likingLevel > self.tempLevel then
				self.giftSpineLevelUp:setVisible(true)
				self.animationing = true
				self.giftSpineLevelUp:setAnimation(0, "ui_hangandu_2", false)
				self.giftSpineLevelUp:setCompleteListener(function(name)
					if name == "ui_hangandu_2" then
						self.animationing = false
					end
				end)
				self.tempLevel = hcf.likingLevel
			else	
				self.giftSpine:setVisible(true)
				self.giftSpine:setAnimation(0, "ui_hangandu_1", false)
				self.giftSpine:setCompleteListener(function(name)
					if name == "ui_hangandu_1" then
						self.animationing = false
					end
				end)
			end
		end
		if self.frameList[self.selectIndex] then
			self.frameList[self.selectIndex]:getChildAutoType("$textnum"):setText(hcf.likingLevel)
		end
		if hcf.likingLevel and hcf.likingLevel > 0 then
			local arrInfo = DynamicConfigData.t_HeroTotemsHeroFavor[hcf.likingLevel].attr
			local combatConfig = DynamicConfigData.t_combat
			self.lvitem.list_add:setItemRenderer(
				function(index, obj)
					local info = arrInfo[index+1]
					printTable(33,"info",info)
					local value = info.value
					local attrName = combatConfig[info.type].name
					attrName = string.gsub(attrName," ","")
					local attrN = obj:getChildAutoType("txt_attrName")
					local attNum = obj:getChildAutoType("txt_cur")
					attrN:setText(attrName)
					attNum:setText(value)
					obj:getChildAutoType("n8"):setVisible(false)
					local iconLoader = obj:getChildAutoType("loader_attrIcon")
					iconLoader:setURL(PathConfiger.getFightAttrIcon(index + 1))
				end
			)
			self.lvitem.list_add:setNumItems(#arrInfo)
		end
		local zeroTime = math.floor(TimeLib.GetDateStamp(ServerTimeModel:getServerTime()*1000)/1000)
		if hcf.quesCount and zeroTime == hcf.quesCount then 
			self.btn_play:setGrayed(true)
			self.view:getChildAutoType("btn_play/title"):setAlpha(0.7)
		else
			self.btn_play:setGrayed(false)
			self.view:getChildAutoType("btn_play/title"):setAlpha(1)
		end
		self:setMemoiristBtnRed(self._args.heroId)
		self:setInteractBtnRed(self._args.heroId)
		self.heroList:setNumItems(#self._showHeroList)
	end
end

function HeroGiftView:HeroDormitoryView_Num()
	self:setInteractBtnRed(self._args.heroId)
	self.txt_num:setText(string.format(Desc.HeroDormitory_leftNum1,HandbookModel:getResidueNum()))
	self.heroList:setNumItems(#self._showHeroList)
end

function HeroGiftView:_exit()
    Scheduler.unschedule(self.timerKey)
end

return HeroGiftView