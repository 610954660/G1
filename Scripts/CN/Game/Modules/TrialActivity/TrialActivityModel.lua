--Date :2021-01-02
--Author : generated by FairyGUI
--Desc : 

local TrialActivityModel = class("TrialActivity", BaseModel)

function TrialActivityModel:ctor()
    self.trialData = false
    self.trialShopData = false
    self.restTimes = 0
    self.match = false
    self.shop = {}
    self.exchange = false
    self.fightId = DynamicConfigData.t_TrialConfig[1].fightId
    self.actId = 1
    self.isCanShilian = true
    self.changeTips = true
    self.limit = DynamicConfigData.t_TrialConfig[1].challNum
    self.heroNum = DynamicConfigData.t_TrialConfig[1].LimitNum
end

function TrialActivityModel:init()

end

function TrialActivityModel:getActId()
    if self.actId == 1 then
        local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.Trial)
        if  actData then 
            self.actId =  actData.id
        end
    end
    return self.actId
end


function TrialActivityModel:initTrialData(data)
    self.trialData = data or {}
    self.restTimes = self.trialData.restTimes or 0
    self.match = self.trialData.match or false   -- PPublic_PlayerServerId
    self.exchange = self.trialData.exchange or {} -- BuyTimesRecord
    if self.trialShopData then
        self:updateRed()
    end
end

function TrialActivityModel:initTrialShopData(data)
    self.trialShopData = data or {}
    self.shop = self.trialShopData.gift or {} -- BuyTimesRecordWithNextMs
    Dispatcher.dispatchEvent("trialActivity_freeBuySuccess")
    if self.trialData then
        self:updateRed()
    end
end

-- 获取模板id
function TrialActivityModel:getModuleId()
	local moduleId = 1
	local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.Trial)
	moduleId = actData and actData.showContent.moduleId or 1
	-- printTable(8848,">>actData>>",actData)
	return moduleId
end

-- 获取活动id
function TrialActivityModel:getActivityId()
	local activityId = 1
	local actData = ActivityModel:getActityByType(GameDef.ActivityType.Trial)
	activityId = actData and actData.id or 1
	return activityId
end

-- 获取商店模板id
function TrialActivityModel:getShopModuleId()
	local moduleId = 1
	local actData = ModelManager.ActivityModel:getActityByType(GameDef.ActivityType.TrialShop)
	moduleId = actData and actData.showContent.moduleId or 1
	-- printTable(8848,">>actData>>",actData)
	return moduleId
end

-- 获取商店活动id
function TrialActivityModel:getShopActivityId()
	local activityId = 1
	local actData = ActivityModel:getActityByType(GameDef.ActivityType.TrialShop)
	activityId = actData and actData.id or 1
	return activityId
end

function TrialActivityModel:getAIEnemyInfos(playerId)
	local data = self:getRobotInfo(playerId,DynamicConfigData.t_TrialRobot)
	return data or {}
end


function TrialActivityModel:getRobotInfo(playerId,config)
    local conf = config[playerId] 
    local data = false
    if (conf) then
        -- 基本信息
        local baseInfo = {
            head = conf.head,
            level = conf.level,
            name = conf.name,
            playerId = playerId,
            score = conf.score,
            sex = conf.sex,
        }
        -- 队伍信息
        local arrayInfo = {};
        local fightConf = DynamicConfigData.t_fight
        local fightId  = conf.fightId
        local c = fightConf[fightId];
        if (c) then
            local combat = c.monstercombat
            local heroInfos = {}
            for _, posIndex in pairs(c.monsterStand) do
                local d = {
                    code = c["monsterId"..posIndex],
                    level = c["level"..posIndex],
                    star = c["star"..posIndex],
                    type = 2
                }
                if posIndex < 4 then
                    d.id = 10 + posIndex
                elseif posIndex < 7 then
                    d.id = 20 + posIndex - 3
                else
                    d.id = 30 + posIndex - 6
                end
                table.insert(heroInfos, d);
            end
            local info = {
                combat = combat,
                heroInfos = heroInfos,
                arrayType = fightId
            }
            return info
        end
    end
    return data
end

-- 开始匹配
function TrialActivityModel:reqPlayer()
    print(33,"TrialActivityModel:reqPlayer()")
    if self.restTimes <= 0 then
        RollTips.show(Desc.trialActivity_desc10)
        return 
    end
    ViewManager.open("CrossPVPMatchView",{gameType = GameDef.BattleArrayType.Trail})
    RPCReq.Activity_Trial_OnMatch({activityId = self:getActivityId()},function(data)
        printTable(33,"Activity_Trial_OnMatch call",data)
        self.match = data.match
        Dispatcher.dispatchEvent("trialActivity_matchSuccess")
    end)
end

-- 开始兑换
function TrialActivityModel:reqExchange(id)
    print(33,"TrialActivityModel:reqExchange()")
    RPCReq.Activity_Trial_OnExchange({activityId = self:getActivityId(),exchangeId = id},function(data)
        printTable(33,"Activity_Trial_OnExchange call",data)
        --RollTips.show("")
        Dispatcher.dispatchEvent("trialActivity_exchangeSuccess")
    end)
end

-- 购买免费商品
function TrialActivityModel:reqFreeShop(id)
    printTable(33,"TrialActivityModel:reqFreeShop()",{activityId = self:getShopActivityId(),id = id})
    RPCReq.Activity_HeroSummonShop_Buy({activityType = GameDef.ActivityType.TrialShop,id = id},function(data)
        printTable(33,"Activity_HeroSummon_GetReward call",data)
        --RollTips.show("")
        Dispatcher.dispatchEvent("trialActivity_freeBuySuccess")
    end)
end



-- 红点更新
function TrialActivityModel:updateRed()

    local key1 = "V_ACTIVITY_"..GameDef.ActivityType.Trial.."times"
    local key2 = "V_ACTIVITY_"..GameDef.ActivityType.Trial.."exchange"
    local key3 = "V_ACTIVITY_"..GameDef.ActivityType.Trial.."shop"
    local keyArr = {}

    local status, addtime = ModelManager.ActivityModel:getActStatusAndLastTime(self:getActId())
    if status == 4 then
        ViewManager.close("TrialActivityView")
        ViewManager.close("TrialActivityAddView")
    end
    if addtime and addtime > 0 then
        local addtime2 = addtime/1000 - DynamicConfigData.t_TrialConfig[1].endTrialTime * 60*60*24
        if addtime2 > 0  then
            table.insert(keyArr, key1)
            self.isCanShilian = true
        else
            self.isCanShilian = false
        end
        RedManager.updateValue(key1 , self.isCanShilian and self.restTimes > 0)
    end

    local exChangeData = DynamicConfigData.t_TrialExchange[self:getModuleId()]

    local exchangeC = self.exchange or {}
    for k,v in pairs(exChangeData) do
		local buyNum = exchangeC[v.id] and exchangeC[v.id].times or 0
		v.canBuyNum = v.limit - buyNum
        if v.canBuyNum > 0 then
            local isYes = true
            for i = 1,3 do
                local price = v.price[i]
                if price then
                    local itemData = ItemsUtil.createItemData({data = {code = price.code, type = price.type}})
                    local code = itemData:getItemInfo().code
                    local hasNum = 0
                    if code > 2000 and code < 2100 then
                        hasNum=	PlayerModel:getMoneyByType(code - 2000)
                    else
                        hasNum=	ModelManager.PackModel:getItemsFromAllPackByCode(code)
                    end
                    if price.amount > hasNum then
                        isYes = false
                        break
                    end
                end
            end
                
            if isYes then
                table.insert(keyArr, key2)
                RedManager.updateValue(key2 , true)
                break
            end
		end
    end
    
    local shopData = DynamicConfigData.t_TrialShop[self:getShopModuleId()]
    local shopC = self.shop or {}
    local isFind = false
    for k,v in pairs(shopData) do
		local buyNum = shopC[v.id] and shopC[v.id].times or 0
		if v.buyType == 1 and v.price == 0 and buyNum < v.limit then
            table.insert(keyArr, key3)
            isFind = true
            break
		end
    end
    RedManager.updateValue(key3 , isFind)

    RedManager.addMap("V_ACTIVITY_"..GameDef.ActivityType.Trial, keyArr)
end

return TrialActivityModel
