--Name : HandbookModel.lua
--Author : generated by zhouguoshan
--Date : 2020-10-22
--Desc : 

local FileCacheManager = require "Game.Managers.FileCacheManager"

VersionChange = {
	isChangeVersion = false,
	oldVersion = __SCRIPT_VERSION__,
	changeServerId = 0
}

function VersionChange:init()
	__IS_EXPERIENCE__ = FileCacheManager.getBoolForKey("_is_experience_", false, nil, true)
	self.isChangeVersion = FileCacheManager.getBoolForKey("_change_version_", false, nil, true)
	self.changeServerId = FileCacheManager.getIntForKey("_change_serverId_", 0, nil, true)
	if self.isChangeVersion then
		__SCRIPT_VERSION__ = 1
	end 
end

function VersionChange:doChangeVersion(serverInfo)
	if not serverInfo then return false end
	local experience = false
	if serverInfo.trial==1 then 
		experience = true
	end
	
	if __IS_EXPERIENCE__ == experience then return false end
	
	local info = {}
	if experience then
		info.text = Desc.version_change1:format(serverInfo.name)
	else
		info.text = Desc.version_change2:format(serverInfo.name)
	end
	info.type = "yes_no"
	info.mask = true
	info.onYes = function()
		__IS_EXPERIENCE__ = experience

		FileCacheManager.setBoolForKey("_is_experience_", experience, nil, true)
		FileCacheManager.setBoolForKey("_change_version_", true, nil, true)
		FileCacheManager.setIntForKey("_change_serverId_", serverInfo.server_id, nil, true)
		
		LuaLogE("VersionChange:doChangeVersion(),isExperience = "..(experience and "yes," or "no,").."serverId ="..serverInfo.server_id)
		
		GlobalUtil.purgeGame()
	end
	info.onNo = function()
		Dispatcher.dispatchEvent(EventType.login_loginFail)
	end
	Alert.show(info)
	return true
end

function VersionChange:clear()
	FileCacheManager.setBoolForKey("_change_version_", false, nil, true)
	if __SCRIPT_VERSION__ == 1 then
		__SCRIPT_VERSION__ = self.oldVersion
	end
end

function VersionChange:getChangeServerId()
	return self.changeServerId
end

function VersionChange:clearChangeServerId()
	if self.changeServerId > 0 then
		self.changeServerId = 0
		FileCacheManager.setIntForKey("_change_serverId_", 0, nil, true)
	end
end

function VersionChange:cmpVersion(version1,version2)

	return tonumber(version1) > tonumber(version2)
end

VersionChange:init()

